//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
#RE_IN_DE
#pragma define (store)
#if _LSL_COMPILERVERSION >= 42
_LMCModuleBase : CLASS;
HwcLogging : CLASS;
SigCLib : CLASS;
#endif
_AxisBase : CLASS_PUBLIC
	TYPE
	  _LMCAXIS_POSINFOMODE :
	  (
	    POSINFO_TIME,
	    POSINFO_DISTANCE
	  )$UDINT;
	  _LMCAXIS_READPARAMETER_LREAL :
	  (
	    LMCAXIS_PAR_RD2_JMAX,
	    LMCAXIS_PAR_RD2_ACC
	  )$UDINT;
	  CmdControl :
	  (
	    IPRPowerOn,
	    IPRPowerOff,
	    IPRMoveRelative,
	    IPRMoveAbsolute,
	    IPRMoveReference,
	    IPRMoveEndless,
	    IPRMoveHand,
	    IPRStopMove,
	    IPRCoupleGearVelocity,
	    IPRCoupleDeltaPos,
	    IPRCoupleUserPos,
	    IPRCoupleProfilePos,
	    IPRCoupleGearRelative,
	    IPRCoupleGearAbsolute,
	    IPRCoupleCurveTab,
	    IPRSetSWEndPos,
	    IPRSetPosition,
	    IPRChangeCoupleSettings,
	    IPRTuneAxis,
	    IPRReadPosition,
	    IPRReadVelocity,
	    IPRInPosition,
	    IPRReadAxisStatus,
	    IPRReadAxisError,
	    IPRReadMasterInfo,
	    IPRSetFollowMode,
	    IPRReferenceReady,
	    IPRInpositionOk,
	    IPRCoupleGearPolynom,
	    IPRSetParameter,
	    IPRSetAdjustment,
	    IPRReadParameter,
	    IPRReadSWEndPos,
	    IPRCalcMovingTime,
	    IPRQuitError,
	    IPRCalcMaxSlavePath,
	    IPRCalcExtToAppliPos,
	    IPRReadUserData,
	    IPRGetMasterInformation,
	    IPR_SetErrorToMasterCoupleMonitoring
	  )$UINT;
	END_TYPE
END_CLASS;
#pragma define (restore)
#pragma InclDefBlk SdiasBase
SdiasBase : CLASS_PUBLIC
#include "..\Class\SdiasManager\SdiasManager.h"
#include "..\Class\SdiasBase\SdiasBase.h"
#include "..\Class\HwControl\HwControl.h"
#include "..\Source\interfaces\lsl_st_hardwaretree.h"
#include "..\Source\interfaces\lsl_st_mt.h"
	TYPE
	  t_b_SdiasFWState : BINT
	  [
	    1 VoltageNotOk,
	    2 NoSync,
	    3 FlashDataCRCError,
	    4 RAMDataCRCError,
	    5 FlashUnsafe,
	    6 BusTimeNotSupported,
	    7 ToggleBit,
	  ];
#pragma pack(push, 1)
	  t_s_SdiasFWStateStandard : STRUCT
	    ErrorBits : t_b_SdiasFWState;
	    Reserved : UINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  t_s_SPI_AccessControl : STRUCT
	    udAccessHandle : UDINT;
	    usAccessLength : USINT;
	    usAccessOffset : USINT;
	    pControlByte : t_SDIAS_pControlByte;
	    pStateByte : t_SDIAS_pStateByte;
	  END_STRUCT;
#pragma pack(pop)
	  t_SPI_PDO_DataWrite : ARRAY [0..SDIAS_MAX_PDO_SIZE-1] OF USINT;
	  t_SPI_PDO_DataRead : ARRAY [0..SDIAS_MAX_PDO_SIZE-1] OF USINT;
	  t_e_SPIWriteSSW :
	  (
	    _SPIWrite_Idle,
	    _AllocateMemory,
	    _SetRequest,
	    _ReadGrant,
	    _ReadSectorData_SetPageAddress,
	    _ReadSectorData_Wait4SetPageAddress,
	    _ReadSectorData_SetReadPageCommand,
	    _ReadSectorData_Wait4SetReadPageCommand,
	    _ReadSectorData_ReadReceiveBufferPart1,
	    _ReadSectorData_ReadReceiveBufferPart2,
	    _EraseSector_SetPageAddress,
	    _EraseSector_Wait4SetPageAddress,
	    _EraseSector_SetEraseSectorCommand,
	    _EraseSector_Wait4SetEraseSectorCommand,
	    _WriteSectorData_SetPageAddress,
	    _WriteSectorData_Wait4SetPageAddress,
	    _WriteSectorData_WriteTransmitBufferPart1,
	    _WriteSectorData_WriteTransmitBufferPart2,
	    _WriteSectorData_SetWritePageCommand,
	    _WriteSectorData_Wait4SetWritePageCommand,
	    _VerifySectorData_SetPageAddress,
	    _VerifySectorData_Wait4SetPageAddress,
	    _VerifySectorData_SetReadPageCommand,
	    _VerifySectorData_Wait4SetReadPageCommand,
	    _VerifySectorData_ReadReceiveBufferPart1,
	    _VerifySectorData_ReadReceiveBufferPart2,
	    _VerifySectorData_CompareData,
	    _ClearRequest,
	    _DisableDataObjects,
	    _FreeMemory,
	    _FinishSPIWrite
	  )$UDINT;
	  usWriteModes : USINT;
#pragma pack(push, 1)
	  t_s_SPIWriteVars : STRUCT
	    sWriteAccess : t_s_SPI_AccessControl;
	    pWriteData : ^t_SPI_PDO_DataWrite;
	    sReadAccess : t_s_SPI_AccessControl;
	    pReadData : ^t_SPI_PDO_DataRead;
	    sReadStateAccess : t_s_SPI_AccessControl;
	    pReadStateData : ^USINT;
	    pSectorMemoryRead : ^USINT;
	    pSectorMemoryWrite : ^USINT;
	    pSectorMemoryVerify : ^USINT;
	    pUserWriteData : ^USINT;
	    udUserWriteLength : UDINT;
	    usUserSectorNumber : USINT;
	    usUserPageNumber : USINT;
	    usUserPageOffset : USINT;
	    eSPIWriteSSW : t_e_SPIWriteSSW;
	    eSPIWriteSSWError : t_e_SPIWriteSSW;
	    uiCurrentPage : UINT;
	    udCurrentSectorMemoryOffset : UDINT;
	    usRetryCnt : USINT;
	    bsFinished : BSINT
	    [
	      1 Finished,
	      2 Error,
	      3 Bit3,
	      4 Bit4,
	      5 Bit5,
	      6 Bit6,
	      7 Bit7,
	      8 Bit8,
	    ];
	    usCycleWaitCnt : USINT;
	    udTimeout : UDINT;
	    NotReadyCnt : DINT;
	    usFinishedWriteLog : USINT;
	    usWriteMode : usWriteModes;
	    udMemoryToAllocate : UDINT;
	    uiLastPage : UINT;
	    udUserDataOffset : DINT;
	  END_STRUCT;
#pragma pack(pop)
	END_TYPE
END_CLASS;
#pragma define (restore)
#pragma InclDefBlk _BusInterfaceSdiasDriveMng
_BusInterfaceSdiasDriveMng : CLASS_PUBLIC
: SdiasBase
#include "..\class\_drivemngbase\drivemngbase.h"
	TYPE
#pragma pack(push, 1)
	  t_ReadValuePtr : STRUCT
	    a_SyncValues : ARRAY [0..4] OF DINT;
	    bs_InputStates : BSINT
	    [
	      1 OptionBoardInputState,
	    ];
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  t_WriteValuePtr : STRUCT
	    a_SyncValues : ARRAY [0..4] OF DINT;
	  END_STRUCT;
#pragma pack(pop)
	END_TYPE
END_CLASS;
#pragma define (restore)
#pragma InclDefBlk _DriveAxisBase
_DriveAxisBase : CLASS_PUBLIC
#include "..\Class\_DriveMngBase\SDDDefinitions.h"
#include "..\Class\HwControl\HwControl.h"
	TYPE
#pragma pack(push, 1)
	  _SDDMEMHEADER : STRUCT
	    udCRC32 : UDINT;
	    udLen : UDINT;
	    udVersion : UDINT;
	    AxOffset : DINT;
	    AxLength : UDINT;
	    AxName : ARRAY [0..20] OF CHAR;
	  END_STRUCT;
#pragma pack(pop)
	END_TYPE
END_CLASS;
#pragma define (restore)
#pragma InclDefBlk _DriveMngBase
_DriveMngBase : CLASS_PUBLIC
#include "..\Class\_DriveMngBase\SDDDefinitions.h"
#include "..\class\_drivemngbase\drivemngbase.h"
	TYPE
#pragma pack(push, 1)
	  _SDDBFENTRY : STRUCT
	    bFinished : DINT;
	    uiParaIndex : UINT;
	    usParaSubIndex : USINT;
	    usRDWR : USINT;
	    bsDataInfo : BSINT
	    [
	      1 DataLength1,
	      2 DataLength2,
	      3 res1,
	      4 res2,
	      5 Offset1,
	      6 Offset2,
	      7 res3,
	      8 res4,
	    ];
	    dValue : ARRAY [0..11] OF USINT;
	    pThisObj : ^void;
	    usEntry : USINT;
	    bSent : BOOL;
	    udTimeStamp : UDINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _SDDRINGBUFFER : STRUCT
	    pStart : ^_SDDBFENTRY;
	    pEnd : ^_SDDBFENTRY;
	    pRead : ^_SDDBFENTRY;
	    pWrite : ^_SDDBFENTRY;
	    ActEntries : DINT;
	  END_STRUCT;
#pragma pack(pop)
	END_TYPE
END_CLASS;
#pragma define (restore)
_LMCRefBase : CLASS_PUBLIC
	TYPE
#pragma pack(push, 1)
	  _LMCAXIS_REFDATA : STRUCT
	    Status : iprStates;
	    Velocity : DINT;
	    Acc : DINT;
	    vSetRef1 : DINT;
	    vSetRef2 : DINT;
	    PosWindow : DINT;
	    LatchPosRef : DINT;
	    Speed : DINT;
	  END_STRUCT;
#pragma pack(pop)
	  _LMCREF_READPARAMETER :
	  (
	    ZPULSE_DIST
	  )$UDINT;
	END_TYPE
END_CLASS;
#pragma define (restore)
#pragma InclDefBlk _LMCAxisBase
_LMCAxisBase : CLASS_PUBLIC
: _AxisBase
#include <.\lsl_st_systrace.h>
#include "..\Class\_LMCAxisBase\C_MathAxis.h"
#include "..\Class\_LMCAxisBase\_LMCTraceView.h"
#include "..\Class\_LMCAxisBase\BacklashLogin.h"
	TYPE
	  _CommandList :
	  (
	    CPowerOn,
	    CPowerOff,
	    CInposition,
	    CMoveHand,
	    CMoveEndless,
	    CMoveAbsolut,
	    CMoveReference,
	    CMoveRelative,
	    CStopMove,
	    CCoupleGearAbsolute,
	    CCoupleGearRelative,
	    CCoupleGearVelocity,
	    CCoupleCurveTab,
	    CCoupleUserPos,
	    CCoupleDeltaPos,
	    CCoupleProfilePos,
	    CSetPosition,
	    CSetAutoOffset,
	    CSetCoupleParameter,
	    CSetParameter,
	    CReadPosition,
	    CSetSWEndPos,
	    CReadSWEndPos,
	    CReadAxisError,
	    CReadAxisStatus,
	    CReadMasterInfo,
	    CReadVelocity,
	    CReadParameter,
	    CTuneAxis:=28,
	    CInternModuloOverFlow:=29,
	    CFollowMode:=30,
	    CCoupleGearPolynom:=31,
	    CCoupleAdditivePosDiff:=32,
	    CCoupleCAM,
	    CMoveShortestWay,
	    CCalcMovingTime,
	    CQuitError,
	    CCalcMaxSlavePath,
	    CCalcExtToAppliPos,
	    CChangeMoveSettings,
	    CGetPosInfoBeforeRampDown,
	    CSetDynSWEndPos,
	    CQuickStop
	  )$UDINT;
	  _CoupleMonitorExtendedConfig : BDINT
	  [
	    1 ReportErrorToMaster,
	    2 ReportSlaveErrorToMaster,
	    3 ReportMasterErrorToSlave,
	    4 ReportSlaveErrorToSlave,
	    5 SwLimitMonitoring,
	    6 PowerOffMonitoring,
	  ];
	  _LogStruct : STRUCT
	    Command : _CommandList;
	    CommandoResult : _LMCAXIS_CMDERROR;
	    TimeStamp : UDINT;
	    RTStamp : UDINT;
	  END_STRUCT;
	  _LogFile : STRUCT
	    Logmode : DINT;
	    AccesNr : DINT;
	    LogData : ARRAY [0..101] OF _LogStruct;
	  END_STRUCT;
	  t_BLMMeasFlags : BINT
	  [
	    1 StartMeasurement,
	    2 DoMeasurement,
	    3 FinishedMeasurement,
	    4 BLValueDetected,
	    5 BLAmountNegCalced,
	    6 BLAmountPosCalced,
	    7 GetHWInfo,
	    8 HWInfoError,
	    9 DoBLValCorrection,
	    10 InvCurr,
	    11 Bit11,
	    12 Bit12,
	    13 Bit13,
	    14 Bit14,
	    15 Bit15,
	    16 DoMeasurementError,
	  ];
	  t_BLCCompFlags : BINT
	  [
	    1 DirFlg,
	    2 TransitionActive,
	    3 Enabled,
	    4 EnabledMarker,
	    5 UseTable,
	    6 CallTable,
	    7 CalcBL,
	    8 Standstill,
	    9 StandstillMarker,
	    10 MoveDirChanged,
	    11 ValidTable,
	    12 Bit12,
	    13 Bit13,
	    14 Bit14,
	    15 TransferBLAmountError,
	    16 ExecuteBacklashError,
	  ];
	  te_BLCmdClassSvr :
	  (
	    IPBLCGetPointerBacklash:=51,
	    IPBLCSetBacklashAmount,
	    IPBLCGetPointerBLCompFlags,
	    IPBLCExecute,
	    IPBLCSetPointerSetPosVel,
	    IPBLCSetTimeBase,
	    IPBLCDetectMoveDirChange,
	    IPBLCReset,
	    IPBLMGetPointerBacklashValue:=71,
	    IPBLMDoMeasurement,
	    IPBLMGetPointerMeasFlags,
	    IPBLMSetTimeBase,
	    IPBLMSetExtIntUnits,
	    IPBLMSetPlaceAxisNo,
	    IPBLMSetCurrSign,
	    IPBLMReset
	  )$UDINT;
	END_TYPE
END_CLASS;
#pragma define (restore)
#pragma InclDefBlk _LMCMath_SO3
_LMCMath_SO3 : CLASS_PUBLIC
	TYPE
	  _ADVAN_MATRIX_ : ARRAY [0..2, 0..3] OF LREAL;
	  _FRAME_ : ARRAY [0..3, 0..3] OF LREAL;
#pragma pack(push, 1)
	  _VECTOR_ : STRUCT
	    v_x : LREAL;
	    v_y : LREAL;
	    v_z : LREAL;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _HOM_VEC_ : STRUCT
	    vec_r : _VECTOR_;
	    w : LREAL;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _POINT_ : STRUCT
	    e_x : DINT;
	    e_y : DINT;
	    e_z : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _ROT_GEOMETRY_ : STRUCT
	    Angle : DINT;
	    RotAxis : _POINT_;
	  END_STRUCT;
#pragma pack(pop)
	  _ROT_MODUS :
	  (
	    ACTIVE_ROTATION,
	    PASSIVE_ROTATION
	  )$UDINT;
	  _TENSOR_ : ARRAY [0..2, 0..2] OF LREAL;
	END_TYPE
END_CLASS;
#pragma define (restore)
#pragma InclDefBlk _LMCMathFunctions
_LMCMathFunctions : CLASS_PUBLIC
#include "..\Class\_LMCMathFunctions\C_MathFunct.h"
	TYPE
#pragma pack(push, 4)
	  _coeff_ : STRUCT
	    coA : LREAL;
	    coB : LREAL;
	    coC : LREAL;
	    coD : LREAL;
	    coE : LREAL;
	  END_STRUCT;
#pragma pack(pop)
	  _COORD_2D : ARRAY [0..1] OF DINT;
#pragma pack(push, 4)
	  _LMC_VECTOR3 : STRUCT
	    coord_x1 : LREAL;
	    coord_x2 : LREAL;
	    coord_x3 : LREAL;
	  END_STRUCT;
#pragma pack(pop)
	  t_e_LMC_MoveProf_Jerk_ProfTypes :
	  (
	    LMC_ProfType_Jerk_TT,
	    LMC_ProfType_Jerk_TW,
	    LMC_ProfType_Jerk_WW,
	    LMC_ProfType_Jerk_WT,
	    LMC_ProfType_Jerk_XW,
	    LMC_ProfType_Jerk_XT
	  )$UDINT;
	  t_e_LMCMath_Retcodes :
	  (
	    LMCMathRet_NoError,
	    LMCMathRet_NegRoot,
	    LMCMathRet_InputErr,
	    LMCMathRet_NotPossible
	  )$UDINT;
#pragma pack(push, 1)
	  t_st_LMC_MoveProf_Jerk_Point : STRUCT
	    lrT : LREAL;
	    lrS : LREAL;
	    lrV : LREAL;
	    lrA : LREAL;
	    lrJ : LREAL;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  t_st_LMC_MoveProf_Jerk : STRUCT
	    ProfileType : t_e_LMC_MoveProf_Jerk_ProfTypes;
	    aPts : ARRAY [0..9] OF t_st_LMC_MoveProf_Jerk_Point;
	  END_STRUCT;
#pragma pack(pop)
	END_TYPE
END_CLASS;
#pragma define (restore)
#pragma InclDefBlk _LMCTableBuffer
_LMCTableBuffer : CLASS_PUBLIC
	TYPE
#pragma pack(push, 1)
	  _CURVATURE_DATA : STRUCT
	    aPos : ARRAY [0..3] OF LREAL;
	    aCurvature : ARRAY [0..3] OF LREAL;
	    Typ : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _TableBufferEntry_ : STRUCT
	    XPos : LREAL;
	    YPos : LREAL;
	    ZPos : LREAL;
	    SplineArg : LREAL;
	    PathLength : LREAL;
	    Flexion : LREAL;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _Table_ : STRUCT
	    KoFacXStart : LREAL;
	    KoFacYStart : LREAL;
	    KoFacZStart : LREAL;
	    KoFacXEnd : LREAL;
	    KoFacYEnd : LREAL;
	    KoFacZEnd : LREAL;
	    DataPoints : ARRAY [0.._TABLE_POINT_COUNT_] OF _TableBufferEntry_;
	  END_STRUCT;
#pragma pack(pop)
	END_TYPE
END_CLASS;
#pragma define (restore)
#pragma InclDefBlk _LMCProfileBase
_LMCProfileBase : CLASS_PUBLIC
#include <.\lsl_st_systrace.h>
#include "..\Class\_LMCProfileBase\C_MathProfile.h"
#include "..\Class\_LMCAxisBase\_LMCTraceView.h"
	TYPE
	  _LMCPROFTRANSMODESINT :
	  (
	    _LMC_EXACT_STOP,
	    _LMC_CONT_DIRECT_ACTIVE,
	    _LMC_CONT_DIRECT,
	    _LMC_SMOOTH_PARAB,
	    _LMC_SMOOTH_CUBIC,
	    _LMC_SMOOTH_5TH
	  )$UDINT;
#pragma pack(push, 4)
	  _LMCPROF_POSITIONS_INTERN : STRUCT
	    start : LREAL;
	    end : LREAL;
	  END_STRUCT;
#pragma pack(pop)
	  _LMCPROFAXISDATA : STRUCT
	    pos : _LMCPROF_POSITIONS_INTERN;
	    KoA : LREAL;
	    KoE : LREAL;
	    KoAorth : LREAL;
	    KoEorth : LREAL;
	    a1 : LREAL;
	    a2 : LREAL;
	    a3 : LREAL;
	    a4 : LREAL;
	    a5 : LREAL;
	  END_STRUCT;
	  _LMCPROF_CIRC_DEF_INTERN : BDINT
	  [
	    1 Axis1,
	    2 Axis2,
	    3 Axis3,
	    4 Axis4,
	    5 Axis5,
	    6 Axis6,
	    7 Axis7,
	    8 Axis8,
	    9 Axis9,
	    17 CircleCCW,
	  ];
	  _LMCPROFCIRCLEINDEXDEF : ARRAY [0.._LMC_MAX_AXIS-1] OF USINT;
	  _LMCPROFCIRCLEPLAINE :
	  (
	    NO_CIRCLE,
	    CIRCLE_2_AXIS,
	    CIRCLE_3_AXIS
	  )$UDINT;
#pragma pack(push, 4)
	  _LMCPROFCIRCLEDATA : STRUCT
	    xmp : DINT;
	    ymp : DINT;
	    zmp : DINT;
	    xstart : LREAL;
	    ystart : LREAL;
	    zstart : LREAL;
	    xortho : LREAL;
	    yortho : LREAL;
	    zortho : LREAL;
	    Radius : LREAL;
	    RadiusKor : LREAL;
	    ResidAngel : LREAL;
	    AlphaAnf : LREAL;
	    DeltaAlpha : LREAL;
	    CirclePlane : _LMCPROFCIRCLEPLAINE;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 4)
	  _LMCPROF_MoveData_Intern : STRUCT
	    pUserBuffer : ^_LMCPROF_MoveData;
	    pUserBufferNext : ^_LMCPROF_MoveData;
	    enCmdType : _LMCPROFCMDTYPES_INTERN;
	    enTransitionMode : _LMCPROFTRANSMODESINT;
	    dTransitionRadius : DINT;
	    bdCmdFlags : _LMCPROFINTCMDCONFIG_THREADSAFE;
	    stData : ARRAY [0.._LMC_MAX_AXIS-1] OF _LMCPROFAXISDATA;
	    ArcLength : LREAL;
	    PathLength : LREAL;
	    GroupPath : USINT;
	    bdCirAxis : _LMCPROF_CIRC_DEF_INTERN;
	    arCirIndex : _LMCPROFCIRCLEINDEXDEF;
	    stCirData : _LMCPROFCIRCLEDATA;
	    Vmax : LREAL;
	    Amax : LREAL;
	    Dmax : LREAL;
	    JMax : LREAL;
	    vNext : LREAL;
	    vNextLimit : LREAL;
	    vLimitDef : LREAL;
	    vLimit : LREAL;
	    vFStart : LREAL;
	    vFEnd : LREAL;
	    CoordSysNr : DINT;
	    PosSwMin : DINT;
	    PosSwMax : DINT;
	    SpecificMoveData : ARRAY [0..19] OF USINT;
	  END_STRUCT;
#pragma pack(pop)
	  CmdControl :
	  (
	    IPRSetBasicParameter,
	    IPRLockProfile,
	    IPRUnlockProfile,
	    IPRMoveLiniare,
	    IPRMoveCircle,
	    IPRProfileInPos,
	    IPRReadPos,
	    IPRProfileFinished,
	    IPRInitPosWin,
	    IPRProfAxisFinished,
	    IPRProfAxisInPos,
	    IPRPofChkType,
	    IPRPRofReadActError,
	    IPRProfReadLastIndex,
	    IPRProfDefMoveCircle,
	    IPRProfMoveFinished,
	    IPRProfGetStartpos,
	    IPRProfGetFreeLines,
	    IPRProfGetResidualPath,
	    IPRProfStopMove,
	    IPRProfRestartMove,
	    IPRProfIsProfileStopped,
	    IPRProfReadActPosition,
	    IPRProfSetOverride,
	    IPRProfReadOverride,
	    IPRProfReadEntryIndex,
	    IPRProfReadActSubError,
	    IPRSetAxisParameter,
	    IPRSetProfileParameter,
	    IPRCoupleGearAbsolute,
	    IPRCoupleGearRelative,
	    IPRCoupleGearVelocity,
	    IPRCoupleCurveTab,
	    IPRCoupleUserPos,
	    IPRCoupleProfilePos,
	    IPRCoupleGearPolynom,
	    IPRReadAxisState,
	    IPRGetBrakePositions,
	    IPRGetLinBrakePoint,
	    IPRGetRotBrakePoint,
	    IPRReadCmdIndex,
	    IPRReadProfileActValues,
	    IPRGetMoveFinished,
	    IPRReadResidualTime,
	    IPRGetBufferData,
	    IPRReadTimebase,
	    IPRProfileMoveRelative,
	    IPRLockProfileRestart,
	    IPRLockProfileStartLineNo,
	    IPRSetRestartPointIPR,
	    IPRReadRestartPos,
	    IPRContinueNCProg,
	    IPRReadRestartInfo,
	    IPRProfGetStartposRestart,
	    IPRReadCommonCalcParas,
	    IPRLockProfileStartFileOffset,
	    IPRLockProfileRestartFileOffset,
	    IPRSetRestartPoint,
	    IPRSetAxesPositionsG92,
	    IPRSetAxesPositionsG92Live,
	    IPRSetProfileInPos,
	    IPRReadProfileActValuesLREAL,
	    IPRActivateCmdByLMCCNCIpr,
	    IPRSetLMCCNCIprMode,
	    IPRIsRestartPointReached,
	    IPRReadLastPathLength,
	    IPRFinishCmd,
	    IPRGetDestinationPos
	  )$UINT;
	END_TYPE
END_CLASS;
#pragma define (restore)
_LMCProfileBuffer : CLASS_PUBLIC
	TYPE
	  _BUFFER_PARAMETER_ :
	  (
	    Max_Entries,
	    HiRes,
	    MaxEntries_TmpBuffer,
	    LMCCNC_IPR_MODE
	  )$UDINT;
	END_TYPE
END_CLASS;
#pragma define (restore)
#pragma InclDefBlk _LMCProfileLog
_LMCProfileLog : CLASS_PUBLIC
	TYPE
	  _LMCLogCmdList :
	  (
	    CEmpty,
	    CSetBasicParameter,
	    CLockProfile,
	    CUnlockProfile,
	    CMoveLinear,
	    CMoveCircle,
	    CMoveRelative,
	    CCircleDefinition,
	    CStopMove,
	    CSetAxisParameter,
	    CReadAxisParameter,
	    CSetGroupParameter,
	    CReadGroupParameter,
	    CSetProfileParameter,
	    CReadProfileParameter,
	    CProfileInPosition,
	    CReadPosition,
	    CReadProfileError,
	    CGetStartPositions,
	    CGetSlowestAxis,
	    CSetTimeBase,
	    CGetMoveFinished,
	    CGetBufferData,
	    CReadPosOffset,
	    CSetPosOffset,
	    CCalcResidualTime,
	    CCoupleGearAbsolute,
	    CCoupleGearRelative,
	    CCoupleGearVelocity,
	    CCoupleCurveTab,
	    CCoupleUserPos,
	    CCoupleProfilePos,
	    CCoupleGearPolynom,
	    CReadAxisState,
	    CReadCmdIndex,
	    CSetDynSWEndPos,
	    CReadProfileActValues,
	    CGetBrakePositions,
	    CChangeCoupleSettings,
	    CCoupleAdditivePosDiff,
	    CGetRemotePoint,
	    CLockProfileRestart,
	    CLockProfileStartLineNo,
	    CSetRestartPoint,
	    CReadRestartPos,
	    CContinueNCProg,
	    CReadRestartInfo,
	    CGetStartPositionsRestart,
	    CReadCommonCalcParas,
	    CSetProfilePositions,
	    CRobotOn,
	    CRobotOff,
	    CRobotIsOn,
	    CMoveLinearBelt,
	    CMoveRelativeTCP,
	    CGetRobotPosition,
	    CReadRobotParameter,
	    CSetRobotParameter,
	    CAxMoveHand,
	    CAxMoveEndless,
	    CAxMoveAbsolute,
	    CAxMoveShortestWay,
	    CAxMoveReference,
	    CAxMoveRelative,
	    CAxStopMove,
	    CAxTuneAxis,
	    CAxSetPosition,
	    CAxQuitError,
	    CAxReadAxisError,
	    CAxReadParameter,
	    CAxReadSWEndPos,
	    CAxInPosition,
	    CAxSetParameter,
	    CGetAxInformation,
	    CLockProfileStartFileOffset,
	    CLockProfileRestartFileOffset,
	    CSetRestartPointFileOffset,
	    CAxReadPosition,
	    CAxSetFollowMode,
	    CMoveCurve,
	    CMoveCurveBelt,
	    CAxSetAdjustment,
	    CMoveEndless,
	    CStretchLastMove
	  )$UDINT;
#pragma pack(push, 1)
	  _LogStruct : STRUCT
	    CmdCode : _LMCLogCmdList;
	    RetCode : _LMCPROFERRORTYPES;
	    TimeStamp : UDINT;
	    CmdParameter : ARRAY [0..140] OF SINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogFile : STRUCT
	    LogData : ARRAY [0..MAX_LOG_BUFFER_INDEX+1] OF _LogStruct;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParCalcResidualTime : STRUCT
	    Mode : _LMCPROF_RESTIME_CALCMODE;
	    ResidualTime : UDINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParChangeCoupleSettings : STRUCT
	    AxisNo : DINT;
	    CoupleMode : _LMCPROF_EXECUTE;
	    MaxVel : DINT;
	    MaxAcc : DINT;
	    DeltaPos : DINT;
	    GearMul : DINT;
	    GearDiv : DINT;
	    MaxJerk : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParCircleDefinition : STRUCT
	    CircleDef : _LMCPROFCIRCLEDEF;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParContinueNCProg : STRUCT
	    PosWindow : DINT;
	    DelayTime : UDINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParCoupleAdditivePosDiff : STRUCT
	    AxisNo : DINT;
	    pPosdiff : ^DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParCoupleCurveTab : STRUCT
	    AxisNo : DINT;
	    CoupleMode : _LMCPROF_EXECUTE;
	    MaxVel : DINT;
	    MaxAcc : DINT;
	    DeltaPos : DINT;
	    pMaster : ^MasterStruct;
	    GearMul : DINT;
	    GearDiv : DINT;
	    Mode : _LMCAXIS_CURVETABMODE;
	    pCurveData : ^_LMCAXIS_CURVE;
	    MaxJerk : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParCoupleGearAbsolute : STRUCT
	    AxisNo : DINT;
	    CoupleMode : _LMCPROF_EXECUTE;
	    MaxVel : DINT;
	    MaxAcc : DINT;
	    DeltaPos : DINT;
	    pMaster : ^MasterStruct;
	    GearMul : DINT;
	    GearDiv : DINT;
	    MaxJerk : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParCoupleGearPolynom : STRUCT
	    AxisNo : DINT;
	    CoupleMode : _LMCPROF_EXECUTE;
	    MaxVel : DINT;
	    MaxAcc : DINT;
	    pMaster : ^MasterStruct;
	    GearMul : DINT;
	    GearDiv : DINT;
	    sMaster : DINT;
	    sSlave : DINT;
	    MaxJerk : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParCoupleGearRelative : STRUCT
	    AxisNo : DINT;
	    CoupleMode : _LMCPROF_EXECUTE;
	    MaxVel : DINT;
	    MaxAcc : DINT;
	    pMaster : ^MasterStruct;
	    GearMul : DINT;
	    GearDiv : DINT;
	    MaxJerk : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParCoupleGearVelocity : STRUCT
	    AxisNo : DINT;
	    CoupleMode : _LMCPROF_EXECUTE;
	    MaxVel : DINT;
	    MaxAcc : DINT;
	    pMaster : ^MasterStruct;
	    GearMul : DINT;
	    GearDiv : DINT;
	    MaxJerk : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParCoupleProfilePos : STRUCT
	    AxisNo : DINT;
	    CoupleMode : _LMCPROF_EXECUTE;
	    MaxVel : DINT;
	    MaxAcc : DINT;
	    Mode : _LMCPROF_RECOUPLEMODE;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParCoupleUserPos : STRUCT
	    AxisNo : DINT;
	    CoupleMode : _LMCPROF_EXECUTE;
	    MaxVel : DINT;
	    MaxAcc : DINT;
	    pMasterPos : ^DINT;
	    DeltaPos : DINT;
	    GearMul : DINT;
	    GearDiv : DINT;
	    Mode : _LMCAXIS_COUPLE_GEAR_MODE;
	    MaxJerk : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParGetBrakePositions : STRUCT
	    Pos : _LMCPROF_POS;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParGetBufferData : STRUCT
	    index : UDINT;
	    MoveData : _LMCPROF_MoveData;
	    RetCode : iprStates;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParGetMoveFinished : STRUCT
	    index : UDINT;
	    RetCode : iprStates;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParGetRemotePoint : STRUCT
	    RemoteDist : DINT;
	    RemoteTime : DINT;
	    ActualVel : DINT;
	    RemoteVel : DINT;
	    ActualAccel : DINT;
	    ProfileAccel : DINT;
	    Tjerk : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParGetSlowestAxis : STRUCT
	    Dest : _LMCPROF_POS;
	    usAxis : USINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParGetStartPositions : STRUCT
	    StartPos : _LMCPROF_POS;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParGetStartPositionsRestart : STRUCT
	    StartPos : _LMCPROF_POS;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParLockProfile : STRUCT
	    Axis1 : DINT;
	    Axis2 : DINT;
	    Axis3 : DINT;
	    Axis4 : DINT;
	    Axis5 : DINT;
	    Axis6 : DINT;
	    Axis7 : DINT;
	    Axis8 : DINT;
	    Axis9 : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParLockProfileRestart : STRUCT
	    Axis1 : DINT;
	    Axis2 : DINT;
	    Axis3 : DINT;
	    Axis4 : DINT;
	    Axis5 : DINT;
	    Axis6 : DINT;
	    Axis7 : DINT;
	    Axis8 : DINT;
	    Axis9 : DINT;
	    PathOffset : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParLockProfileStartLineNo : STRUCT
	    Axis1 : DINT;
	    Axis2 : DINT;
	    Axis3 : DINT;
	    Axis4 : DINT;
	    Axis5 : DINT;
	    Axis6 : DINT;
	    Axis7 : DINT;
	    Axis8 : DINT;
	    Axis9 : DINT;
	    PathOffset : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParMoveCircle : STRUCT
	    Positions : _LMCPROF_POS;
	    MiddlePoint : _LMCPROF_CIRCLEPOINT;
	    InterPoint : _LMCPROF_CIRCLEPOINT;
	    CircleDef : _LMCPROFCIRCLEDEF;
	    CmdConfig : _LMCPROFCMDCONFIG;
	    Velocity : DINT;
	    Accel : DINT;
	    Decel : DINT;
	    TransMode : _LMCPROFTRANSMODES;
	    TransRadius : DINT;
	    Jerk : DINT;
	    SetCoordSystem : DINT;
	    ActiveTool : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParMoveCurve : STRUCT
	    Positions : _LMCPROF_POS;
	    CmdConfig : _LMCPROFCMDCONFIG;
	    Velocity : DINT;
	    Accel : DINT;
	    Decel : DINT;
	    TransMode : _LMCPROFTRANSMODES;
	    TransRadius : DINT;
	    Obstacle : _LMCPROF_OBSTACLE;
	    Jerk : DINT;
	    SetCoordSystem : DINT;
	    ActiveTool : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParMoveLinear : STRUCT
	    Positions : _LMCPROF_POS;
	    CmdConfig : _LMCPROFCMDCONFIG;
	    Velocity : DINT;
	    Accel : DINT;
	    Decel : DINT;
	    TransMode : _LMCPROFTRANSMODES;
	    TransRadius : DINT;
	    Jerk : DINT;
	    SetCoordSystem : DINT;
	    ActiveTool : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParMoveRelative : STRUCT
	    Distances : _LMCPROF_POS;
	    CmdConfig : _LMCPROFCMDCONFIG;
	    Velocity : DINT;
	    Accel : DINT;
	    Decel : DINT;
	    TransMode : _LMCPROFTRANSMODES;
	    TransRadius : DINT;
	    Jerk : DINT;
	    SetCoordSystem : DINT;
	    ActiveTool : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParProfileInPosition : STRUCT
	    Mode : _LMCPROFINPOSTYPES;
	    RetCode : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParReadAxisParameter : STRUCT
	    AxisNo : DINT;
	    ParNo : _LMCPROFPARAMETERAXIS;
	    RetValue : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParReadAxisState : STRUCT
	    AxisNo : DINT;
	    AxisState : _LMCAXIS_STATUS;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParReadCmdIndex : STRUCT
	    Mode : _LMCPROF_CMDINDEX;
	    Index : UDINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParReadCommonCalcParas : STRUCT
	    CalcParas : _LMCCommonCalcParas;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _logParReadGroupParameter : STRUCT
	    GrpNo : DINT;
	    ParNo : _LMCPROFPARAMETERGROUPS;
	    RetValue : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParReadPosition : STRUCT
	    AxisNo : DINT;
	    Mode : DINT;
	    Position : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParReadPosOffset : STRUCT
	    PosOffset : _LMCPROF_POS;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParReadProfileActValues : STRUCT
	    Mode : _LMCPROF_ACTUALVALUES;
	    ActualValue : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParReadProfileError : STRUCT
	    ErrorInfo : _LMCPROFERRORDEF;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParReadProfileParameter : STRUCT
	    ParNo : _LMCPROFPARAMETER;
	    RetValue : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParReadRestartInfo : STRUCT
	    sRestart : LREAL;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _logParReadRestartPos : STRUCT
	    Positions : _LMCPROF_POS;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParSetAxisParameter : STRUCT
	    AxisNo : DINT;
	    ParNo : _LMCPROFPARAMETERAXIS;
	    Value : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParSetBasicParameter : STRUCT
	    VMax : DINT;
	    AMax : DINT;
	    Tjerk : DINT;
	    TangError : DINT;
	    PosOffset : _LMCPROF_POS;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParSetDynSWEndPos : STRUCT
	    AxNo : DINT;
	    pSWEndPos : ^DINT;
	    Mode : _LMC_DYN_SWLIMITS;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParSetGroupParameter : STRUCT
	    GrpNo : DINT;
	    ParNo : _LMCPROFPARAMETERGROUPS;
	    Value : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParSetPosOffset : STRUCT
	    PosOffset : _LMCPROF_POS;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParSetProfileParameter : STRUCT
	    ParNo : _LMCPROFPARAMETER;
	    Value : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParSetProfilePositions : STRUCT
	    Mode : _LMCPROF_SETPOS_MODE;
	    pApproxPos : ^_LMCPROF_POS;
	    pCallbackData : pVoid;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParSetRestartPointFileOffset : STRUCT
	    PathOffset : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParSetTimeBase : STRUCT
	    udTimeBase : UDINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParStopMove : STRUCT
	    Mode : DINT;
	    Decel : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 4)
	  _LogParStretchLastMove : STRUCT
	    FactorMul : UDINT;
	    FactorDiv : UDINT;
	  END_STRUCT;
#pragma pack(pop)
	END_TYPE
END_CLASS;
#pragma define (restore)
_LMCPublisher : CLASS_PUBLIC
	TYPE
	  _Config_ : BDINT
	  [
	    1 VirtualAxis,
	    2 RealAxis,
	  ];
	  _LMCPublisher_Cmd :
	  (
	    _LOGINCMD:=123
	  )$UDINT;
	END_TYPE
END_CLASS;
#pragma define (restore)
_SerLib : CLASS_PUBLIC
	TYPE
	  CmdCommand :
	  (
	    StartUserIPR,
	    StopUserIPR,
	    SerCloseIPR,
	    SerSendIPR,
	    RecvCharIPR,
	    SetOnlineIPR,
	    GetRecvStateIPR,
	    GetSendStateIPR,
	    GetErrorIPR,
	    IsInitializedIPR,
	    ClearRecBufferIPR,
	    RtsOnOffIPR,
	    rdRtsIPR,
	    rdCtsIPR,
	    DtrOnOffIPR,
	    rdDtrIPR,
	    rdDcdIPR,
	    rdDsrIPR,
	    rdRiIPR,
	    SetRSModeIPR,
	    GetRSModeIPR,
	    GetInterfaceTypeIPR
	  )$UINT;
	END_TYPE
END_CLASS;
#pragma define (restore)
#pragma InclDefBlk _VaranDriveBase
_VaranDriveBase : CLASS_PUBLIC
	TYPE
#pragma pack(push, 1)
	  t_ReadValuePtr : STRUCT
	    a_SyncValues : ARRAY [0..4] OF DINT;
	    bs_InputStates : BSINT
	    [
	      1 OptionBoardInputState,
	    ];
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  t_WriteValuePtr : STRUCT
	    a_SyncValues : ARRAY [0..4] OF DINT;
	  END_STRUCT;
#pragma pack(pop)
	END_TYPE
END_CLASS;
#pragma define (restore)
AM221 : CLASS_PUBLIC
: SdiasBase
	TYPE
	  t_AM_Errors : BINT
	  [
	    1 CableBreakAI1,
	    2 CableBreakAI2,
	    5 LowReference,
	    6 AiOvercurrent,
	    7 DC_NotOK,
	    10 UnderRangeAI1,
	    11 UnderRangeAI2,
	  ];
	  t_AM_ErrorsAll : BINT
	  [
	    1 CableBreakAI1,
	    2 CableBreakAI2,
	    5 LowReference,
	    6 AiOvercurrent,
	    7 DC_NotOK,
	    8 TimeOffsetsCorrectedByFW,
	    9 TimeOffsetsCouldNotBeCorrected,
	    10 UnderRangeAI1,
	    11 UnderRangeAI2,
	  ];
#pragma pack(push, 1)
	  t_SDIAS_ErrorBits_AM221 : STRUCT
	    StandardErrors : SdiasBase::t_b_SdiasFWState;
	    AM_Errors : t_AM_Errors;
	  END_STRUCT;
#pragma pack(pop)
	END_TYPE
END_CLASS;
#pragma define (restore)
AM441 : CLASS_PUBLIC
: SdiasBase
	TYPE
	  t_AM_ErrorsAll : BINT
	  [
	    1 CableBreakAI1,
	    2 CableBreakAI2,
	    3 CableBreakAI3,
	    4 CableBreakAI4,
	    5 LowReference,
	    6 AiOvercurrent,
	    7 DC_NotOK,
	    8 TimeOffsetsCorrectedByFW,
	    9 TimeOffsetsCouldNotBeCorrected,
	    10 UnderRangeAI1,
	    11 UnderRangeAI2,
	    12 UnderRangeAI3,
	    13 UnderRangeAI4,
	  ];
	  t_AM_Errors : BINT
	  [
	    1 CableBreakAI1,
	    2 CableBreakAI2,
	    3 CableBreakAI3,
	    4 CableBreakAI4,
	    5 LowReference,
	    6 AiOvercurrent,
	    7 DC_NotOK,
	    10 UnderRangeAI1,
	    11 UnderRangeAI2,
	    12 UnderRangeAI3,
	    13 UnderRangeAI4,
	  ];
#pragma pack(push, 1)
	  t_SDIAS_ErrorBits_AM441 : STRUCT
	    StandardErrors : SdiasBase::t_b_SdiasFWState;
	    AM_Errors : t_AM_Errors;
	  END_STRUCT;
#pragma pack(pop)
	END_TYPE
END_CLASS;
#pragma define (restore)
#pragma InclDefBlk gbl_datatypes
gbl_datatypes : CLASS_PUBLIC
	TYPE
	  tStr13 : ARRAY [0..12] OF CHAR;
	  tStr20 : ARRAY [0..19] OF CHAR;
	  tStr25 : ARRAY [0..24] OF CHAR;
	END_TYPE
END_CLASS;
#pragma define (restore)
#pragma InclDefBlk AssemblyDbV2
AssemblyDbV2 : CLASS_PUBLIC
	TYPE
#pragma pack(push, 1)
	  tBewerkingsRegel : STRUCT
	    Bewerking : Units;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  tRecipeLine : STRUCT
	    productId : DINT;
	    amount : DINT;
	  END_STRUCT;
#pragma pack(pop)
	  tRecipeLineList : ARRAY [0..cAssemDbMaxProdLines] OF tRecipeLine;
#pragma pack(push, 1)
	  tRecipeData : STRUCT
	    id : DINT;
	    description : gbl_datatypes::tStr20;
	    productCode : gbl_datatypes::tStr20;
	    reserveText : gbl_datatypes::tStr20;
	    inputLength : DINT;
	    MeasureInputProfiles : DINT;
	    profileId : DINT;
	    inputPackId : DINT;
	    amountToDo : DINT;
	    amountDone : DINT;
	    reserve2 : DINT;
	    recipeList : tRecipeLineList;
	  END_STRUCT;
#pragma pack(pop)
	END_TYPE
END_CLASS;
#pragma define (restore)
#pragma InclDefBlk calcOperationListV2
calcOperationListV2 : CLASS_PUBLIC
	TYPE
	  calcOperations : BDINT
	  [
	    1 Bu1_saw,
	    2 Bu2_mill1,
	    3 Bu3_mill2,
	    4 Bu4,
	    5 Bu5,
	    6 Bu6,
	    7 Bu7,
	    8 Bu8,
	    9 Bu9,
	    10 Bu10,
	    11 FrontSaw,
	    12 EndSaw,
	    13 FirstInAssemb,
	    14 LastInAssemb,
	    15 CL1,
	    16 CL2,
	    17 CL3,
	    18 CL4,
	    19 CL5,
	    20 WasteStop,
	    21 WastePiece,
	    22 TakeOver,
	    23 loadingMaterial,
	    24 removeProduct,
	    25 tmpRemoveProduct,
	    26 x1GoAway,
	    27 wasteStopEndWaste,
	    28 removeWithOutput,
	    29 Bit29,
	    30 Bit30,
	    31 millAtOtherEnd,
	    32 optimDone,
	  ];
#pragma pack(push, 1)
	  xyPosMill : STRUCT
	    xPos : DINT;
	    yPos : DINT;
	    id : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  calcLine : STRUCT
	    xPos : DINT;
	    yPos : DINT;
	    zPos : DINT;
	    operationId : DINT;
	    outputId : DINT;
	    ToolId : DINT;
	    sawAngle : DINT;
	    operations : calcOperations;
	    productLength : DINT;
	    MillPosses : ARRAY [1..2] OF xyPosMill;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  options : STRUCT
	    doFrontWaste : DINT;
	    doEndWaste : DINT;
	    wasteAtFront : DINT;
	    destroyBigWaste : DINT;
	    takeOverActive : DINT;
	    sortOperations : DINT;
	    combineOperations : DINT;
	    miterSaw : DINT;
	    wasteStopActive : DINT;
	    wasteStopForEndWasteActive : DINT;
	    MaxlengthForBin : DINT;
	    MaxLengthForTable : DINT;
	  END_STRUCT;
#pragma pack(pop)
	END_TYPE
END_CLASS;
#pragma define (restore)
CanDriverBase : CLASS_PUBLIC
	TYPE
	  CanHwSwitchTxt :
	  (
	    CAN_conv,
	    CCAxxx
	  )$UDINT;
	END_TYPE
END_CLASS;
#pragma define (restore)
#pragma InclDefBlk CSI022_Base
CSI022_Base : CLASS_PUBLIC
	TYPE
#pragma pack(push, 1)
	  t_fifo : STRUCT
	    Index : UDINT;
	    StartPtr : ^USINT;
	    ActPtr : ^USINT;
	    PtrNextFree : ^USINT;
	    EndOfBuffer : ^USINT;
	    Buffer : ARRAY [0..511] OF USINT;
	  END_STRUCT;
#pragma pack(pop)
	END_TYPE
END_CLASS;
#pragma define (restore)
MerkerEx : CLASS_PUBLIC
#include <.\lsl_st_mt.h>
	TYPE
	  Cmdm_udLength :
	  (
	    GET_DATA_PTR,
	    EXCHANGE_DATA_PTR,
	    SAVE_DATA_TO_RAMEXFILE
	  )$UINT;
	END_TYPE
END_CLASS;
#pragma define (restore)
MillingProgsDbV2 : CLASS_PUBLIC
	TYPE
#pragma pack(push, 1)
	  tBewerkingsRegel : STRUCT
	    Bewerking : Units;
	  END_STRUCT;
#pragma pack(pop)
	  tRecipeData : strMillRecipe;
	END_TYPE
END_CLASS;
#pragma define (restore)
#pragma InclDefBlk ProductsDbV2
ProductsDbV2 : CLASS_PUBLIC
	TYPE
#pragma pack(push, 1)
	  tBewerkingsRegel : STRUCT
	    Bewerking : Units;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  tRecipeLine : STRUCT
	    rnr : DINT;
	    xpos : DINT;
	    ypos : DINT;
	    zpos : DINT;
	    amount : DINT;
	    pitch : DINT;
	    operationId : DINT;
	    operations : Units;
	  END_STRUCT;
#pragma pack(pop)
	  tRecipeLineList : ARRAY [0..cProdDbMaxOperationLines] OF tRecipeLine;
#pragma pack(push, 1)
	  tRecipeData : STRUCT
	    id : DINT;
	    description : gbl_datatypes::tStr20;
	    productCode : gbl_datatypes::tStr20;
	    length : DINT;
	    operationId1 : DINT;
	    operationId2 : DINT;
	    operationId3 : DINT;
	    noEndSaw : DINT;
	    upDownFlipAllowed : DINT;
	    frontEndFilpAllowed : DINT;
	    startAngle : DINT;
	    endAngle : DINT;
	    operations : tRecipeLineList;
	    productWidth : DINT;
	    productHeight : DINT;
	  END_STRUCT;
#pragma pack(pop)
	END_TYPE
END_CLASS;
#pragma define (restore)
SafetyBase : CLASS_PUBLIC
#include "..\Source\interfaces\lsl_st_safety.h"
#include "..\Class\SafetyManager\SafetyManager.h"
#include "..\Source\BusInterface.h"
#include "..\Class\SafetyBase\SafetyBase.h"
#include "..\Source\interfaces\lsl_st_hardwaretree.h"
	TYPE
#pragma pack(push, 1)
	  SDOHeader : STRUCT
	    StdHeader : t_SDOStdHeader;
	    SrcAdr : HDINT;
	    DstAdr : HDINT;
	    SessId : UDINT;
	  END_STRUCT;
#pragma pack(pop)
	END_TYPE
END_CLASS;
#pragma define (restore)
SafetyBaseFSoE : CLASS_PUBLIC
#include "..\Source\interfaces\lsl_st_safety.h"
#include "..\Class\SafetyManager\SafetyManager.h"
#include "..\Source\BusInterface.h"
#include "..\Class\SafetyBaseFSoE\SafetyBaseFSoE.h"
#include "..\Source\interfaces\lsl_st_hardwaretree.h"
	TYPE
#pragma pack(push, 1)
	  SDOHeader : STRUCT
	    StdHeader : t_SDOStdHeader;
	    SrcAdr : HDINT;
	    DstAdr : HDINT;
	    SessId : UDINT;
	  END_STRUCT;
#pragma pack(pop)
	END_TYPE
END_CLASS;
#pragma define (restore)
SafetyCDIAS_Base : CLASS_PUBLIC
#include "..\Class\SafetyCDIAS_Base\SafetyCDIAS_Base.h"
#include "..\Source\interfaces\lsl_st_safety.h"
#include "..\Class\SafetyManager\SafetyManager.h"
	TYPE
	  FrameTypeType : BSINT
	  [
	    1 Cfg,
	    2 ToP,
	    3 Standard,
	    4 PDO,
	    5 TDO,
	    6 Reserved1,
	    7 Reserved2,
	    8 Response,
	  ];
#pragma pack(push, 1)
	  SDOStdHeader : STRUCT
	    CRC : UDINT;
	    Cmd : USINT;
	    Typ : FrameTypeType;
	    SeqNr : USINT;
	    Len : USINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  SDOHeader : STRUCT
	    StdHeader : SDOStdHeader;
	    SrcAdr : HDINT;
	    DstAdr : HDINT;
	    SessId : UDINT;
	  END_STRUCT;
#pragma pack(pop)
	END_TYPE
END_CLASS;
#pragma define (restore)
SafetyUDP : CLASS_PUBLIC
	TYPE
	  _FSM_UDP_ERROR :
	  (
	    _NO_ERROR_UDP_ERROR:=0,
	    _INIT_TCP_USER_UDP_ERROR:=4294967295,
	    _NO_IP_ADDRESS_UDP_ERROR:=4294967294,
	    _NO_MEMORY_SOCKET_UDP_ERROR:=4294967293,
	    _NO_MEMORY_SENDBUFFER_UDP_ERROR:=4294967292,
	    _INVALID_HANDLE_UDP_ERROR:=4294967291,
	    _SHUTDOWN_UDP_ERROR:=4294967290,
	    _CLOSESOCKET_UDP_ERROR:=4294967289,
	    _ALLOCATE_SOCKET_UDP_ERROR:=4294967288,
	    _SET_BIND_UDP_ERROR:=4294967287,
	    _RECV_UDP_ERROR:=4294967286,
	    _SEND_UDP_ERROR:=4294967285,
	    _NO_LOCAL_IP_UDP_ERROR:=4294967284,
	    _NO_DESTINATION_IP_UDP_ERROR:=4294967283,
	    _INVALID_UDP_PORT_UDP_ERROR,
	    _INVALID_INTERFACE_NUMBER_UDP_ERROR,
	    _NO_MEMORY_RECEIVE_BUFFER_UDP_ERROR,
	    _NO_MEMORY_CONNECTION_BUFFER_UDP_ERROR
	  )$DINT;
	  _FSM_UDP_USER :
	  (
	    _STATE_INIT_UDP,
	    _STATE_IDLE_UDP,
	    _STATE_SOCK_UDP,
	    _STATE_CONNECT_UDP,
	    _STATE_ONLY_SEND_UDP,
	    _STATE_RECV_UDP,
	    _STATE_SEND_UDP,
	    _STATE_SHUTDOWN_UDP,
	    _STATE_CLOSE_SOCK_UDP,
	    _STATE_ERROR_UDP
	  )$UDINT;
	  _INITSTEPS :
	  (
	    _NO_OPERATION,
	    _ADD_SOCKET,
	    _CHECK_IF_SOCKET_OPEN,
	    _BIND_SOCKET,
	    _CLOSE_CON
	  )$UDINT;
	END_TYPE
END_CLASS;
#pragma define (restore)
SCBase : CLASS_PUBLIC
	TYPE
	  EventTypeTxt :
	  (
	    Event10Log,
	    Event11Log,
	    Event12Log,
	    Event13Log,
	    Event14Log,
	    Event15Log,
	    Event16Log,
	    Event17Log,
	    Event18Log,
	    NoEventLog,
	    ErrorEventLog
	  )$DINT;
	END_TYPE
END_CLASS;
#pragma define (restore)
SDCIDevice : CLASS_PUBLIC
#include "..\Class\SdiasBase\SdiasBase.h"
#include "..\Class\SdiasSDCIMaster\SdiasSDCIMaster.h"
	TYPE
#pragma pack(push, 1)
	  t_AdditionalInfo : STRUCT
	    PortNo : USINT;
	    TotalReadSize : USINT;
	    TotalWriteSize : USINT;
	  END_STRUCT;
#pragma pack(pop)
	  t_FaultFlagSvr :
	  (
	    _NoFault,
	    _ComLost,
	    _RevisionFault,
	    _CompatibilityFault,
	    _SerialNumFault,
	    _DataStorageFault
	  )$UDINT;
	END_TYPE
END_CLASS;
#pragma define (restore)
#pragma InclDefBlk SdiasSDCIMaster
SdiasSDCIMaster : CLASS_PUBLIC
: SdiasBase
#include "..\Source\BusInterface.h"
#include "..\Class\SdiasSDCIMaster\SdiasSDCIMaster.h"
	TYPE
	  t_EventInfo : BINT
	  [
	    1 InstanceBit0,
	    2 InstanceBit1,
	    3 InstanceBit2,
	    4 InstanceBit3,
	    5 ModeBit0,
	    6 ModeBit1,
	    7 ModeBit2,
	    8 ModeBit3,
	    9 TypeBit0,
	    10 TypeBit1,
	    11 TypeBit2,
	    12 TypeBit3,
	    13 OriginBit0,
	    14 OriginBit1,
	    15 OriginBit2,
	    16 OriginBit3,
	  ];
	  t_EventCodes :
	  (
	    E_EVENT_NO_MALFUNCTION:=0,
	    E_EVENT_GENERAL_MALFUNCTION:=4096,
	    E_EVENT_EXCESS_AMBIENT_TEMPERATURE:=16656,
	    E_EVENT_TOO_LOW_AMBIENT_TEMPERATURE:=16672,
	    E_EVENT_EXCESS_DEVICE_TEMPERATURE:=16912,
	    E_EVENT_TOO_LOW_DEVICE_TEMPERATURE:=16928,
	    E_EVENT_EXCESS_PERIPHERY_TEMPERATURE:=17168,
	    E_EVENT_TOO_LOW_PERIPHERY_TEMPERATURE:=17184,
	    E_EVENT_HW_COMPONENT_MALFUNCTION:=20496,
	    E_EVENT_LOW_SUPPLY_VOLTAGE_15V:=20753,
	    E_EVENT_LOW_SUPPLY_VOLTAGE_24V:=20754,
	    E_EVENT_LOW_SUPPLY_VOLTAGE_5V:=20755,
	    E_EVENT_SHORT_CIRCUIT:=20817,
	    E_EVENT_OUTPUT_STAGE:=21520,
	    E_EVENT_FUSE_S1:=21585,
	    E_EVENT_FUSE_S2:=21586,
	    E_EVENT_FUSE_S3:=21587,
	    E_EVENT_SW_RESET_WATCHDOG:=24592,
	    E_EVENT_LOSS_OF_PARAMETER:=25360,
	    E_EVENT_PARAMETER_ERROR:=25376,
	    E_EVENT_PARAMETER_NOT_INITIALIZED:=25392,
	    E_EVENT_PARAMETER_NON_SPECIFIC:=25408,
	    E_EVENT_PARAMETER_CHANGED:=25424,
	    E_EVENT_PROCESS_DATA_MONITORING:=33040,
	    E_EVENT_EXCESS_PROCESS_VARIABLE_RANGE:=35856,
	    E_EVENT_EXCESS_MEASUREMENT_RANGE:=35872,
	    E_EVENT_TOO_LOW_PROCESS_VARIABLE_RANGE:=35888,
	    E_EVENT_ADVANCE_WARNING:=35904,
	    E_EVENT_EXTERNAL_MALFUNCTION:=36864,
	    E_EVENT_UV33UNDERVOLTAGE:=49409,
	    E_EVENT_OVERTEMPERATURE:=49410,
	    E_EVENT_UV24UNDERVOLTAGE:=49411,
	    E_EVENT_CQSHORTCUT:=49412,
	    E_EVENT_DSACCESSERROR:=49665,
	    E_EVENT_NEW_SLAVE:=65313,
	    E_EVENT_DEV_COM_LOST:=65314,
	    E_EVENT_DS_IDENT_MISMATCH:=65315,
	    E_EVENT_DS_BUFFER_OVERFLOW:=65316,
	    E_EVENT_DS_ACCESS_DENIED:=65317,
	    E_EVENT_DS_INCORRECT_EVENT:=65329,
	    E_EVENT_DS_UPLOAD_REQ:=65425
	  )$UINT;
#pragma pack(push, 1)
	  t_SDCIEventDetails : STRUCT
	    EventInfo : SdiasSDCIMaster::t_EventInfo;
	    EventCode : SdiasSDCIMaster::t_EventCodes;
	  END_STRUCT;
#pragma pack(pop)
	  t_SDCIPortMode :
	  (
	    _Inactive,
	    _DigitalInput,
	    _DigitalOutput,
	    _SDCI
	  )$UDINT;
	  t_SDCIPortStateBits : BDINT
	  [
	    1 Operating,
	    2 ReadyToOperate,
	    3 InputProcessDataValid,
	    4 EventAvailable,
	    5 OdeState,
	    6 PdeState,
	    7 DuState,
	    8 DsUploaded,
	  ];
#pragma pack(push, 1)
	  t_SDCIEventBuffer : STRUCT
	    EventWrIndex : USINT;
	    EventRdIndex : USINT;
	    aEvents : ARRAY [0..SIOL_EVENT_BUFFER_SIZE-1] OF SdiasSDCIMaster::t_SDCIEventDetails;
	  END_STRUCT;
#pragma pack(pop)
	  t_SDCIRetCode :
	  (
	    SDCI_Busy:=1,
	    SDCI_Ready_Ok:=0,
	    SDCI_InvalidPointer:=4294967295,
	    SDCI_InvalidLength:=4294967294,
	    SDCI_InvalidLengthOffsetCombination:=4294967293,
	    SDCI_NoReadDataAtModule:=4294967292,
	    SDCI_NoWriteDataAtModule:=4294967291,
	    SDCI_NotAvailableAtThisPort:=4294967290,
	    SDCI_ModuleNotAvailable:=4294967289,
	    SDCI_ReadDataCurrentlyNotValid:=4294967288,
	    SDCI_PortNbrNotSupported:=4294967287,
	    SDCI_UnspecifiedError:=4294967286,
	    SDCI_TimeoutInComToMicroCtrl:=4294967285,
	    SDCI_InvalidChecksumFromMicroCtrl:=4294967284,
	    SDCI_MicroCtrl_ApplicationError:=4294967283,
	    SDCI_MicroCtrl_InvalidChkSum:=4294967282,
	    SDCI_MicroCtrl_FunctionIdNotSupported:=4294967281,
	    SDCI_MicroCtrl_InvalidParamUsage:=4294967280,
	    SDCI_MicroCtrl_ServiceNotAvailable:=4294967279,
	    SDCI_MicroCtrl_RspLengthTooBig:=4294967278,
	    SDCI_MicroCtrl_UnexpectedRspLength:=4294967277,
	    SDCI_MicroCtrl_UnexpectedRspData:=4294967276
	  )$DINT;
	END_TYPE
END_CLASS;
#pragma define (restore)
SdiasUartHandler : CLASS_PUBLIC
: _SerLib
#include "..\Class\SdiasManager\SdiasManager.h"
#include "..\Source\interfaces\lsl_st_mt.h"
	TYPE
	  t_bdOptionBits : BDINT
	  [
	    1 _9BitMode,
	    2 FlexibleBaudrate,
	    3 ExtendedTxRxBuffer,
	    4 SecondUARTAvailable,
	    5 Bit5,
	    6 Bit6,
	    7 Bit7,
	    8 Bit8,
	    9 Bit9,
	    10 Bit10,
	    11 Bit11,
	    12 Bit12,
	    13 Bit13,
	    14 Bit14,
	    15 Bit15,
	    16 Bit16,
	    17 Bit17,
	    18 Bit18,
	    19 Bit19,
	    20 Bit20,
	    21 Bit21,
	    22 Bit22,
	    23 Bit23,
	    24 Bit24,
	    25 Bit25,
	    26 Bit26,
	    27 Bit27,
	    28 Bit28,
	    29 Bit29,
	    30 Bit30,
	    31 Bit31,
	    32 OptionBitsValid,
	  ];
	END_TYPE
END_CLASS;
#pragma define (restore)
ToolsDb : CLASS_PUBLIC
	TYPE
#pragma pack(push, 1)
	  tBewerkingsRegel : STRUCT
	    Bewerking : Units;
	  END_STRUCT;
#pragma pack(pop)
	  tRecipeData : strToolRecipe;
	END_TYPE
END_CLASS;
#pragma define (restore)
VirtualBaseInit : CLASS_PUBLIC
	TYPE
	  CmdData :
	  (
	    GET_ADD_INFO,
	    READ_DATA,
	    WRITE_DATA,
	    READ_DATA_OFF,
	    WRITE_DATA_OFF
	  )$UINT;
	END_TYPE
END_CLASS;
#pragma define (restore)
#pragma InclDefBlk VSV046
VSV046 : CLASS_PUBLIC
#include "..\Source\interfaces\lsl_st_pci.h"
	TYPE
	  t_MACAddr : ARRAY [0..5] OF HSINT;
#pragma pack(push, 1)
	  t_ETHFrameHeader : STRUCT
	    DestAddr : t_MACAddr;
	    SrcAddr : t_MACAddr;
	    ProtocolType : HINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  t_ETHFrame : STRUCT
	    Header : t_ETHFrameHeader;
	    Data : ARRAY [0..VSV_TX_MAX_DATA_LENGTH-14-1] OF USINT;
	  END_STRUCT;
#pragma pack(pop)
	END_TYPE
END_CLASS;
#pragma define (restore)

#RE_IN_DE
