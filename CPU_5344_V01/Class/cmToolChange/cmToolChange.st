//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "cmToolChange"
	Revision           = "0.0"
	GUID               = "{7BD78A76-8A3F-4822-80C6-C30B308DADF5}"
	RealtimeTask       = "false"
	CyclicTask         = "true"
	DefCyclictime      = "10 ms"
	BackgroundTask     = "true"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(450,720)">
	<Channels>
		<Server Name="iSimuChange" GUID="{B866BF99-EF17-46A5-B314-5788D339A5B5}" Visualized="false" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="oToolOk" GUID="{2CCA0888-1EBB-4D6D-A308-44C2D8757E24}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="parWaitTimeForBlowCoin" GUID="{1A83680E-BD4F-4E72-B4FD-D55CEACB8210}" Visualized="true" Initialize="true" DefValue="1000" WriteProtected="false" Retentive="File"/>
		<Server Name="stprChange" GUID="{50BE9C7E-855B-4D9B-B755-E4D3C17926F3}" Visualized="false" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Client Name="iCmdToolChange" Required="true" Internal="false"/>
		<Client Name="iMotorStandStill" Required="true" Internal="false"/>
		<Client Name="iNoTool" Required="true" Internal="false"/>
		<Client Name="iToolLocked" Required="true" Internal="false"/>
		<Client Name="oBlowCone" Required="true" Internal="false"/>
		<Client Name="oChangeTool" Required="true" Internal="false"/>
	</Channels>
	<Network Name="cmToolChange">
		<!-- List of Components in this network -->
		<Components>
			<Object
				Name       = "_base"
				GUID       = "{320E967E-F6BD-4E9B-A72B-E6D4BBDAE266}"
				Class      = "cmBase"
				Position   = "(218,120)"
				Visualized = "true">
				<Channels>
					<Server Name="ClassSvr"/>
					<Server Name="cmdHMI"/>
					<Server Name="ErrorNr"/>
					<Server Name="mode"/>
					<Server Name="state"/>
					<Server Name="stsHMI_RunsAllowed"/>
					<Server Name="stsInAlarm"/>
					<Server Name="stsIsInterlocked"/>
					<Client Name="id"/>
					<Client Name="nwEmOrUnit"/>
				</Channels>
			</Object>
		</Components>
		<Comments>
		</Comments>
		<!-- List of Connections in this network -->
		<Connections>
			<Connection Source="this.ClassSvr" Destination="_base.ClassSvr" Vertices="(1036,210),(864,210),"/>
			<Connection Source="this.state" Destination="_base.state" Vertices="(1036,270),(864,270),"/>
			<Connection Source="this.mode" Destination="_base.mode" Vertices="(1036,330),(864,330),"/>
			<Connection Source="this.cmdHMI" Destination="_base.cmdHMI" Vertices="(1036,390),(864,390),"/>
			<Connection Source="this.stsInAlarm" Destination="_base.stsInAlarm" Vertices="(1036,450),(864,510),"/>
			<Connection Source="this.stsIsInterlocked" Destination="_base.stsIsInterlocked" Vertices="(1036,510),(864,570),"/>
			<Connection Source="this.stsHMI_RunsAllowed" Destination="_base.stsHMI_RunsAllowed" Vertices="(1036,570),(864,630),"/>
			<Connection Source="this.ErrorNr" Destination="_base.ErrorNr" Vertices="(1036,630),(864,690),"/>
			<Connection Source="_base.nwEmOrUnit" Destination="this.nwEmOrUnit" Vertices="(218,210),(38,210),"/>
			<Connection Source="_base.id" Destination="this.id" Vertices="(218,270),(38,270),"/>
		</Connections>
		<!-- Headerfiles -->
		<Options>
		</Options>
	</Network>
</Class>
*)
#pragma using cmBase

cmToolChange : CLASS
: cmBase
  //Servers:
	parWaitTimeForBlowCoin 	: SvrCh_UDINT;
	stprChange 	: SvrCh_DINT;
	iSimuChange 	: SvrCh_DINT;
	oToolOk 	: SvrCh_DINT;
  //Clients:
	iNoTool 	: CltCh_DINT;
	iMotorStandStill 	: CltCh_DINT;
	iToolLocked 	: CltCh_DINT;
	iCmdToolChange 	: CltCh_DINT;
	oChangeTool 	: CltCh_DINT;
	oBlowCone 	: CltCh_DINT;
  //Variables:
		oldCmdToolChange 	: DINT;
		timerWaitForBlowCoin 	: strTimer;
  //Functions:
	
	FUNCTION VIRTUAL work;
	
	FUNCTION VIRTUAL preScanOverride;
	
	FUNCTION VIRTUAL postScanOverride;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

//}}LSL_DECLARATION


FUNCTION GLOBAL TAB cmToolChange::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_CMTOOLCHANGE
0$UINT, 0$UINT, (SIZEOF(::cmToolChange))$UINT, 
4$UINT, 6$UINT, 0$UINT, 
TO_UDINT(3797633578), "cmToolChange", //Class
TO_UDINT(1325959504), "cmBase", 1$UINT, 0$UINT, //Baseclass
//Servers:
(::cmToolChange.parWaitTimeForBlowCoin.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000011000$UINT, TO_UDINT(3028098618), "parWaitTimeForBlowCoin", 
(::cmToolChange.stprChange.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2115425818), "stprChange", 
(::cmToolChange.iSimuChange.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(612931512), "iSimuChange", 
(::cmToolChange.oToolOk.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1317775498), "oToolOk", 
//Clients:
(::cmToolChange.iNoTool.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(2485929769), "iNoTool", 
(::cmToolChange.iMotorStandStill.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(3927365515), "iMotorStandStill", 
(::cmToolChange.iToolLocked.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(2947030426), "iToolLocked", 
(::cmToolChange.iCmdToolChange.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(903998925), "iCmdToolChange", 
(::cmToolChange.oChangeTool.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(2057268410), "oChangeTool", 
(::cmToolChange.oBlowCone.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(3777446717), "oBlowCone", 
END_FUNCTION


#define USER_CNT_cmToolChange 19

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_cmToolChange] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION cmToolChange::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
		nCmdSize	: UINT;
	END_VAR

	ret_code	:= cmBase::@STD();
	IF ret_code <> C_OK THEN
		RETURN;
	END_IF;
	nCmdSize		:= cmBase::ClassSvr.pMeth^.nCmds$UINT*SIZEOF(pVoid) + CMDMETH.Init;

	_memcpy((#vmt.CmdTable)$^USINT, cmBase::ClassSvr.pMeth, nCmdSize);
	vmt.CmdTable.nCmds		:= nSTDCMD + USER_CNT_cmToolChange;
#pragma warning (disable : 74)
	vmt.UserFcts[9]		:= #work();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[17]		:= #preScanOverride();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[18]		:= #postScanOverride();

#pragma warning (default : 74)
	cmBase::ClassSvr.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF cmBase::ClassSvr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	parWaitTimeForBlowCoin.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF parWaitTimeForBlowCoin.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	stprChange.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF stprChange.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	iSimuChange.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF iSimuChange.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION
// JdK 3-10-2019 cm tool change, created for 4255 and standard lib
// task of this cm is to control the toolchange, and to check if tool is ok

// toolchange is only allowed if state is aborted
// there are no errors


FUNCTION VIRTUAL cmToolChange::work

  CASE stprChange OF

  0: //wait for command
    IF pmlCom.cmd.state= Aborted & iCmdToolChange= 1 & oldCmdToolChange= 1 & iMotorStandStill= 1 THEN //only on positive trigger
      stprChange+= 1;
    END_IF;
    
  1: //set change tool output to 1, wait for blow coin output
    oChangeTool:=1;
    IF timerWaitForBlowCoin.done THEN
      stprChange+=1;
    END_IF;
    
  2: //set both outputs to 1
    oChangeTool:= 1;
    oBlowCone:= 1;
  
  END_CASE;
  

END_FUNCTION


FUNCTION VIRTUAL cmToolChange::preScanOverride

  //read inputs
  IF pmlCom.cmd.simulation <> allSimu THEN
    iNoTool := iNoTool.Read();
    iMotorStandStill := iMotorStandStill.Read();
    iToolLocked := iToolLocked.Read();
    iCmdToolChange:= iCmdToolChange.Read();
  ELSE //simulations, set all to ok values
    iNoTool:= 0;
    iMotorStandStill:= 1;
    iToolLocked:= 1;
    iCmdToolChange:= iSimuChange;
  END_IF;
  
  //always set outputs to 0, if required they are in work set to a value
  oChangeTool:= 0;
  oBlowCone:= 0;

  //stop toolchange if no longer aborted
  IF pmlCom.cmd.state <> Aborted | iCmdToolChange= 0 THEN
    stprChange:= 0; //always stop if state isn't aborted
  END_IF; 
  
  //run timer wait for blow
  timerWaitForBlowCoin:= runTimer(Active:=stprChange=1, iMem:=timerWaitForBlowCoin, TimerTime:=parWaitTimeForBlowCoin, Pause:=0); 

END_FUNCTION


FUNCTION VIRTUAL cmToolChange::postScanOverride

  //write outputs
  oToolOk:=iNoTool=0 & iToolLocked= 1 & oChangeTool=0 & oBlowCone=0 ;
  oChangeTool.Write(input:=oChangeTool);
  oBlowCone.Write(input:=oBlowCone);

  //set trigger merker
  oldCmdToolChange:= iCmdToolChange;

END_FUNCTION
