//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "CtrlCheckMachineReady"
	Revision           = "0.1"
	GUID               = "{8C70971C-DC54-4C49-8E43-3FAF2B6BB546}"
	RealtimeTask       = "false"
	CyclicTask         = "true"
	DefCyclictime      = "50 ms"
	BackgroundTask     = "false"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(570,120)">
	<Channels>
		<Server Name="AlarmActiefCommon" GUID="{ED76A9FE-05A5-485D-9696-16B02BD784FC}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="AlarmActiefSafety" GUID="{31CF3B01-4DA1-42C1-B704-AAEA9766695D}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="AlarmLubr" GUID="{11C110CA-0906-40A4-B21D-06EB3860E67E}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="ClassSvr" GUID="{F12A286B-93F7-4E3E-8EC9-EC3D733CD945}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="ErrorNrCommon" GUID="{E8183427-48C2-4604-A8AB-6DC63C7AA031}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="ErrorNrLubr" GUID="{76BE5994-27F4-4EC6-BDC6-91DA65E49550}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="ErrorNrSafety" GUID="{8D34B122-7247-4A9F-843E-46E66ED8A9D6}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="ResetAlarms" GUID="{94AAFEB4-3373-400F-801E-6D46F178EA7D}" Visualized="false" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="result" GUID="{109F4A01-5875-4F27-A73D-27B1F9D015A3}" Class="Logic_Or_2" Visualized="true" Remotely="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="result of logic operation"/>
		<Server Name="sStartUpTime" GUID="{64DD766B-C790-4107-B618-5ED351527176}" Visualized="false" Initialize="true" DefValue="10000" WriteProtected="true" Retentive="false"/>
		<Server Name="Status_Controlcurrent" GUID="{035B32C4-9D0A-48BD-9B3D-FC34778B7786}" Visualized="false" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="Status_SafeCompleet" GUID="{9A91AEC1-F514-4AE9-BB61-A7DB9B5B7BED}" Visualized="false" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Client Name="_AlarmCommon" Required="true" Internal="true"/>
		<Client Name="_AlarmLubr" Required="true" Internal="true"/>
		<Client Name="_AlarmSafety" Required="true" Internal="true"/>
		<Client Name="iBlink" Required="true" Internal="false"/>
		<Client Name="iBTBs" Required="false" Internal="false"/>
		<Client Name="iControlCurrent" Required="true" Internal="false"/>
		<Client Name="iEmergencyStops" Required="false" Internal="false"/>
		<Client Name="iIsafeCompleet" Required="true" Internal="false"/>
		<Client Name="iLuchtdrukOK" Required="false" Internal="false"/>
		<Client Name="iNrLubrs" Required="false" Internal="false"/>
		<Client Name="iSimulateMode" Required="false" Internal="false"/>
		<Client Name="iSmeerSystemenLeeg" Required="false" Internal="false"/>
		<Client Name="iStatusCanComm" Required="true" Internal="false" DefValue="1"/>
		<Client Name="iStuurstroomIn" Required="false" Internal="false"/>
		<Client Name="iThermUits" Required="false" Internal="false"/>
		<Client Name="Logic_Or_23" Required="true" Internal="true"/>
		<Client Name="Logic_Or_24" Required="true" Internal="true"/>
		<Client Name="nrBTBinUse" Required="false" Internal="false"/>
		<Client Name="nrEmergencyStops" Required="false" Internal="false"/>
		<Client Name="nrThermUitinUse" Required="false" Internal="false"/>
		<Client Name="oLightControlCurrent" Required="false" Internal="false"/>
		<Client Name="StatusIOlinkComm" Required="false" Internal="false"/>
	</Channels>
	<RevDoku>
		<Owner/>
		<Dokumentation Revision="0.1" Date="2021-02-09" Author="JDK&#13;&#10;" Company="Dulst" Description="Add lub alarms&#13;&#10;"/>
	</RevDoku>
	<Network Name="CtrlCheckMachineReady">
		<!-- List of Components in this network -->
		<Components>
			<Object
				Name           = "_AlarmCommon"
				GUID           = "{C243C8D8-BF14-4A42-85DA-1D6FB841C4EB}"
				Class          = "_AlarmX3ParaDer"
				Position       = "(600,1110)"
				Visualized     = "true"
				Remotely       = "true"
				BackgroundTime = "100 ms">
				<Channels>
					<Server Name="AlarmActief"/>
					<Server Name="ClassSvr"/>
					<Server Name="ErrorNr"/>
					<Client Name="Acknow"/>
					<Client Name="Config" Value="0"/>
					<Client Name="Group"/>
					<Client Name="Para1"/>
					<Client Name="Para2"/>
					<Client Name="Para3"/>
				</Channels>
			</Object>
			<Object
				Name           = "_AlarmLubr"
				GUID           = "{B51CF6EB-70D0-4242-9B50-DBD03B428C72}"
				Class          = "_AlarmX3ParaDer"
				Position       = "(630,2100)"
				Visualized     = "true"
				Remotely       = "true"
				BackgroundTime = "100 ms">
				<Channels>
					<Server Name="AlarmActief"/>
					<Server Name="ClassSvr"/>
					<Server Name="ErrorNr"/>
					<Client Name="Acknow"/>
					<Client Name="Config" Value="0"/>
					<Client Name="Group"/>
					<Client Name="Para1"/>
					<Client Name="Para2"/>
					<Client Name="Para3"/>
				</Channels>
			</Object>
			<Object
				Name           = "_AlarmSafety"
				GUID           = "{DAE82440-BB63-4077-849A-D94CC47523C6}"
				Class          = "_AlarmX3ParaDer"
				Position       = "(600,1620)"
				Visualized     = "true"
				Remotely       = "true"
				BackgroundTime = "100 ms">
				<Channels>
					<Server Name="AlarmActief"/>
					<Server Name="ClassSvr"/>
					<Server Name="ErrorNr"/>
					<Client Name="Acknow"/>
					<Client Name="Config" Value="0"/>
					<Client Name="Group"/>
					<Client Name="Para1"/>
					<Client Name="Para2"/>
					<Client Name="Para3"/>
				</Channels>
			</Object>
			<Object
				Name       = "Logic_Or_23"
				GUID       = "{25B0B27E-4200-4C92-9AFE-4F7DA948C2A3}"
				Class      = "Logic_Or_2"
				Position   = "(1530,2310)"
				Visualized = "true"
				Remotely   = "true">
				<Channels>
					<Server Name="Result"/>
					<Client Name="Op1"/>
					<Client Name="Op2"/>
				</Channels>
			</Object>
			<Object
				Name       = "Logic_Or_24"
				GUID       = "{2CC37DC2-B936-4D9F-A3EF-6982A83F6E98}"
				Class      = "Logic_Or_2"
				Position   = "(1410,1950)"
				Visualized = "true"
				Remotely   = "true">
				<Channels>
					<Server Name="Result"/>
					<Client Name="Op1"/>
					<Client Name="Op2"/>
				</Channels>
			</Object>
		</Components>
		<Comments>
		</Comments>
		<!-- List of Connections in this network -->
		<Connections>
			<Connection Source="this._AlarmLubr" Destination="_AlarmLubr.ClassSvr"/>
			<Connection Source="this._AlarmCommon" Destination="_AlarmCommon.ClassSvr"/>
			<Connection Source="this.AlarmActiefCommon" Destination="_AlarmCommon.AlarmActief" Vertices="(2002,450),(916,1260),"/>
			<Connection Source="this.ErrorNrCommon" Destination="_AlarmCommon.ErrorNr" Vertices="(2002,630),(916,1320),"/>
			<Connection Source="this._AlarmSafety" Destination="_AlarmSafety.ClassSvr"/>
			<Connection Source="this.AlarmActiefSafety" Destination="_AlarmSafety.AlarmActief" Vertices="(2002,510),(916,1770),"/>
			<Connection Source="this.ErrorNrSafety" Destination="_AlarmSafety.ErrorNr" Vertices="(2002,690),(916,1830),"/>
			<Connection Source="this.AlarmLubr" Destination="_AlarmLubr.AlarmActief" Vertices="(2002,570),(946,2250),"/>
			<Connection Source="this.ErrorNrLubr" Destination="_AlarmLubr.ErrorNr" Vertices="(2002,750),(946,2310),"/>
			<Connection Source="this.Logic_Or_23" Destination="Logic_Or_23.Result"/>
			<Connection Source="this.Logic_Or_24" Destination="Logic_Or_24.Result"/>
			<Connection Source="Logic_Or_24.Op1" Destination="_AlarmCommon.AlarmActief" Vertices="(1410,2040),(916,1260),"/>
			<Connection Source="Logic_Or_24.Op2" Destination="_AlarmSafety.AlarmActief" Vertices="(1410,2100),(916,1770),"/>
			<Connection Source="Logic_Or_23.Op2" Destination="_AlarmLubr.AlarmActief" Vertices="(1530,2460),(946,2250),"/>
			<Connection Source="Logic_Or_23.Op1" Destination="Logic_Or_24.Result" Vertices="(1530,2400),(1710,2040),"/>
			<Connection Source="this.result" Destination="Logic_Or_23.Result" Vertices="(2002,870),(1830,2400),"/>
		</Connections>
		<!-- Headerfiles -->
		<Options>
		</Options>
	</Network>
</Class>
*)
CtrlCheckMachineReady : CLASS
  //Servers:
	ClassSvr 	: SvrChCmd_DINT;
	Status_SafeCompleet 	: SvrCh_DINT;
	Status_Controlcurrent 	: SvrCh_DINT;
	ResetAlarms 	: SvrCh_DINT;
	AlarmActiefCommon 	: SvrCh_DINT;
	AlarmActiefSafety 	: SvrCh_DINT;
	AlarmLubr 	: SvrCh_DINT;
	ErrorNrCommon 	: SvrCh_DINT;
	ErrorNrSafety 	: SvrCh_DINT;
	ErrorNrLubr 	: SvrCh_DINT;
	sStartUpTime 	: SvrCh_UDINT;
	result 	: SvrChCmd_DINT;
  //Clients:
	StatusIOlinkComm 	: CltCh_DINT;
	iStatusCanComm 	: CltCh_DINT;
	iStuurstroomIn 	: CltCh_DINT;
	iBTBs 	: CltChCmd_Lees10Ingangenin;
	nrBTBinUse 	: CltCh_DINT;
	iThermUits 	: CltChCmd_Lees10Ingangenin;
	nrThermUitinUse 	: CltCh_DINT;
	iSmeerSystemenLeeg 	: CltCh_DINT;
	iLuchtdrukOK 	: CltCh_DINT;
	iEmergencyStops 	: CltChCmd_Lees10Ingangenin;
	nrEmergencyStops 	: CltCh_DINT;
	oLightControlCurrent 	: CltCh_DINT;
	iSimulateMode 	: CltCh_eSimuState;
	iIsafeCompleet 	: CltCh_DINT;
	iControlCurrent 	: CltCh_DINT;
	iBlink 	: CltCh_DINT;
	iNrLubrs 	: CltCh_DINT;
	_AlarmCommon 	: CltChCmd__AlarmX3ParaDer;
	_AlarmSafety 	: CltChCmd__AlarmX3ParaDer;
	_AlarmLubr 	: CltChCmd__AlarmX3ParaDer;
	Logic_Or_23 	: CltChCmd_Logic_Or_2;
	Logic_Or_24 	: CltChCmd_Logic_Or_2;
  //Variables:
		i 	: DINT;
		ii 	: DINT;
		tmp 	: DINT;
		Status_OldErrorNr 	: DINT;
		tmpErrorNrCommon 	: DINT;
		tmpErrorNrSafety 	: DINT;
		tmpErrorLubr 	: DINT;
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL CyWork
		VAR_INPUT
			EAX 	: UDINT;
		END_VAR
		VAR_OUTPUT
			state (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION CheckNr
		VAR_INPUT
			nr 	: DINT;
			aantaltoread 	: DINT;
			offset 	: DINT;
		END_VAR
		VAR_OUTPUT
			HighNr 	: DINT;
		END_VAR;
	
	FUNCTION CheckStStrBTBenTherm;
	
	FUNCTION PreScan;
	
	FUNCTION CheckSmeerSysteem;
	
	FUNCTION giveAlarmCommon
		VAR_INPUT
			errorNr 	: DINT;
		END_VAR;
	
	FUNCTION giveAlarmSafety
		VAR_INPUT
			errorNr 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL ResetAlarms::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL AlarmActiefCommon::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL AlarmActiefCommon::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL AlarmActiefSafety::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL AlarmActiefSafety::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL AlarmLubr::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL AlarmLubr::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL ErrorNrCommon::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL ErrorNrCommon::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL ErrorNrSafety::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL ErrorNrSafety::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL ErrorNrLubr::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL ErrorNrLubr::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL result::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

#pragma using _AlarmX3ParaDer
#pragma using Logic_Or_2
#pragma usingLtd Lees10Ingangenin


//}}LSL_DECLARATION


FUNCTION GLOBAL TAB CtrlCheckMachineReady::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_CTRLCHECKMACHINEREADY
0$UINT, 1$UINT, (SIZEOF(::CtrlCheckMachineReady))$UINT, 
12$UINT, 22$UINT, 0$UINT, 
TO_UDINT(3652111849), "CtrlCheckMachineReady", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::CtrlCheckMachineReady.ClassSvr.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(619352855), "ClassSvr", 
(::CtrlCheckMachineReady.Status_SafeCompleet.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(889843949), "Status_SafeCompleet", 
(::CtrlCheckMachineReady.Status_Controlcurrent.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2494243007), "Status_Controlcurrent", 
(::CtrlCheckMachineReady.ResetAlarms.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1826422130), "ResetAlarms", 
(::CtrlCheckMachineReady.AlarmActiefCommon.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(289778153), "AlarmActiefCommon", 
(::CtrlCheckMachineReady.AlarmActiefSafety.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1582599671), "AlarmActiefSafety", 
(::CtrlCheckMachineReady.AlarmLubr.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2920581376), "AlarmLubr", 
(::CtrlCheckMachineReady.ErrorNrCommon.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1088081828), "ErrorNrCommon", 
(::CtrlCheckMachineReady.ErrorNrSafety.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(265022394), "ErrorNrSafety", 
(::CtrlCheckMachineReady.ErrorNrLubr.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3795120685), "ErrorNrLubr", 
(::CtrlCheckMachineReady.sStartUpTime.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1962279357), "sStartUpTime", 
(::CtrlCheckMachineReady.result.pMeth)$UINT, _CH_SVR_OBJ$UINT, 2#0000000000000000$UINT, TO_UDINT(3817997973), "result", 
//Clients:
(::CtrlCheckMachineReady.StatusIOlinkComm.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(809983856), "StatusIOlinkComm", 
(::CtrlCheckMachineReady.iStatusCanComm.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(415578869), "iStatusCanComm", 
(::CtrlCheckMachineReady.iStuurstroomIn.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(589664230), "iStuurstroomIn", 
(::CtrlCheckMachineReady.iBTBs.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000000$UINT, TO_UDINT(4182046262), "iBTBs", TO_UDINT(1181509208), "Lees10Ingangenin", 0$UINT, 0$UINT, 
(::CtrlCheckMachineReady.nrBTBinUse.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(311482147), "nrBTBinUse", 
(::CtrlCheckMachineReady.iThermUits.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000000$UINT, TO_UDINT(215495461), "iThermUits", TO_UDINT(1181509208), "Lees10Ingangenin", 0$UINT, 0$UINT, 
(::CtrlCheckMachineReady.nrThermUitinUse.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(1953771954), "nrThermUitinUse", 
(::CtrlCheckMachineReady.iSmeerSystemenLeeg.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(1170558536), "iSmeerSystemenLeeg", 
(::CtrlCheckMachineReady.iLuchtdrukOK.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(1600398502), "iLuchtdrukOK", 
(::CtrlCheckMachineReady.iEmergencyStops.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000000$UINT, TO_UDINT(1579590949), "iEmergencyStops", TO_UDINT(1181509208), "Lees10Ingangenin", 0$UINT, 0$UINT, 
(::CtrlCheckMachineReady.nrEmergencyStops.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(4045722743), "nrEmergencyStops", 
(::CtrlCheckMachineReady.oLightControlCurrent.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(2274568881), "oLightControlCurrent", 
(::CtrlCheckMachineReady.iSimulateMode.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(2606021578), "iSimulateMode", 
(::CtrlCheckMachineReady.iIsafeCompleet.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(2278622637), "iIsafeCompleet", 
(::CtrlCheckMachineReady.iControlCurrent.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(1634233191), "iControlCurrent", 
(::CtrlCheckMachineReady.iBlink.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(2598066807), "iBlink", 
(::CtrlCheckMachineReady.iNrLubrs.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(1856212377), "iNrLubrs", 
(::CtrlCheckMachineReady._AlarmCommon.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(4187669281), "_AlarmCommon", TO_UDINT(763986700), "_AlarmX3ParaDer", 0$UINT, 0$UINT, 
(::CtrlCheckMachineReady._AlarmSafety.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(3062622015), "_AlarmSafety", TO_UDINT(763986700), "_AlarmX3ParaDer", 0$UINT, 0$UINT, 
(::CtrlCheckMachineReady._AlarmLubr.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(3817351197), "_AlarmLubr", TO_UDINT(763986700), "_AlarmX3ParaDer", 0$UINT, 0$UINT, 
(::CtrlCheckMachineReady.Logic_Or_23.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(1385779324), "Logic_Or_23", TO_UDINT(4275583654), "Logic_Or_2", 1$UINT, 1$UINT, 
(::CtrlCheckMachineReady.Logic_Or_24.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(3439183327), "Logic_Or_24", TO_UDINT(4275583654), "Logic_Or_2", 1$UINT, 1$UINT, 
END_FUNCTION


#define USER_CNT_CtrlCheckMachineReady 0

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_CtrlCheckMachineReady] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION CtrlCheckMachineReady::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT_CtrlCheckMachineReady, pCmd := #vmt.CmdTable);
	vmt.CmdTable.CyWork		:= #CyWork();
	ClassSvr.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF ClassSvr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Status_SafeCompleet.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF Status_SafeCompleet.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Status_Controlcurrent.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF Status_Controlcurrent.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	ResetAlarms.pMeth			:= StoreMethod( #M_RD_DIRECT(), #ResetAlarms::Write() );
	IF ResetAlarms.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	AlarmActiefCommon.pMeth			:= StoreMethod( #AlarmActiefCommon::Read(), #AlarmActiefCommon::Write() );
	IF AlarmActiefCommon.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	AlarmActiefSafety.pMeth			:= StoreMethod( #AlarmActiefSafety::Read(), #AlarmActiefSafety::Write() );
	IF AlarmActiefSafety.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	AlarmLubr.pMeth			:= StoreMethod( #AlarmLubr::Read(), #AlarmLubr::Write() );
	IF AlarmLubr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	ErrorNrCommon.pMeth			:= StoreMethod( #ErrorNrCommon::Read(), #ErrorNrCommon::Write() );
	IF ErrorNrCommon.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	ErrorNrSafety.pMeth			:= StoreMethod( #ErrorNrSafety::Read(), #ErrorNrSafety::Write() );
	IF ErrorNrSafety.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	ErrorNrLubr.pMeth			:= StoreMethod( #ErrorNrLubr::Read(), #ErrorNrLubr::Write() );
	IF ErrorNrLubr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	_memcpy((#vmt.CmdTable)$^USINT, result.pMeth, SIZEOF(CMDMETH));
	vmt.CmdTable.nCmds		:= nSTDCMD;
	vmt.CmdTable.Read		:= #result::Read();
	result.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF result.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION
// JdK 22-7-2019: CtrlCheckMachineReady, copied from project 4090 
// goal of this fb is to check if every needed input is there, and give an alarm if it isn't

// changed so we can use it for the different sections, signals can be connected to the general check machine ready fb,
// or to the section check machine ready fb, in the last case the signals from the general are also read in, and should
// be ok before signals out are given ok, but there are no alarms given for it

// this class need to be updated some time, but for now we just use it

FUNCTION CtrlCheckMachineReady::CheckStStrBTBenTherm

//errornrs := 1 geen stuurstroom
//            2 geen assenstroom
//            3 tm 12 btb's missen
//            13 tm 22 therms uit missen
//            23 tm 32 luchtdruk te laag
//            33 iSafe weggevallen tijdens productie, reset alarms vereist
//            34 io link niet Ok
//            35 can com niet Ok

// 60 = smeer

  tmpErrorNrCommon := 0;
  if StatusIOlinkComm = 1 & iStatusCanComm = 1 then
    if iStuurstroomIn = 1 then
      //if iLoopwagenstroomIn = 1 then
        tmpErrorNrCommon := CheckNr(nr:=iBTBs, aantaltoread:=nrBTBinUse, offset:=2);
        if tmpErrorNrCommon = 0 then
          tmpErrorNrCommon := CheckNr(nr:=iThermUits, aantaltoread:=nrThermUitinUse, offset:=12);
          if tmpErrorNrCommon = 0 & iLuchtdrukOK = 0 then
            tmpErrorNrCommon := 23;
          end_if;
        end_if;
    elsif tmpErrorNrCommon <> 1 then
      tmpErrorNrCommon := 1;
    end_if;
  elsif StatusIOlinkComm = 0 then
    tmpErrorNrCommon := 34;
  elsif iStatusCanComm = 0 then
    tmpErrorNrCommon := 35;
  end_if;

  if tmpErrorNrCommon = 0 & Status_OldErrorNr <> 2 & Status_OldErrorNr > 0 & Status_OldErrorNr <> 33 & _AlarmCommon.ErrorNr<> 33  then
    _AlarmCommon.AlarmActief.Write(input:=0);
    giveAlarmCommon(errorNr:=33); //deze wordt pas nul bij reset alarms, dan wordt namelijk olderroralgemeen op nul gezet en verdwijnt deze dus
  elsif (tmpErrorNrCommon <> Status_OldErrorNr | (_AlarmCommon.AlarmActief = 0 & tmpErrorNrCommon > 0) ) & Status_OldErrorNr <> 33 & ops.tAbsolute > sStartUpTime  then //don't give alarms during start up
    giveAlarmCommon(errorNr:=tmpErrorNrCommon);
    Status_OldErrorNr := tmpErrorNrCommon;
  end_if;
  
  if (tmpErrorNrCommon = 0 | iSimulateMode = allSimu) & iIsafeCompleet=1  then
    Status_SafeCompleet := 1;
  else
    Status_SafeCompleet := 0;
  end_if;
  
  
  // alarms safety
  oLightControlCurrent := 0;
  iBlink:= iBlink.Read();
  tmpErrorNrSafety := CheckNr(nr:=iEmergencyStops, aantaltoread:=nrEmergencyStops, offset:=0);
  if tmpErrorNrSafety<>0 then
    if ops.tAbsolute > sStartUpTime then //don't give alarms during start up
      giveAlarmSafety(errorNr:=tmpErrorNrSafety);
    end_if;
  else
    _AlarmSafety.ErrorNr := 0; //if em stops are ok, reset alarm
    _AlarmSafety.AlarmActief.Write(input:=0);
    //if iIsafeCompleet= 1 then
      // no alarms
  //    if iAllEmButtons = 0 then
  //      oLightControlCurrent := 0; //one of the em buttons somewhere else is false, so dont flash the light
      (*els*)
      if iStuurstroomIn = 0 then 
        // no emergencystops and no control current, turn on light
        oLightControlCurrent := 2;    //JdK 14-10-2020 special because we need to make a difference between two cc zones with one light
      else
        oLightControlCurrent := 1;
      end_if;
    //end_if;
  end_if;
  oLightControlCurrent.Write(input:=oLightControlCurrent);
    
END_FUNCTION


FUNCTION VIRTUAL GLOBAL CtrlCheckMachineReady::CyWork
	VAR_INPUT
		EAX 	: UDINT;
	END_VAR
	VAR_OUTPUT
		state (EAX) 	: UDINT;
	END_VAR

  PreScan();
  CheckStStrBTBenTherm();
  CheckSmeerSysteem();


	state := READY;

END_FUNCTION


FUNCTION CtrlCheckMachineReady::PreScan
  iSimulateMode := iSimulateMode.Read();
  iStuurstroomIn := iStuurstroomIn.Read();
  Status_Controlcurrent := (iStuurstroomIn | iSimulateMode = allSimu) & iControlCurrent;
  iBTBs := iBTBs.Read(); // we wait two seconds to give time to startup comm
  nrBTBinUse := nrBTBinUse.Read();
  iThermUits := iThermUits.Read();
  nrThermUitinUse := nrThermUitinUse.Read();
  iEmergencyStops := iEmergencyStops.Read();
  iSmeerSystemenLeeg := iSmeerSystemenLeeg.Read();
  iLuchtdrukOK := iLuchtdrukOK.Read() ; 
  iStatusCanComm := iStatusCanComm.Read(); 
  StatusIOlinkComm := StatusIOlinkComm.Read(); 
  
  iIsafeCompleet:=iIsafeCompleet.Read();
  iControlCurrent:=iControlCurrent.Read();
  
END_FUNCTION



      


FUNCTION CtrlCheckMachineReady::CheckSmeerSysteem

//errors gelijk aan volgorde aansluiten
  iNrLubrs:=iNrLubrs.Read();
  tmpErrorLubr:= CheckNr(nr:=iSmeerSystemenLeeg, aantaltoread:=iNrLubrs, offset:=0);
  if tmpErrorLubr <> _AlarmLubr.ErrorNr then
    _AlarmLubr.ErrorNr.Write(input:=tmpErrorLubr);
    _AlarmLubr.AlarmActief.Write(input:=tmpErrorLubr<>0);
  end_if;
  


END_FUNCTION




FUNCTION VIRTUAL GLOBAL CtrlCheckMachineReady::ResetAlarms::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	ResetAlarms := input;
  
  Status_OldErrorNr := 0;
  _AlarmCommon.ErrorNr := 0;
  _AlarmCommon.AlarmActief.Write(input:=0);
  
  _AlarmSafety.ErrorNr := 0;
  _AlarmSafety.AlarmActief.Write(input:=0);
	result := ResetAlarms;

END_FUNCTION











FUNCTION CtrlCheckMachineReady::CheckNr
	VAR_INPUT
		nr 	: DINT;
		aantaltoread 	: DINT;
		offset 	: DINT;
	END_VAR
	VAR_OUTPUT
		HighNr 	: DINT;
	END_VAR
  
  
  HighNr := 0;
  for i:= 1 to aantaltoread do
    tmp := nr;
    for ii := 2 to i do
      tmp := tmp/10;
    end_for;
    if tmp mod 10 = 0 then
      HighNr := i + offset;
      exit;
    end_if;
  end_for;
  
END_FUNCTION
 

FUNCTION VIRTUAL GLOBAL CtrlCheckMachineReady::AlarmActiefCommon::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

	AlarmActiefCommon := _AlarmCommon.AlarmActief.Read();
	output := AlarmActiefCommon;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL CtrlCheckMachineReady::AlarmActiefCommon::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	AlarmActiefCommon := input;
	result := (_AlarmCommon.AlarmActief.Write(AlarmActiefCommon))$DINT;

END_FUNCTION





FUNCTION VIRTUAL GLOBAL CtrlCheckMachineReady::AlarmActiefSafety::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

	AlarmActiefSafety := _AlarmSafety.AlarmActief.Read();
	output := AlarmActiefSafety;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL CtrlCheckMachineReady::AlarmActiefSafety::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	AlarmActiefSafety := input;
	result := (_AlarmSafety.AlarmActief.Write(AlarmActiefSafety))$DINT;

END_FUNCTION




FUNCTION VIRTUAL GLOBAL CtrlCheckMachineReady::ErrorNrCommon::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

	ErrorNrCommon := _AlarmCommon.ErrorNr.Read();
	output := ErrorNrCommon;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL CtrlCheckMachineReady::ErrorNrCommon::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	ErrorNrCommon := input;
	result := (_AlarmCommon.ErrorNr.Write(ErrorNrCommon))$DINT;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL CtrlCheckMachineReady::ErrorNrSafety::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

	ErrorNrSafety := _AlarmSafety.ErrorNr.Read();
	output := ErrorNrSafety;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL CtrlCheckMachineReady::ErrorNrSafety::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	ErrorNrSafety := input;
	result := (_AlarmSafety.ErrorNr.Write(ErrorNrSafety))$DINT;

END_FUNCTION


FUNCTION CtrlCheckMachineReady::giveAlarmCommon
	VAR_INPUT
		errorNr 	: DINT;
	END_VAR

  IF _AlarmCommon.AlarmActief=0 | errorNr<>_AlarmCommon.ErrorNr THEN
    _AlarmCommon.ErrorNr.Write(input:=errorNr);
    _AlarmCommon.AlarmActief.Write(input:=1);
  END_IF;

END_FUNCTION


FUNCTION CtrlCheckMachineReady::giveAlarmSafety
	VAR_INPUT
		errorNr 	: DINT;
	END_VAR

  IF _AlarmSafety.AlarmActief=0 | errorNr <> _AlarmSafety.ErrorNr THEN
    _AlarmSafety.ErrorNr.Write(input:=errorNr);
    _AlarmSafety.AlarmActief.Write(input:=1);
  END_IF;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL CtrlCheckMachineReady::AlarmLubr::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

	AlarmLubr := _AlarmLubr.AlarmActief.Read();
	output := AlarmLubr;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL CtrlCheckMachineReady::AlarmLubr::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	AlarmLubr := input;
	result := (_AlarmLubr.AlarmActief.Write(AlarmLubr))$DINT;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL CtrlCheckMachineReady::ErrorNrLubr::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

	ErrorNrLubr := _AlarmLubr.ErrorNr.Read();
	output := ErrorNrLubr;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL CtrlCheckMachineReady::ErrorNrLubr::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	ErrorNrLubr := input;
	result := (_AlarmLubr.ErrorNr.Write(ErrorNrLubr))$DINT;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL CtrlCheckMachineReady::result::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

	result := Logic_Or_23.Result.Read();
	output := result;

END_FUNCTION
