//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "checkReleaseXWagon"
	Revision           = "1.0"
	GUID               = "{435DAF61-E8DA-42DB-82AC-E7E1C7362063}"
	RealtimeTask       = "false"
	CyclicTask         = "true"
	DefCyclictime      = "10 ms"
	BackgroundTask     = "true"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(642,120)">
	<Channels>
		<Server Name="overruleCheck" GUID="{1336B99A-B9BE-4B91-9C2B-FB6352B4224E}" Visualized="false" Initialize="true" WriteProtected="false" Retentive="false"/>
		<Server Name="releaseXWagon" GUID="{94EB0DD5-3FB8-4296-AF57-EDDF14740B03}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Client Name="ctrlServo" Required="true" Internal="false"/>
		<Client Name="iMaxPosPressureRollers" Required="true" Internal="false"/>
		<Client Name="iOperationsDone" Required="true" Internal="false"/>
		<Client Name="iStsPressureRollers" Required="true" Internal="false"/>
	</Channels>
	<Separators>
		<Clients>
			<SepChn Position="3"/>
		</Clients>
	</Separators>
	<Network Name="checkReleaseXWagon">
		<!-- List of Components in this network -->
		<Components>
			<Object
				Name       = "_base"
				GUID       = "{06483260-70AF-45FB-BE17-8DB64BD81D48}"
				Class      = "cmBase"
				Position   = "(218,120)"
				Visualized = "true">
				<Channels>
					<Server Name="ClassSvr"/>
					<Server Name="cmdHMI"/>
					<Server Name="ErrorNr"/>
					<Server Name="mode"/>
					<Server Name="state"/>
					<Server Name="stsHMI_RunsAllowed"/>
					<Server Name="stsInAlarm"/>
					<Server Name="stsIsInterlocked"/>
					<Client Name="id"/>
					<Client Name="nwEmOrUnit"/>
				</Channels>
			</Object>
		</Components>
		<Comments>
		</Comments>
		<!-- List of Connections in this network -->
		<Connections>
			<Connection Source="this.ClassSvr" Destination="_base.ClassSvr" Vertices="(1036,210),(864,210),"/>
			<Connection Source="this.state" Destination="_base.state" Vertices="(1036,270),(864,270),"/>
			<Connection Source="this.mode" Destination="_base.mode" Vertices="(1036,330),(864,330),"/>
			<Connection Source="this.cmdHMI" Destination="_base.cmdHMI" Vertices="(1036,390),(864,390),"/>
			<Connection Source="this.stsInAlarm" Destination="_base.stsInAlarm" Vertices="(1036,450),(864,510),"/>
			<Connection Source="this.stsIsInterlocked" Destination="_base.stsIsInterlocked" Vertices="(1036,510),(864,570),"/>
			<Connection Source="this.stsHMI_RunsAllowed" Destination="_base.stsHMI_RunsAllowed" Vertices="(1036,570),(864,630),"/>
			<Connection Source="this.ErrorNr" Destination="_base.ErrorNr" Vertices="(1036,630),(864,690),"/>
			<Connection Source="_base.nwEmOrUnit" Destination="this.nwEmOrUnit" Vertices="(218,210),(38,210),"/>
			<Connection Source="_base.id" Destination="this.id" Vertices="(218,270),(38,270),"/>
		</Connections>
		<!-- Headerfiles -->
		<Options>
		</Options>
	</Network>
</Class>
*)
#pragma using cmBase

checkReleaseXWagon : CLASS
: cmBase
  //Servers:
	releaseXWagon 	: SvrCh_DINT;
	overruleCheck 	: SvrCh_DINT;
  //Clients:
	ctrlServo 	: CltChCmd_cmServo;
	iStsPressureRollers 	: CltCh_cilPos;
	iOperationsDone 	: CltCh_DINT;
	iMaxPosPressureRollers 	: CltCh_DINT;
  //Variables:
		ok1 	: DINT;
		ok2 	: DINT;
		ok3 	: DINT;
		ok4 	: DINT;
		ok5 	: DINT;
		ok6 	: DINT;
		movesNegative 	: DINT;
		movesPositive 	: DINT;
		reqOperAllowed 	: DINT;
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL releaseXWagon::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

#pragma usingLtd cmServo


//}}LSL_DECLARATION


FUNCTION GLOBAL TAB checkReleaseXWagon::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_CHECKRELEASEXWAGON
1$UINT, 0$UINT, (SIZEOF(::checkReleaseXWagon))$UINT, 
2$UINT, 4$UINT, 0$UINT, 
TO_UDINT(3067347065), "checkReleaseXWagon", //Class
TO_UDINT(1325959504), "cmBase", 1$UINT, 0$UINT, //Baseclass
//Servers:
(::checkReleaseXWagon.releaseXWagon.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3032938538), "releaseXWagon", 
(::checkReleaseXWagon.overruleCheck.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3432355606), "overruleCheck", 
//Clients:
(::checkReleaseXWagon.ctrlServo.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(2859050432), "ctrlServo", TO_UDINT(3985303601), "cmServo", 1$UINT, 0$UINT, 
(::checkReleaseXWagon.iStsPressureRollers.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(3311246879), "iStsPressureRollers", 
(::checkReleaseXWagon.iOperationsDone.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(1789203248), "iOperationsDone", 
(::checkReleaseXWagon.iMaxPosPressureRollers.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(1393243186), "iMaxPosPressureRollers", 
END_FUNCTION


#define USER_CNT_checkReleaseXWagon 19

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_checkReleaseXWagon] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION checkReleaseXWagon::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
		nCmdSize	: UINT;
	END_VAR

	ret_code	:= cmBase::@STD();
	IF ret_code <> C_OK THEN
		RETURN;
	END_IF;
	nCmdSize		:= cmBase::ClassSvr.pMeth^.nCmds$UINT*SIZEOF(pVoid) + CMDMETH.Init;

	_memcpy((#vmt.CmdTable)$^USINT, cmBase::ClassSvr.pMeth, nCmdSize);
	vmt.CmdTable.nCmds		:= nSTDCMD + USER_CNT_checkReleaseXWagon;
	cmBase::ClassSvr.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF cmBase::ClassSvr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	releaseXWagon.pMeth			:= StoreMethod( #releaseXWagon::Read(), #M_NO_F() );
	IF releaseXWagon.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	overruleCheck.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF overruleCheck.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION
// JdK 12-8-2019: check release x wagon created for 4284, check if clamps are opened/drills are back etc.



FUNCTION VIRTUAL GLOBAL checkReleaseXWagon::releaseXWagon::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

  iOperationsDone := iOperationsDone.Read();
  iStsPressureRollers := iStsPressureRollers.Read();
  iMaxPosPressureRollers:= iMaxPosPressureRollers.Read(); //RVDL 14-1-2020 added read for this variable

  movesNegative:= ctrlServo.stsPos >= (ctrlServo.reqPos + 20); //20 because of possible overshoot
  movesPositive:= ctrlServo.stsPos <= (ctrlServo.reqPos - 20); //20 because of possible overshoot
  reqOperAllowed:= (pmlCom.sts.mode<> manual & movesNegative= 0); //requirements for operation not complete back allowed during movement, only if not in manual and moving not negative and clamp opened
   
  ok1:= movesPositive=  0 | pmlCom.sts.mode= manual ; //clamp should be open if moving positive, don't take material back to start pos
  ok2:= 1 ; // mill should be back (down) before the wagon goes on
  ok3:= iOperationsDone=1 | reqOperAllowed= 1 | pmlCom.cmd.simulation = allSimu; //same for  operations, addition MR: in simulation mode operations done (saw down)
  ok4:= iStsPressureRollers= cilIn |  (ctrlServo.stsPos > iMaxPosPressureRollers) ; //rollers should be back if wagon is to close to them // RVDL or cilout and pos greater then pos rollers
  ok5:= 1;
  ok6:= 1;


  IF (ok1 & ok2 & ok3 & ok4 & ok5 & ok6) | overruleCheck THEN
    releaseXWagon:= 1;
  ELSE
    releaseXWagon:= 0;
    IF ok1= 0 THEN
      giveAlarm(errorNr:=1);
    ELSIF ok2= 0 THEN
      giveAlarm(errorNr:=2);
    ELSIF ok3= 0 THEN
      giveAlarm(errorNr:=3);
    ELSIF ok4= 0 THEN
      giveAlarm(errorNr:=4);
    ELSIF ok5= 0 THEN
      giveAlarm(errorNr:=5);
    ELSIF ok6= 0 THEN
      giveAlarm(errorNr:=6);      
    END_IF;
  END_IF;

	output := releaseXWagon;

END_FUNCTION
