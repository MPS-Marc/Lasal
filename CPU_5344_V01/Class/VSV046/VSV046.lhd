<?xml version="1.0" encoding="utf-8"?>
<HWClassInfo>
  <HWDevice ModuleID="1082" SubModuleID="0" ModType="VARAN" Desc="5x VARAN Out" OrderNr="16-023-046">
    <Types>
      <Device Name="VSV046" ClassName="VSV046" DisplayGroup="Extension Modules;VARAN" />
    </Types>
    <VisualData>
      <VisualView TypeId="0">
        <VisualModule ImgPath=".\VARAN\VSV Grundmodul.xaml" Width="98.33" Height="80.33">
          <VisualTexts>
            <VisualText Text="X1 VARAN OUT" FontFamily="ARIAL" FontSize="11" ClrForeground="4278190080" Width="22.95" Height="3.73" Left="6.57" Top="20.37" ClrBackground="16777215" />
            <VisualText Text="X2 VARAN IN" FontFamily="ARIAL" FontSize="11" ClrForeground="4278190080" Width="22.95" Height="3.73" Left="4.97" Top="25.88" ClrBackground="16777215" />
            <VisualText Text="X3 VARAN OUT" FontFamily="ARIAL" FontSize="11" ClrForeground="4278190080" Width="22.95" Height="3.73" Left="36.42" Top="20.37" ClrBackground="16777215" />
            <VisualText Text="X4 VARAN OUT" FontFamily="ARIAL" FontSize="11" ClrForeground="4278190080" Width="22.95" Height="3.73" Left="36.42" Top="25.88" ClrBackground="16777215" />
            <VisualText Text="X5 VARAN OUT" FontFamily="ARIAL" FontSize="11" ClrForeground="4278190080" Width="22.95" Height="3.73" Left="67.87" Top="20.37" ClrBackground="16777215" />
            <VisualText Text="X6 VARAN OUT" FontFamily="ARIAL" FontSize="11" ClrForeground="4278190080" Width="22.95" Height="3.73" Left="67.87" Top="25.88" ClrBackground="16777215" />
            <VisualText Text="X7" FontFamily="ARIAL" FontSize="12" ClrForeground="4278190080" Width="6.61" Height="3.73" Left="9.7" Top="57.94" ClrBackground="16777215" />
            <VisualText Text="VSV 046" FontFamily="ARIAL" FontSize="12" ClrForeground="4278190080" Width="10.24" Height="7.21" Left="42.77" Top="68.35" ClrBackground="16777215" />
            <VisualText Text="DC OK +24V GND" FontFamily="ARIAL" ClrForeground="4278190080" Width="18.49" Height="3.02" Left="0.56" Top="76.23" ClrBackground="16777215" />
          </VisualTexts>
          <VisualConnectors>
            <VisualConnector ImgPath=".\Connectors\RJ45 mit Leds.xaml" Description="X1 Varan Out 1" Width="14" Height="17" Left="8.06" Top="4.1" Angle="270">
              <ConnectorPin Description="X1 Varan Out 1 " TypeId="3" DataString="VARAN::00" />
            </VisualConnector>
            <VisualConnector ImgPath=".\Connectors\RJ45 mit Leds.xaml" Description="X2 Varan In" Width="14" Height="17" Left="8.06" Top="30.78" Angle="270">
              <ConnectorPin Description="X2 Varan In" TypeId="2" DataString="VARAN::00" />
            </VisualConnector>
            <VisualConnector ImgPath=".\Connectors\RJ45 mit Leds.xaml" Description="X3 Varan Out 2" Width="14" Height="17" Left="39.51" Top="4.1" Angle="270">
              <ConnectorPin Description="X3 Varan Out 2" TypeId="3" DataString="VARAN::01" />
            </VisualConnector>
            <VisualConnector ImgPath=".\Connectors\RJ45 mit Leds.xaml" Description="X4 Varan Out 3" Width="14" Height="17" Left="39.51" Top="30.78" Angle="270">
              <ConnectorPin Description="X4 Varan Out 3" TypeId="3" DataString="VARAN::02" />
            </VisualConnector>
            <VisualConnector ImgPath=".\Connectors\RJ45 mit Leds.xaml" Description="X5 Varan Out 4" Width="14" Height="17" Left="70.96" Top="4.1" Angle="270">
              <ConnectorPin Description="X5 Varan Out 4" TypeId="3" DataString="VARAN::03" />
            </VisualConnector>
            <VisualConnector ImgPath=".\Connectors\RJ45 mit Leds.xaml" Description="X6 Varan Out 5" Width="14" Height="17" Left="70.96" Top="30.78" Angle="270">
              <ConnectorPin Description="X6 Varan Out 5" TypeId="3" DataString="VARAN::04" />
            </VisualConnector>
            <VisualConnector ImgPath=".\Connectors\2-poliger Phoenix Stecker RM3,5.xaml" Description="2-poliger Phoenix Stecker RM3,5.xaml" Angle="90" Width="12" Height="8" Left="8.75" Top="62.7">
              <ConnectorPin TypeId="0" Description="GND" />
              <ConnectorPin TypeId="0" Description="+24V" />
            </VisualConnector>
          </VisualConnectors>
          <!-- Leds -->
          <VisualLeds>
            <VisualLed ImgPath=".\C-DIAS\C-DIAS Led rund.xaml" Description="DC Ok" ClrForeground="1342242560" Width="3.97" Height="3.97" Left="2.81" Top="67.9">
              <Behaviour ClrForeground="4026597120">
                <Activator TypeId="4">
                  <Activator TypeId="1" Value="1" />
                  <Activator TypeId="3" DataString="VSV046.State" Value="0" />
                </Activator>
              </Behaviour>
            </VisualLed>
          </VisualLeds>
        </VisualModule>
      </VisualView>
    </VisualData>
  </HWDevice>
  <Class Name="VSV046" Path="ExtensionModules">
    <Uplink Name="VaranIn" BusType="VARAN" TransparentClient="Transparent" />
    <Downlink Name="VaranOut_0" BusType="VARAN" Port="0" />
    <Downlink Name="VaranOut_1" BusType="VARAN" Port="1" />
    <Downlink Name="VaranOut_2" BusType="VARAN" Port="2" />
    <Downlink Name="VaranOut_3" BusType="VARAN" Port="3" />
    <Downlink Name="VaranOut_4" BusType="VARAN" Port="4" />
    <!-- General Settings -->
    <Property Name="Required" Channel="Required" Editor="Combo:1=Module is required;0=Module is not required" />
    <Property Name="Serial Number Validation" Channel="SerNoValidation" Type="Digital" Desc="This server shows the actual state of the respective digital input.&#xD;&#xA;&#xD;&#xA;0 .. input is inactive&#xD;&#xA;1 .. input is active" Editor="Combo:0=Serial number of varan client does not matter; 1=Serial number of varan client has to  be validated, to use the module" />
    <Property Name="Transparent" Channel="Transparent" Desc="0=Object is used as VARAN client, 1=Object is not used as VARAN client" Editor="Combo:0=Object is used as VARAN client;1=Object is not used as VARAN client" />
    <Property Name="Realtime IP Mode" Channel="RealtimeIP_Mode" Editor="Combo: 0 = No RealtimeIp function; 1 = Data transfer over Sync + Offset (Server SyncOffset); 2 = Transfer with last byte written" Desc="0 .. No RealtimeIP function &#xD;&#xA;1 .. Data transfer over Sync + Offset (Server SyncOffset)&#xD;&#xA; 2 .. Transfer with last byte written&#xD;&#xA; As initial value!" />
    <Property Name="Don't Check Rx Destination MAC-Address" Channel="DontCheckRxDestMAC" Editor="Combo: 0 = Only packets with the MAC address of the VSV are accepted; 1 = All incoming packets are accepted" Desc="0 .. Only packets with the MAC address of the VSV are accepted &#xD;&#xA; 1 .. All incoming packets are accepted &#xD;&#xA; As initial value!" />
    <!-- <Property Name="TimeBase" Channel = "TimeBase" Type="Analog" Editor="EditNumber:Unsigned;Dec" Desc="Defines the period of time during which the Isochrone Varan data objects are transferred over the bus. This time must be a mutiple of the Varan ManagerTime."/> -->
    <!-- <Property Name="TimeBaseOffset" Channel="TimeBaseOffset" Type="Analog" Editor="EditNumber:Unsigned;Dec" Desc="Defines the offset within the TimeBase."/> -->
    <!-- General State -->
    <IOState Name="Online" Channel="Online" Desc="Shows the online state of the class.&#xD;&#xA;0..Not Online.&#xD;&#xA;1..Online" EditorColor="0=B(255,0,0);0=T(255,255,255)" />
    <IOState Name="State" Channel="State" Desc="This server shows the status of the hardware class. If the state is not equal than _ClassOK, an error has occurred " />
    <IOState Name="Release" Channel="Release" Format="V{5-12}.{1-4}" IsInfo="true" Type="Analog" Desc="FPGA - Version" />
    <IOState Name="Device Address" Channel="DeviceAddress" IsInfo="true" Desc="Device address of hardware module" Type="Analog" />
    <IOState Name="Vendor ID" Channel="VendorID" IsInfo="true" Desc="This server contains the vendor ID of the hardware module." Type="Analog" />
    <IOState Name="Device ID" Channel="DeviceID" IsInfo="true" Type="Analog" Desc="This server shows the device ID  of the hardware module" />
    <IOState Name="Serial Number" Channel="SerialNo" IsInfo="true" Type="Analog" Desc="Shows the Serial Number of the hardware module" />
    <IOState Name="Validate Serial Number" Channel="ValidateSerNo" Type="Analog" Desc="If the validation of the serial number is activated (SerNoValidation=1) &#xD;&#xA; The serial number of the actual module can be validated by writing to this server &#xD;&#xA;&#xD;&#xA; this server shows also the state of validation; &#xD;&#xA; -2, validation not activated &#xD;&#xA; -1.. no module validated on this position &#xD;&#xA; 0...module is not the validated one &#xD;&#xA; 1.. module is the validated one" />
    <IOState Name="Retry Counter" Channel="RetryCounter" Desc="Retry counter of varan module" Type="Analog" />
    <IOState Name="VARAN Protocol Version" Channel="ProtocolVersion" Format="V{13-16}{9-12}.{5-8}.{1-4}" IsInfo="true" Desc="Shows the VARAN Client Protocol version" />
    <!-- Module States -->
    <Output Name="Supply for Varan Out 0" Channel="SupplyVaranOut_0" IsConfig="true" Type="Digital" Desc="With this server, the power supply for the individual ports can be activated/deactivated by initializing a server with 0 or 1, or entering 0 or 1 in the server during the runtime." >
      <Property Name="Supply for Varan Out 0" Channel="SupplyVaranOut_0" Editor="Combo:0=Off;1=On" Type="Digital" Desc="With this server, the power supply for the individual ports can be activated/deactivated by initializing a server with 0 or 1, or entering 0 or 1 in the server during the runtime." />
    </Output>   
    <Output Name="Supply for Varan Out 1" Channel="SupplyVaranOut_1" IsConfig="true" Type="Digital" Desc="With this server, the power supply for the individual ports can be activated/deactivated by initializing a server with 0 or 1, or entering 0 or 1 in the server during the runtime." >
      <Property Name="Supply for Varan Out 1" Channel="SupplyVaranOut_1" Editor="Combo:0=Off;1=On" Type="Digital" Desc="With this server, the power supply for the individual ports can be activated/deactivated by initializing a server with 0 or 1, or entering 0 or 1 in the server during the runtime." />
    </Output>
    <Output Name="Supply for Varan Out 2" Channel="SupplyVaranOut_2" IsConfig="true" Type="Digital" Desc="With this server, the power supply for the individual ports can be activated/deactivated by initializing a server with 0 or 1, or entering 0 or 1 in the server during the runtime." >
      <Property Name="Supply for Varan Out 2" Channel="SupplyVaranOut_2" Editor="Combo:0=Off;1=On" Type="Digital" Desc="With this server, the power supply for the individual ports can be activated/deactivated by initializing a server with 0 or 1, or entering 0 or 1 in the server during the runtime." />
    </Output>
    <Output Name="Supply for Varan Out 3" Channel="SupplyVaranOut_3" IsConfig="true" Type="Digital" Desc="With this server, the power supply for the individual ports can be activated/deactivated by initializing a server with 0 or 1, or entering 0 or 1 in the server during the runtime." >
      <Property Name="Supply for Varan Out 3" Channel="SupplyVaranOut_3" Editor="Combo:0=Off;1=On" Type="Digital" Desc="With this server, the power supply for the individual ports can be activated/deactivated by initializing a server with 0 or 1, or entering 0 or 1 in the server during the runtime." />
    </Output>
    <Output Name="Supply for Varan Out 4" Channel="SupplyVaranOut_4" IsConfig="true" Type="Digital" Desc="With this server, the power supply for the individual ports can be activated/deactivated by initializing a server with 0 or 1, or entering 0 or 1 in the server during the runtime." >
      <Property Name="Supply for Varan Out 4" Channel="SupplyVaranOut_4" Editor="Combo:0=Off;1=On" Type="Digital" Desc="With this server, the power supply for the individual ports can be activated/deactivated by initializing a server with 0 or 1, or entering 0 or 1 in the server during the runtime." />
    </Output>
    <IOState Name="Realtime IP Link" Channel="RealtimeIP_Link" Type="Analog" Desc="Shows whether a device is connected to the RealtimeIP interface. &#xD;&#xA; 1..Real-time Ethernet is connected. &#xD;&#xA; 0..Real-time Ethernet is not connected" />
    <IOState Name="Sync Offset" Channel="SyncOffset" Type="Analog" Desc="Indicates at which time point in the VARAN cycle that real-time data is sent." />
    <IOState Name="Device MAC-Address" Channel="DeviceMACAddress" Type="Analog" Desc="The String server shows VSV MAC address specified in  the SPI Flash." />

    <Script Name="VSV046">
      <Parameter DisplayName="Cable Length" Name="CableLength" Type="Variable" Channel="CableLength" Desc="Length of cable connected to &quot;VARAN In&quot; [m]&#13;&#10;Is used for time duration calculation&#13;&#10;Default length 1m."  Editor="Range:0..100" DefValue="1" />
      <Parameter DisplayName="Transparent" Name="Transparent" Type="Client" Channel="Transparent" Desc="" />
      <Parameter DisplayName="Send Data Max Length" Name="SendDataMaxLength" Type="Variable" Channel="SendDataMaxLength" Desc="Maximum send length. Length as set by &quot;ConfigSendData()&quot;&#xD;&#xA;Maximum value is 1472" Editor="Range:0..1472" DefValue="0" />
      <Parameter DisplayName="Realtime IP Mode" Name="RealtimeIP_Mode" Type="Client" Channel="RealtimeIP_Mode" Desc="" />  
      <Code>

def compPre_VSV046(element, parameters):
  element ['result']['optional'] = []

def compPost_VSV046(element, parameters):  
  def ChecktimeVarankwargs():
    # Checks if kwargs is supported by the timeVaranx functions
    import inspect
    funcinfo = inspect.getcallargs(timeVaranRdDO, 1,2,3) # 1,2,3 fixed parameters, values don't matter 
    if funcinfo.has_key('kwargs') == False:
      return False
   
    funcinfo = inspect.getcallargs(timeVaranWrDO, 1,2,3) # 1,2,3 fixed parameters, values don't matter 
    if funcinfo.has_key('kwargs') == False:
      return False
    
    funcinfo = inspect.getcallargs(timeVaranRdWrDO, 1,2,3,4) # 1,2,3,4 fixed parameters, values don't matter 
    if funcinfo.has_key('kwargs') == False:
      return False
      
    return True
    
  def lotimeVaranRdDO(bkwargs, depth, bytes, cable, accessToCDIAS=False, **kwargs):
    # local version of timeVaranRdDO to check for compatibility
    if bkwargs == True:
      return timeVaranRdDO(depth, bytes, cable, accessToCDIAS, **kwargs)
    else:
      return timeVaranRdDO(depth, bytes, cable, accessToCDIAS)
  
  def lotimeVaranWrDO(bkwargs, depth, bytes, cable, accessToCDIAS=False, **kwargs):
    # local version of timeVaranRdDO to check for compatibility
    if bkwargs == True:
      return timeVaranWrDO(depth, bytes, cable, accessToCDIAS, **kwargs)
    else:
      return timeVaranWrDO(depth, bytes, cable, accessToCDIAS)
  
  bkwargs = ChecktimeVarankwargs()
  
  # Asy DO to switch supply
  element['result']['AsyTime'] += lotimeVaranWrDO(bkwargs, parameters['depth'], 1, parameters['cable'], parameters = parameters)
  element['result'] = memVaranWrDO(1, element, parameters)
  
  # ConfigSendData DOs  
  if operator.gt(element['options']['RealtimeIP_Mode'],0):
    if operator.gt(element['options']['SendDataMaxLength'],0):
      
      # MaxSendLength + sizeof(t_VSV_DataReceive.RXStatusReg) + sizeof(t_VSV_DataReceive.TXStatusRegister) + sizeof(t_VSV_DataReceive.RXFrameLength) + sizeof(t_ETHFrameHeader);       
      MaxFrameLength = element['options']['SendDataMaxLength'] + 1 + 1 + 2 + 14  
      
      if operator.gt(MaxFrameLength,128):      
        MaxFrameLength = (int((MaxFrameLength + 127)/128))*128  # Somthing to do with Long DOs
      
      element['result'] = memVaranRdDO(MaxFrameLength, element, parameters)
      element['result'] = memVaranWrDO(MaxFrameLength, element, parameters)
      
      if parameters['SplitRdWr'] == 0:
        bytesLeft = MaxFrameLength
        while operator.gt(bytesLeft, 0):
          if operator.gt(bytesLeft,128):
            element['result']['IsoTime'] += lotimeVaranWrDO(bkwargs, parameters['depth'], 128, parameters['cable'], parameters = parameters)
            element['result']['IsoTime'] += lotimeVaranRdDO(bkwargs, parameters['depth'], 128, parameters['cable'], parameters = parameters)
            bytesLeft -= 128
          else:
            element['result']['IsoTime'] += lotimeVaranWrDO(bkwargs, parameters['depth'], bytesLeft, parameters['cable'], parameters = parameters)
            element['result']['IsoTime'] += lotimeVaranRdDO(bkwargs, parameters['depth'], bytesLeft, parameters['cable'], parameters = parameters)
            bytesLeft = 0
      else:
        bytesLeft = MaxFrameLength
        while operator.gt(bytesLeft, 0):
          if operator.gt(bytesLeft,128):
            element['result']['IsoTimeRd'] += lotimeVaranWrDO(bkwargs, parameters['depth'], 128, parameters['cable'], parameters = parameters)
            element['result']['IsoTimeWr'] += lotimeVaranRdDO(bkwargs, parameters['depth'], 128, parameters['cable'], parameters = parameters)
            bytesLeft -= 128
          else:
            element['result']['IsoTimeRd'] += lotimeVaranWrDO(bkwargs, parameters['depth'], bytesLeft, parameters['cable'], parameters = parameters)
            element['result']['IsoTimeWr'] += lotimeVaranRdDO(bkwargs, parameters['depth'], bytesLeft, parameters['cable'], parameters = parameters)
            bytesLeft = 0
    
</Code>
    </Script>
  </Class>
</HWClassInfo>