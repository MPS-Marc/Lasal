//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "Bit2ByteConversion_outputs"
	Revision           = "0.1"
	GUID               = "{E43DBAEB-B8AD-40CB-BA8C-9176D2B7FFF7}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(390,2040)">
	<Channels>
		<Server Name="Bit1" GUID="{923DCB63-6882-4E48-9873-C61416E4AB60}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="Bit10" GUID="{73D9C0E9-D2FB-4466-80B2-ABBC5DA8D374}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="Bit11" GUID="{B6218736-1EC2-47B2-9D71-43B584F526EB}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="Bit12" GUID="{90DC5C9A-19E3-4866-B1B9-5D18C6E0A9E6}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="Bit13" GUID="{BB5A563A-0C3A-4068-8E03-25EB11DE164F}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="Bit14" GUID="{5D3C39A5-0D52-4CAF-8903-86CA68E3E410}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="Bit15" GUID="{5C6938FC-7D63-4E81-9487-6A9B6A01C3FD}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="Bit16" GUID="{0420CF1E-D4E4-421C-8C8E-CBF04132AC11}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="Bit17" GUID="{E93DCAD4-23F7-4968-A457-528FBBC5D3E1}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="Bit18" GUID="{5ED06E6F-5BC1-43A1-8534-7D9BE19D29F8}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="Bit19" GUID="{758A1FBA-4AAD-40B5-BD53-DDED0272F1EA}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="Bit2" GUID="{68883BE7-C43C-4B0E-BC95-95E8386AD035}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="Bit20" GUID="{85744740-B547-4787-B8C3-214F58006E63}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="Bit21" GUID="{59B9A016-1EBF-4661-8AF0-FF7781FBCECC}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="Bit22" GUID="{A8989A4B-182F-4B14-AC92-0DA8EEED1610}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="Bit23" GUID="{86A3CF33-9F5F-4102-9E80-04C59FFDC3FB}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="Bit24" GUID="{2769B759-0F3B-4B1F-B55F-E8652716E054}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="Bit25" GUID="{BE23D7F5-30A2-4F82-89F7-71CB1E3BD655}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="Bit26" GUID="{066B0DAD-8F8C-43BE-A94B-91B1CF5CE5ED}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="Bit27" GUID="{707FCE0F-CB45-49C5-BE2D-C4D54834092C}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="Bit28" GUID="{0F6E753B-2303-484D-B1A5-5224D64E9C3D}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="Bit29" GUID="{ADDDA8CD-42A7-41B0-AA01-92E8AB3146AC}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="Bit3" GUID="{80E78064-B020-4A67-B059-9CC108E056A7}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="Bit30" GUID="{EFD564F5-1427-4998-BA81-C8E3EDB709B9}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="Bit31" GUID="{00E687D7-E8D7-4B62-974F-97BEE043AE92}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="Bit32" GUID="{EDC81C59-73ED-47E2-9602-9BBEECDDA604}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="Bit4" GUID="{5B320ED7-1135-4863-B562-FE28E175CE5B}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="Bit5" GUID="{447AA43E-B82E-4685-B365-23704813173C}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="Bit6" GUID="{276D1D29-8ACB-494F-B9AE-6698D7854FC5}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="Bit7" GUID="{C939002D-BDE8-4BA4-91C0-617A14987B8E}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="Bit8" GUID="{079EA59F-F98B-4EC5-B6DA-3C1ADE661683}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="Bit9" GUID="{83D2C625-9265-4D3E-955D-1D4D38682740}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="BitValue" GUID="{EF1E3869-88E7-408B-964C-88E8CFEDE4C9}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Client Name="BValue" Required="false" Internal="false"/>
	</Channels>
	<RevDoku>
		<Owner Company="Intecon" Author="Richard Fierkens"/>
		<Dokumentation Revision="0.1" Date="2011-12-28" Author="Richard Fierkens" Company="Intecon" Description="Write timedelay is removed.&#13;&#10;Read timedelay is set to 10mSec."/>
		<Dokumentation Revision="0.0" Date="2011-12-27" Author="Johan Embregts" Company="SigmaControl" Description="Created."/>
	</RevDoku>
</Class>
*)
Bit2ByteConversion_outputs : CLASS
  //Servers:
	BitValue 	: SvrChCmd_BDINT;
	Bit1 	: SvrCh_DINT;
	Bit2 	: SvrCh_DINT;
	Bit3 	: SvrCh_DINT;
	Bit4 	: SvrCh_DINT;
	Bit5 	: SvrCh_DINT;
	Bit6 	: SvrCh_DINT;
	Bit7 	: SvrCh_DINT;
	Bit8 	: SvrCh_DINT;
	Bit9 	: SvrCh_DINT;
	Bit10 	: SvrCh_DINT;
	Bit11 	: SvrCh_DINT;
	Bit12 	: SvrCh_DINT;
	Bit13 	: SvrCh_DINT;
	Bit14 	: SvrCh_DINT;
	Bit15 	: SvrCh_DINT;
	Bit16 	: SvrCh_DINT;
	Bit17 	: SvrCh_DINT;
	Bit18 	: SvrCh_DINT;
	Bit19 	: SvrCh_DINT;
	Bit20 	: SvrCh_DINT;
	Bit21 	: SvrCh_DINT;
	Bit22 	: SvrCh_DINT;
	Bit23 	: SvrCh_DINT;
	Bit24 	: SvrCh_DINT;
	Bit25 	: SvrCh_DINT;
	Bit26 	: SvrCh_DINT;
	Bit27 	: SvrCh_DINT;
	Bit28 	: SvrCh_DINT;
	Bit29 	: SvrCh_DINT;
	Bit30 	: SvrCh_DINT;
	Bit31 	: SvrCh_DINT;
	Bit32 	: SvrCh_DINT;
  //Clients:
	BValue 	: CltCh_BDINT;
  //Variables:
		tMark 	: UDINT;
  //Functions:
	
	FUNCTION VIRTUAL ReadMe;
	
	FUNCTION VIRTUAL WriteMe;
	
	FUNCTION VIRTUAL GLOBAL Bit1::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Bit1::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Bit2::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Bit2::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Bit3::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Bit3::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Bit4::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Bit4::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Bit5::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Bit5::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Bit6::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Bit6::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Bit7::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Bit7::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Bit8::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Bit8::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Bit9::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Bit9::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Bit10::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Bit10::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Bit11::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Bit11::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Bit12::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Bit12::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Bit13::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Bit13::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Bit14::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Bit14::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Bit15::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Bit15::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Bit16::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Bit16::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Bit17::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Bit17::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Bit18::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Bit18::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Bit19::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Bit19::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Bit20::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Bit20::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Bit21::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Bit21::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Bit22::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Bit22::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Bit23::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Bit23::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Bit24::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Bit24::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Bit25::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Bit25::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Bit26::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Bit26::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Bit27::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Bit27::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Bit28::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Bit28::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Bit29::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Bit29::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Bit30::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Bit30::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Bit31::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Bit31::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Bit32::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Bit32::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

//}}LSL_DECLARATION


FUNCTION GLOBAL TAB Bit2ByteConversion_outputs::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_BIT2BYTECONVERSION_OUTPUTS
0$UINT, 1$UINT, (SIZEOF(::Bit2ByteConversion_outputs))$UINT, 
33$UINT, 1$UINT, 0$UINT, 
TO_UDINT(3821298422), "Bit2ByteConversion_outputs", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::Bit2ByteConversion_outputs.BitValue.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(1679232299), "BitValue", 
(::Bit2ByteConversion_outputs.Bit1.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3759890831), "Bit1", 
(::Bit2ByteConversion_outputs.Bit2.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2031235125), "Bit2", 
(::Bit2ByteConversion_outputs.Bit3.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(236257443), "Bit3", 
(::Bit2ByteConversion_outputs.Bit4.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2423362816), "Bit4", 
(::Bit2ByteConversion_outputs.Bit5.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3883312534), "Bit5", 
(::Bit2ByteConversion_outputs.Bit6.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2122314796), "Bit6", 
(::Bit2ByteConversion_outputs.Bit7.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(158909626), "Bit7", 
(::Bit2ByteConversion_outputs.Bit8.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2580011307), "Bit8", 
(::Bit2ByteConversion_outputs.Bit9.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(4005620157), "Bit9", 
(::Bit2ByteConversion_outputs.Bit10.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2302434033), "Bit10", 
(::Bit2ByteConversion_outputs.Bit11.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(4265306727), "Bit11", 
(::Bit2ByteConversion_outputs.Bit12.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1731345373), "Bit12", 
(::Bit2ByteConversion_outputs.Bit13.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(271911755), "Bit13", 
(::Bit2ByteConversion_outputs.Bit14.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2387713768), "Bit14", 
(::Bit2ByteConversion_outputs.Bit15.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(4183207550), "Bit15", 
(::Bit2ByteConversion_outputs.Bit16.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1616904132), "Bit16", 
(::Bit2ByteConversion_outputs.Bit17.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(391696210), "Bit17", 
(::Bit2ByteConversion_outputs.Bit18.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2280116931), "Bit18", 
(::Bit2ByteConversion_outputs.Bit19.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(4041269845), "Bit19", 
(::Bit2ByteConversion_outputs.Bit20.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2719025458), "Bit20", 
(::Bit2ByteConversion_outputs.Bit21.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3575003556), "Bit21", 
(::Bit2ByteConversion_outputs.Bit22.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1277126686), "Bit22", 
(::Bit2ByteConversion_outputs.Bit23.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(991451272), "Bit23", 
(::Bit2ByteConversion_outputs.Bit24.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2776419627), "Bit24", 
(::Bit2ByteConversion_outputs.Bit25.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3531341245), "Bit25", 
(::Bit2ByteConversion_outputs.Bit26.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1265806343), "Bit26", 
(::Bit2ByteConversion_outputs.Bit27.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1014340753), "Bit27", 
(::Bit2ByteConversion_outputs.Bit28.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2898952448), "Bit28", 
(::Bit2ByteConversion_outputs.Bit29.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3687690646), "Bit29", 
(::Bit2ByteConversion_outputs.Bit30.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3138009203), "Bit30", 
(::Bit2ByteConversion_outputs.Bit31.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3423406309), "Bit31", 
(::Bit2ByteConversion_outputs.Bit32.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1426348383), "Bit32", 
//Clients:
(::Bit2ByteConversion_outputs.BValue.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(3746785117), "BValue", 
END_FUNCTION


#define USER_CNT_Bit2ByteConversion_outputs 2

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_Bit2ByteConversion_outputs] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION Bit2ByteConversion_outputs::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT_Bit2ByteConversion_outputs, pCmd := #vmt.CmdTable);
#pragma warning (disable : 74)
	vmt.UserFcts[0]		:= #ReadMe();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[1]		:= #WriteMe();

#pragma warning (default : 74)
	BitValue.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF BitValue.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Bit1.pMeth			:= StoreMethod( #Bit1::Read(), #Bit1::Write() );
	IF Bit1.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Bit2.pMeth			:= StoreMethod( #Bit2::Read(), #Bit2::Write() );
	IF Bit2.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Bit3.pMeth			:= StoreMethod( #Bit3::Read(), #Bit3::Write() );
	IF Bit3.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Bit4.pMeth			:= StoreMethod( #Bit4::Read(), #Bit4::Write() );
	IF Bit4.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Bit5.pMeth			:= StoreMethod( #Bit5::Read(), #Bit5::Write() );
	IF Bit5.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Bit6.pMeth			:= StoreMethod( #Bit6::Read(), #Bit6::Write() );
	IF Bit6.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Bit7.pMeth			:= StoreMethod( #Bit7::Read(), #Bit7::Write() );
	IF Bit7.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Bit8.pMeth			:= StoreMethod( #Bit8::Read(), #Bit8::Write() );
	IF Bit8.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Bit9.pMeth			:= StoreMethod( #Bit9::Read(), #Bit9::Write() );
	IF Bit9.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Bit10.pMeth			:= StoreMethod( #Bit10::Read(), #Bit10::Write() );
	IF Bit10.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Bit11.pMeth			:= StoreMethod( #Bit11::Read(), #Bit11::Write() );
	IF Bit11.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Bit12.pMeth			:= StoreMethod( #Bit12::Read(), #Bit12::Write() );
	IF Bit12.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Bit13.pMeth			:= StoreMethod( #Bit13::Read(), #Bit13::Write() );
	IF Bit13.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Bit14.pMeth			:= StoreMethod( #Bit14::Read(), #Bit14::Write() );
	IF Bit14.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Bit15.pMeth			:= StoreMethod( #Bit15::Read(), #Bit15::Write() );
	IF Bit15.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Bit16.pMeth			:= StoreMethod( #Bit16::Read(), #Bit16::Write() );
	IF Bit16.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Bit17.pMeth			:= StoreMethod( #Bit17::Read(), #Bit17::Write() );
	IF Bit17.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Bit18.pMeth			:= StoreMethod( #Bit18::Read(), #Bit18::Write() );
	IF Bit18.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Bit19.pMeth			:= StoreMethod( #Bit19::Read(), #Bit19::Write() );
	IF Bit19.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Bit20.pMeth			:= StoreMethod( #Bit20::Read(), #Bit20::Write() );
	IF Bit20.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Bit21.pMeth			:= StoreMethod( #Bit21::Read(), #Bit21::Write() );
	IF Bit21.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Bit22.pMeth			:= StoreMethod( #Bit22::Read(), #Bit22::Write() );
	IF Bit22.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Bit23.pMeth			:= StoreMethod( #Bit23::Read(), #Bit23::Write() );
	IF Bit23.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Bit24.pMeth			:= StoreMethod( #Bit24::Read(), #Bit24::Write() );
	IF Bit24.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Bit25.pMeth			:= StoreMethod( #Bit25::Read(), #Bit25::Write() );
	IF Bit25.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Bit26.pMeth			:= StoreMethod( #Bit26::Read(), #Bit26::Write() );
	IF Bit26.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Bit27.pMeth			:= StoreMethod( #Bit27::Read(), #Bit27::Write() );
	IF Bit27.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Bit28.pMeth			:= StoreMethod( #Bit28::Read(), #Bit28::Write() );
	IF Bit28.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Bit29.pMeth			:= StoreMethod( #Bit29::Read(), #Bit29::Write() );
	IF Bit29.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Bit30.pMeth			:= StoreMethod( #Bit30::Read(), #Bit30::Write() );
	IF Bit30.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Bit31.pMeth			:= StoreMethod( #Bit31::Read(), #Bit31::Write() );
	IF Bit31.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Bit32.pMeth			:= StoreMethod( #Bit32::Read(), #Bit32::Write() );
	IF Bit32.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION


#define cMaxUpdateTime  10 // mSec


FUNCTION VIRTUAL GLOBAL Bit2ByteConversion_outputs::Bit1::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

  ReadMe();
	output := Bit1;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Bit2ByteConversion_outputs::Bit2::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

  ReadMe();
	output := Bit2;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Bit2ByteConversion_outputs::Bit3::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

  ReadMe();
	output := Bit3;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Bit2ByteConversion_outputs::Bit4::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

  ReadMe();
	output := Bit4;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Bit2ByteConversion_outputs::Bit5::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

  ReadMe();
	output := Bit5;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Bit2ByteConversion_outputs::Bit6::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

  ReadMe();
	output := Bit6;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Bit2ByteConversion_outputs::Bit7::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

  ReadMe();
	output := Bit7;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Bit2ByteConversion_outputs::Bit8::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

  ReadMe();
	output := Bit8;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Bit2ByteConversion_outputs::Bit9::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

  ReadMe();
	output := Bit9;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Bit2ByteConversion_outputs::Bit10::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

  ReadMe();
	output := Bit10;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Bit2ByteConversion_outputs::Bit11::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

  ReadMe();
	output := Bit11;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Bit2ByteConversion_outputs::Bit12::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

  ReadMe();
	output := Bit12;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Bit2ByteConversion_outputs::Bit13::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

  ReadMe();
	output := Bit13;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Bit2ByteConversion_outputs::Bit14::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

  ReadMe();
	output := Bit14;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Bit2ByteConversion_outputs::Bit15::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

  ReadMe();
	output := Bit15;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Bit2ByteConversion_outputs::Bit16::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

  ReadMe();
	output := Bit16;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Bit2ByteConversion_outputs::Bit17::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

  ReadMe();
	output := Bit17;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Bit2ByteConversion_outputs::Bit18::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

  ReadMe();
	output := Bit18;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Bit2ByteConversion_outputs::Bit19::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

  ReadMe();
	output := Bit19;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Bit2ByteConversion_outputs::Bit20::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

  ReadMe();
	output := Bit20;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Bit2ByteConversion_outputs::Bit21::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

  ReadMe();
	output := Bit21;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Bit2ByteConversion_outputs::Bit22::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

  ReadMe();
	output := Bit22;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Bit2ByteConversion_outputs::Bit23::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

  ReadMe();
	output := Bit23;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Bit2ByteConversion_outputs::Bit24::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

  ReadMe();
	output := Bit24;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Bit2ByteConversion_outputs::Bit25::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

  ReadMe();
	output := Bit25;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Bit2ByteConversion_outputs::Bit26::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

  ReadMe();
	output := Bit26;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Bit2ByteConversion_outputs::Bit27::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

  ReadMe();
	output := Bit27;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Bit2ByteConversion_outputs::Bit28::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

  ReadMe();
	output := Bit28;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Bit2ByteConversion_outputs::Bit29::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

  ReadMe();
	output := Bit29;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Bit2ByteConversion_outputs::Bit30::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

  ReadMe();
	output := Bit30;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Bit2ByteConversion_outputs::Bit31::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

  ReadMe();
	output := Bit31;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Bit2ByteConversion_outputs::Bit32::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

  ReadMe();
	output := Bit32;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Bit2ByteConversion_outputs::Bit1::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

  Bit1 := input and 2#1;
	BValue.1 := to_Bool( Bit1);
  WriteMe();
 	result := Bit1;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Bit2ByteConversion_outputs::Bit2::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR
  
  Bit2 := input and 2#1;
	BValue.2 := to_Bool( Bit2);
  WriteMe();
 	result := Bit2;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Bit2ByteConversion_outputs::Bit3::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

  Bit3 := input and 2#1;
	BValue.3 := to_Bool( Bit3);
  WriteMe();
 	result := Bit3;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Bit2ByteConversion_outputs::Bit4::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR
  
  Bit4 := input and 2#1;
	BValue.4 := to_Bool( Bit4);
  WriteMe();
 	result := Bit4;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Bit2ByteConversion_outputs::Bit5::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR
  
  Bit5 := input and 2#1;
	BValue.5 := to_Bool( Bit5);
  WriteMe();
 	result := Bit5;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Bit2ByteConversion_outputs::Bit6::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR
  
  Bit6 := input and 2#1;
	BValue.6 := to_Bool( Bit6);
  WriteMe();
 	result := Bit6;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Bit2ByteConversion_outputs::Bit7::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR
  
  Bit7 := input and 2#1;
	BValue.7 := to_Bool( Bit7);
  WriteMe();
 	result := Bit7;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Bit2ByteConversion_outputs::Bit8::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR
  
  Bit8 := input and 2#1;
	BValue.8 := to_Bool( Bit8);
  WriteMe();
 	result := Bit8;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Bit2ByteConversion_outputs::Bit9::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR
  
  Bit9 := input and 2#1;
	BValue.9 := to_Bool( Bit9);
  WriteMe();
 	result := Bit9;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Bit2ByteConversion_outputs::Bit10::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR
  
  Bit10 := input and 2#1;
	BValue.10 := to_Bool( Bit10);
  WriteMe();
 	result := Bit10;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Bit2ByteConversion_outputs::Bit11::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

  Bit11 := input and 2#1;
	BValue.11 := to_Bool( Bit11);
  WriteMe();
 	result := Bit11;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Bit2ByteConversion_outputs::Bit12::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

  Bit12 := input and 2#1;
	BValue.12 := to_Bool( Bit12);
  WriteMe();
 	result := Bit12;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Bit2ByteConversion_outputs::Bit13::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

  Bit13 := input and 2#1;
	BValue.13 := to_Bool( Bit13);
  WriteMe();
 	result := Bit13;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Bit2ByteConversion_outputs::Bit14::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

  Bit14 := input and 2#1;
	BValue.14 := to_Bool( Bit14);
  WriteMe();
 	result := Bit14;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Bit2ByteConversion_outputs::Bit15::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

  Bit15 := input and 2#1;
	BValue.15 := to_Bool( Bit15);
  WriteMe();
 	result := Bit15;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Bit2ByteConversion_outputs::Bit16::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

  Bit16 := input and 2#1;
	BValue.16 := to_Bool( Bit16);
  WriteMe();
 	result := Bit16;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Bit2ByteConversion_outputs::Bit17::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

  Bit17 := input and 2#1;
	BValue.17 := to_Bool( Bit17);
  WriteMe();
 	result := Bit17;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Bit2ByteConversion_outputs::Bit18::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

  Bit18 := input and 2#1;
	BValue.18 := to_Bool( Bit18);
  WriteMe();
 	result := Bit18;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Bit2ByteConversion_outputs::Bit19::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

  Bit19 := input and 2#1;
	BValue.19 := to_Bool( Bit19);
  WriteMe();
 	result := Bit19;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Bit2ByteConversion_outputs::Bit20::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR
  
  Bit20 := input and 2#1;
	BValue.20 := to_Bool( Bit20);
  WriteMe();
 	result := Bit20;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Bit2ByteConversion_outputs::Bit21::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR
  
  Bit21 := input and 2#1;
	BValue.21 := to_Bool( Bit21);
  WriteMe();
 	result := Bit21;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Bit2ByteConversion_outputs::Bit22::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR
  
  Bit22 := input and 2#1;
	BValue.22 := to_Bool( Bit22);
  WriteMe();
 	result := Bit22;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Bit2ByteConversion_outputs::Bit23::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR
  
  Bit23 := input and 2#1;
	BValue.23 := to_Bool( Bit23);
  WriteMe();
 	result := Bit23;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Bit2ByteConversion_outputs::Bit24::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR
  
  Bit24 := input and 2#1;
	BValue.24 := to_Bool( Bit24);
  WriteMe();
 	result := Bit24;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Bit2ByteConversion_outputs::Bit25::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR
  
  Bit25 := input and 2#1;
	BValue.25 := to_Bool( Bit25);
  WriteMe();
 	result := Bit25;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Bit2ByteConversion_outputs::Bit26::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR
  
  Bit26 := input and 2#1;
	BValue.26 := to_Bool( Bit26);
  WriteMe();
 	result := Bit26;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Bit2ByteConversion_outputs::Bit27::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR
  
  Bit27 := input and 2#1;
	BValue.27 := to_Bool( Bit27);
  WriteMe();
 	result := Bit27;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Bit2ByteConversion_outputs::Bit28::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR
  
  Bit28 := input and 2#1;
	BValue.28 := to_Bool( Bit28);
  WriteMe();
 	result := Bit28;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Bit2ByteConversion_outputs::Bit29::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR
  
  Bit29 := input and 2#1;
	BValue.29 := to_Bool( Bit29);
  WriteMe();
 	result := Bit29;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Bit2ByteConversion_outputs::Bit30::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR
  
  Bit30 := input and 2#1;
	BValue.30 := to_Bool( Bit30);
  WriteMe();
 	result := Bit30;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Bit2ByteConversion_outputs::Bit31::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR
  
  Bit31 := input and 2#1;
	BValue.31 := to_Bool( Bit31);
  WriteMe();
 	result := Bit31;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Bit2ByteConversion_outputs::Bit32::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR
  
  Bit32 := input and 2#1;
	BValue.32 := to_Bool( Bit32);
  WriteMe();
 	result := Bit32;

END_FUNCTION


FUNCTION VIRTUAL Bit2ByteConversion_outputs::ReadMe

  if ops.tAbsolute- tMark> cMaxUpdateTime then
    BitValue  := BValue := BValue.Read();
    Bit1  := BValue.1;
    Bit2  := BValue.2;
    Bit3  := BValue.3;
    Bit4  := BValue.4;
    Bit5  := BValue.5;
    Bit6  := BValue.6;
    Bit7  := BValue.7;
    Bit8  := BValue.8;
    Bit9  := BValue.9;
    Bit10 := BValue.10;
    Bit11 := BValue.11;
    Bit12 := BValue.12;
    Bit13 := BValue.13;
    Bit14 := BValue.14;
    Bit15 := BValue.15;
    Bit16 := BValue.16;
    Bit17 := BValue.17;
    Bit18 := BValue.18;
    Bit19 := BValue.19;
    Bit20 := BValue.20;
    Bit21 := BValue.21;
    Bit22 := BValue.22;
    Bit23 := BValue.23;
    Bit24 := BValue.24;
    Bit25 := BValue.25;
    Bit26 := BValue.26;
    Bit27 := BValue.27;
    Bit28 := BValue.28;
    Bit29 := BValue.29;
    Bit30 := BValue.30;
    Bit31 := BValue.31;
    Bit32 := BValue.32;
    tMark := ops.tAbsolute;
  end_if;

END_FUNCTION


FUNCTION VIRTUAL Bit2ByteConversion_outputs::WriteMe

 // if ops.tAbsolute- tMark> cMaxUpdateTime then
    BitValue  := to_Udint( BValue.Write( BValue));
    tMark := ops.tAbsolute;
 // end_if;

END_FUNCTION
