//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "CheckCanState"
	Revision           = "0.0"
	GUID               = "{EF5F1E71-5101-4E96-ADB7-2915CD9E0E22}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(394,120)">
	<Channels>
		<Server Name="ClassSvr" GUID="{63C47DC5-22B1-4C0F-9B02-EA8299443A51}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Client Name="CanControl1" Required="false" Internal="false"/>
		<Client Name="CanControl2" Required="false" Internal="false"/>
		<Client Name="CanControl3" Required="false" Internal="false"/>
		<Client Name="CanControl4" Required="false" Internal="false"/>
	</Channels>
</Class>
*)
CheckCanState : CLASS
  //Servers:
	ClassSvr 	: SvrChCmd_DINT;
  //Clients:
	CanControl1 	: CltCh_DINT;
	CanControl2 	: CltCh_DINT;
	CanControl3 	: CltCh_DINT;
	CanControl4 	: CltCh_DINT;
  //Variables:
		conCan1 	: DINT;
		conCan2 	: DINT;
		conCan3 	: DINT;
		conCan4 	: DINT;
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL Init;
	
	FUNCTION VIRTUAL GLOBAL ClassSvr::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

//}}LSL_DECLARATION


FUNCTION GLOBAL TAB CheckCanState::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_CHECKCANSTATE
0$UINT, 0$UINT, (SIZEOF(::CheckCanState))$UINT, 
1$UINT, 4$UINT, 0$UINT, 
TO_UDINT(1439750580), "CheckCanState", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::CheckCanState.ClassSvr.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(619352855), "ClassSvr", 
//Clients:
(::CheckCanState.CanControl1.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(3108353383), "CanControl1", 
(::CheckCanState.CanControl2.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(541910237), "CanControl2", 
(::CheckCanState.CanControl3.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(1464587339), "CanControl3", 
(::CheckCanState.CanControl4.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(3375317480), "CanControl4", 
END_FUNCTION


#define USER_CNT_CheckCanState 0

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_CheckCanState] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION CheckCanState::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT_CheckCanState, pCmd := #vmt.CmdTable);
	vmt.CmdTable.Read		:= #Read();
	vmt.CmdTable.Init		:= #Init();
	ClassSvr.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF ClassSvr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION


FUNCTION VIRTUAL GLOBAL CheckCanState::Init

conCan1 := IsClientConnected(input:=#CanControl1);
conCan2 := IsClientConnected(input:=#CanControl2);
conCan3 := IsClientConnected(input:=#CanControl3);
conCan4 := IsClientConnected(input:=#CanControl4);

END_FUNCTION


FUNCTION VIRTUAL GLOBAL CheckCanState::ClassSvr::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR
  
  CanControl1 := CanControl1.Read();
  CanControl2 := CanControl2.Read();
  CanControl3 := CanControl3.Read();
  CanControl4 := CanControl4.Read();
  
  
  ClassSvr := TRUE;
  
  
  
  
  if conCan1 = TRUE & CanControl1 <> 1 then
    ClassSvr := FALSE;
  end_if;
    
  if conCan2 = TRUE & CanControl2 <> 1 then
    ClassSvr := FALSE;
  end_if;
    
  if conCan3 = TRUE & CanControl3 <> 1 then
    ClassSvr := FALSE;
  end_if;
    
  if conCan4 = TRUE & CanControl4 <> 1 then
    ClassSvr := FALSE;
  end_if;
  


	output := ClassSvr;

END_FUNCTION


