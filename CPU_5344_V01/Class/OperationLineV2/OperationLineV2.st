//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "OperationLineV2"
	Revision           = "0.0"
	GUID               = "{F33878C1-0CDA-49E8-8BBC-B6C7B1401CA4}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(390,360)">
	<Channels>
		<Server Name="amount" GUID="{A71893A8-D856-4B2D-BB0B-0FD9E0083144}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="ClassSvr" GUID="{71918885-8162-4263-B528-ED2F6F4178E4}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="operationId" GUID="{1ECC3FB4-36A7-47FE-8A60-7574C071B4A3}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="operationType" GUID="{F20CF7A2-1510-40E0-BC71-8E0385E91BCB}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="pitch" GUID="{2BE8826D-2DBA-4189-A77B-4D4283F7E736}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="rnr" GUID="{6C3FEA3D-CC99-4099-A8D0-FC6220277FF1}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="xPos" GUID="{425C0A19-8305-47CD-A87F-284691379D34}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="yPos" GUID="{CF6E2532-6200-4A6D-B45C-18FF12098FCB}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="zPos" GUID="{218F59EB-FAFC-4351-B29D-CD4FE46AEB50}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
	</Channels>
</Class>
*)
OperationLineV2 : CLASS
  //Servers:
	ClassSvr 	: SvrChCmd_DINT;
	rnr 	: SvrCh_DINT;
	xPos 	: SvrCh_DINT;
	yPos 	: SvrCh_DINT;
	zPos 	: SvrCh_DINT;
	amount 	: SvrCh_DINT;
	pitch 	: SvrCh_DINT;
	operationType 	: SvrCh_DINT;
	operationId 	: SvrCh_DINT;
  //Clients:
  //Variables:
		ptr 	: ^ProductsDbV2::tRecipeLine;
		ptrHeigth 	: ^DINT;
		useHeigth 	: DINT;
  //Functions:
	
	FUNCTION GLOBAL WritePtr
		VAR_INPUT
			iPtr 	: ^ProductsDbV2::tRecipeLine;
			iPtrProdHeigth 	: ^DINT;
			iUseHeigth 	: DINT;
		END_VAR;
	
	FUNCTION WriteServers;
	
	FUNCTION VIRTUAL GLOBAL xPos::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL yPos::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL zPos::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL amount::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL pitch::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL operationType::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL operationId::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

//}}LSL_DECLARATION


FUNCTION GLOBAL TAB OperationLineV2::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_OPERATIONLINEV2
0$UINT, 0$UINT, (SIZEOF(::OperationLineV2))$UINT, 
9$UINT, 0$UINT, 0$UINT, 
TO_UDINT(723330765), "OperationLineV2", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::OperationLineV2.ClassSvr.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(619352855), "ClassSvr", 
(::OperationLineV2.rnr.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2078699935), "rnr", 
(::OperationLineV2.xPos.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3334636901), "xPos", 
(::OperationLineV2.yPos.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2122244608), "yPos", 
(::OperationLineV2.zPos.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1825263086), "zPos", 
(::OperationLineV2.amount.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2119808964), "amount", 
(::OperationLineV2.pitch.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3502996585), "pitch", 
(::OperationLineV2.operationType.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(4174928394), "operationType", 
(::OperationLineV2.operationId.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3722247950), "operationId", 
//Clients:
END_FUNCTION


#define USER_CNT_OperationLineV2 0

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_OperationLineV2] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION OperationLineV2::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT_OperationLineV2, pCmd := #vmt.CmdTable);
	ClassSvr.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF ClassSvr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	rnr.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF rnr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	xPos.pMeth			:= StoreMethod( #M_RD_DIRECT(), #xPos::Write() );
	IF xPos.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	yPos.pMeth			:= StoreMethod( #M_RD_DIRECT(), #yPos::Write() );
	IF yPos.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	zPos.pMeth			:= StoreMethod( #M_RD_DIRECT(), #zPos::Write() );
	IF zPos.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	amount.pMeth			:= StoreMethod( #M_RD_DIRECT(), #amount::Write() );
	IF amount.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	pitch.pMeth			:= StoreMethod( #M_RD_DIRECT(), #pitch::Write() );
	IF pitch.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	operationType.pMeth			:= StoreMethod( #M_RD_DIRECT(), #operationType::Write() );
	IF operationType.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	operationId.pMeth			:= StoreMethod( #M_RD_DIRECT(), #operationId::Write() );
	IF operationId.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION


FUNCTION VIRTUAL GLOBAL OperationLineV2::xPos::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

  if ptr <> NIL then
    xPos := input;
    ptr^.xpos := xPos;
    IF useHeigth= 1 THEN //method to always write y pos to half width
      zPos.Write(input:=ptrHeigth^/2);
    END_IF;
    result := xPos;
  else
    result := ACCESS_DENIED;
  end_if;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL OperationLineV2::yPos::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

  
  if ptr <> NIL then
    yPos := input;
    ptr^.ypos := yPos;
    result := yPos;
  else
    result := ACCESS_DENIED;
  end_if;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL OperationLineV2::zPos::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

  if ptr <> NIL then
    zPos := input;
    ptr^.zpos := zPos;
    result := zPos;
  else
    result := ACCESS_DENIED;
  end_if;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL OperationLineV2::operationType::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR


  if ptr <> NIL then
    operationType := input;
    ptr^.operations := operationType$::tBewerkingType;
    IF useHeigth= 1 THEN //method to always write y pos to half width
      zPos.Write(input:=ptrHeigth^/2);
    END_IF;    
    result := operationType;
  else
    result := ACCESS_DENIED;
  end_if;

END_FUNCTION


FUNCTION GLOBAL OperationLineV2::WritePtr
	VAR_INPUT
		iPtr 	: ^ProductsDbV2::tRecipeLine;
		iPtrProdHeigth 	: ^DINT;
		iUseHeigth 	: DINT;
	END_VAR

  ptr := iPtr;
  ptrHeigth := iPtrProdHeigth;
  useHeigth := iUseHeigth;

  WriteServers();


END_FUNCTION


FUNCTION OperationLineV2::WriteServers

  if ptr <> NIL then
    xPos := ptr^.xpos;
    yPos := ptr^.ypos;
    zPos := ptr^.zpos;
    operationId := ptr^.operationId;
    amount := ptr^.amount;
    pitch := ptr^.pitch;
    operationType := ptr^.operations$DINT;
  end_if;
  

END_FUNCTION


FUNCTION VIRTUAL GLOBAL OperationLineV2::amount::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

  if ptr <> NIL then
	  amount := input;
    ptr^.amount := amount;
	  result := amount;
  else
    result := ACCESS_DENIED;
  end_if;
  

END_FUNCTION


FUNCTION VIRTUAL GLOBAL OperationLineV2::pitch::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

  if ptr <> NIL then
	  pitch := input;
    ptr^.pitch := pitch;
	  result := pitch;
  else
    result := ACCESS_DENIED;
  end_if;
  

 

END_FUNCTION


FUNCTION VIRTUAL GLOBAL OperationLineV2::operationId::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

  if ptr <> NIL then
    operationId := input;
    ptr^.operationId := operationId;
    result := operationId;
  else
    result := ACCESS_DENIED;
  end_if;
  
  
  

END_FUNCTION
