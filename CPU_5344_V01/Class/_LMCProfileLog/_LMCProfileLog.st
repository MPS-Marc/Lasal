//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)

//{{LSL_DEFINES

//}}LSL_DEFINES

//{{LSL_DECLARATION

(*!
<Class
	Name               = "_LMCProfileLog"
	Revision           = "1.4"
	GUID               = "{DC89AFDF-7ED1-4F89-BD1D-5D8A84C7D7EC}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "true"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	IconPath           = ".\Class\_LMCProfileLog\LMCProfile.ico"
	SharedCommandTable = "true"
	Objectsize         = "(350,120)">
	<Channels>
		<Server Name="ClassSvr" GUID="{B3033A27-7B37-4161-BE18-1FC66B15005E}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Client Name="cStdLib" Required="false" Internal="false"/>
	</Channels>
	<RevDoku>
		<Owner Company="Sigmatek"/>
		<Dokumentation Revision="1.4" Date="2018-10-24" Author="SatChr" Company="Sigmatek" Description="1. Improvement: new command StretchLastMove() for logging added.&#13;&#10;2. Bugfix: The command MoveEndless has not logged the input parameter.&#13;&#10;3. Bugfix: For StopMove() a wrong value for the input parameter Decel was logged."/>
		<Dokumentation Revision="1.3" Date="2018-04-26" Author="SatChr" Company="Sigmatek" Description="1. Improvement: new move command MoveEndless added"/>
		<Dokumentation Revision="1.2" Date="2016-03-22" Author="FucHer" Company="Sigmatek" Description="1. Improvement: the LMCProfile and the LMCRobotBase initialize now just one buffer"/>
		<Dokumentation Revision="1.1" Date="2015-09-25" Author="RauAnd&#13;&#10;SatChr" Company="Sigmatek" Description="1. Improvement: Logging for new commands added"/>
		<Dokumentation Revision="1.0" Date="2015-07-15" Author="FucHer" Company="Sigmatek" Description="creation"/>
	</RevDoku>
</Class>
*)
_LMCProfileLog : CLASS
	TYPE
	  _LMCLogCmdList :  //! <Type Public="true" Name="_LMCLogCmdList"/>
	  (
	    CEmpty,
	    CSetBasicParameter,
	    CLockProfile,
	    CUnlockProfile,
	    CMoveLinear,
	    CMoveCircle,
	    CMoveRelative,
	    CCircleDefinition,
	    CStopMove,
	    CSetAxisParameter,
	    CReadAxisParameter,
	    CSetGroupParameter,
	    CReadGroupParameter,
	    CSetProfileParameter,
	    CReadProfileParameter,
	    CProfileInPosition,
	    CReadPosition,
	    CReadProfileError,
	    CGetStartPositions,
	    CGetSlowestAxis,
	    CSetTimeBase,
	    CGetMoveFinished,
	    CGetBufferData,
	    CReadPosOffset,
	    CSetPosOffset,
	    CCalcResidualTime,
	    CCoupleGearAbsolute,
	    CCoupleGearRelative,
	    CCoupleGearVelocity,
	    CCoupleCurveTab,
	    CCoupleUserPos,
	    CCoupleProfilePos,
	    CCoupleGearPolynom,
	    CReadAxisState,
	    CReadCmdIndex,
	    CSetDynSWEndPos,
	    CReadProfileActValues,
	    CGetBrakePositions,
	    CChangeCoupleSettings,
	    CCoupleAdditivePosDiff,
	    CGetRemotePoint,
	    CLockProfileRestart,
	    CLockProfileStartLineNo,
	    CSetRestartPoint,
	    CReadRestartPos,
	    CContinueNCProg,
	    CReadRestartInfo,
	    CGetStartPositionsRestart,
	    CReadCommonCalcParas,
	    CSetProfilePositions,
	    CRobotOn,
	    CRobotOff,
	    CRobotIsOn,
	    CMoveLinearBelt,
	    CMoveRelativeTCP,
	    CGetRobotPosition,
	    CReadRobotParameter,
	    CSetRobotParameter,
	    CAxMoveHand,
	    CAxMoveEndless,
	    CAxMoveAbsolute,
	    CAxMoveShortestWay,
	    CAxMoveReference,
	    CAxMoveRelative,
	    CAxStopMove,
	    CAxTuneAxis,
	    CAxSetPosition,
	    CAxQuitError,
	    CAxReadAxisError,
	    CAxReadParameter,
	    CAxReadSWEndPos,
	    CAxInPosition,
	    CAxSetParameter,
	    CGetAxInformation,
	    CLockProfileStartFileOffset,
	    CLockProfileRestartFileOffset,
	    CSetRestartPointFileOffset,
	    CAxReadPosition,
	    CAxSetFollowMode,
	    CMoveCurve,
	    CMoveCurveBelt,
	    CAxSetAdjustment,
	    CMoveEndless,
	    CStretchLastMove
	  )$UDINT;
#pragma pack(push, 1)
	  _LogStruct : STRUCT  //! <Type Public="true" Comment="Log buffer entry" Name="_LogStruct"/>
	    CmdCode : _LMCLogCmdList;  //! <Type Comment="Identifier of the logged method" Name="_LogStruct.CmdCode"/>
	    RetCode : _LMCPROFERRORTYPES;  //! <Type Comment="Return value of the logged method" Name="_LogStruct.RetCode"/>
	    TimeStamp : UDINT;  //! <Type Comment="ops.tAbsolute" Name="_LogStruct.TimeStamp"/>
	    CmdParameter : ARRAY [0..140] OF SINT;  //! <Type Comment="Method parameters.&#13;&#10;Use structure definitions from _LogParCalcResidualTime to _LogParStopMove to access the data.&#13;&#10;E.g.: if the CmdCode is CMoveCircle the fitting structure definition is _LogParMoveCircle." Name="_LogStruct.CmdParameter"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogFile : STRUCT  //! <Type Public="true" Comment="Command logger data type" Name="_LogFile"/>
	    LogData : ARRAY [0..MAX_LOG_BUFFER_INDEX+1] OF _LogStruct;  //! <Type Comment="Log data ring buffer" Name="_LogFile.LogData"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParCalcResidualTime : STRUCT  //! <Type Public="true" Name="_LogParCalcResidualTime"/>
	    Mode : _LMCPROF_RESTIME_CALCMODE;  //! <Type Comment="Modus of calculation of the Residualtime" Name="_LogParCalcResidualTime.Mode"/>
	    ResidualTime : UDINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParChangeCoupleSettings : STRUCT  //! <Type Public="true" Name="_LogParChangeCoupleSettings"/>
	    AxisNo : DINT;  //! <Type Comment="Number of the selected axis, beginning with 1." Name="_LogParChangeCoupleSettings.AxisNo"/>
	    CoupleMode : _LMCPROF_EXECUTE;  //! <Type Comment="Time of couple command execution" Name="_LogParChangeCoupleSettings.CoupleMode"/>
	    MaxVel : DINT;  //! <Type Comment="Maximum speed of the axis for this movement [Application units / s]" Name="_LogParChangeCoupleSettings.MaxVel"/>
	    MaxAcc : DINT;  //! <Type Comment="Maximum axis acceleration / deceleration [Application units / s²]" Name="_LogParChangeCoupleSettings.MaxAcc"/>
	    DeltaPos : DINT;  //! <Type Comment="Position difference between the master axis and the slave axis [internal units]" Name="_LogParChangeCoupleSettings.DeltaPos"/>
	    GearMul : DINT;  //! <Type Comment="Multiplier for the gear ratio" Name="_LogParChangeCoupleSettings.GearMul"/>
	    GearDiv : DINT;  //! <Type Comment="Divisor for the gear ratio" Name="_LogParChangeCoupleSettings.GearDiv"/>
	    MaxJerk : DINT;  //! <Type Comment="Maximum jerk of axis [Application units / sec^2 / millisec]" Name="_LogParChangeCoupleSettings.MaxJerk"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParCircleDefinition : STRUCT  //! <Type Public="true" Name="_LogParCircleDefinition"/>
	    CircleDef : _LMCPROFCIRCLEDEF;  //! <Type Comment="0 --&gt; Linear movement&#13;&#10;1 --&gt; Circular movement" Name="_LogParCircleDefinition.CircleDef"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParContinueNCProg : STRUCT  //! <Type Public="true" Name="_LogParContinueNCProg"/>
	    PosWindow : DINT;  //! <Type Comment="Position tolerance window [Application Units].&#13;&#10;The axes must be at the start position / restart position plus or minus the PosWindow." Name="_LogParContinueNCProg.PosWindow"/>
	    DelayTime : UDINT;  //! <Type Comment="Delay time in milliseconds.&#13;&#10;The axes will start moving after this time." Name="_LogParContinueNCProg.DelayTime"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParCoupleAdditivePosDiff : STRUCT  //! <Type Public="true" Name="_LogParCoupleAdditivePosDiff"/>
	    AxisNo : DINT;  //! <Type Comment="Number of the selected axis, beginning with 1" Name="_LogParCoupleAdditivePosDiff.AxisNo"/>
	    pPosdiff : ^DINT;  //! <Type Comment="pointer to the positiondifference" Name="_LogParCoupleAdditivePosDiff.pPosdiff"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParCoupleCurveTab : STRUCT  //! <Type Public="true" Name="_LogParCoupleCurveTab"/>
	    AxisNo : DINT;  //! <Type Comment="Number of the selected axis, beginning with 1." Name="_LogParCoupleCurveTab.AxisNo"/>
	    CoupleMode : _LMCPROF_EXECUTE;  //! <Type Comment="Time of couple command execution" Name="_LogParCoupleCurveTab.CoupleMode"/>
	    MaxVel : DINT;  //! <Type Comment="Maximum speed of the axis for this movement [Application units / s]" Name="_LogParCoupleCurveTab.MaxVel"/>
	    MaxAcc : DINT;  //! <Type Comment="Maximum axis acceleration / deceleration [Application units / s²]" Name="_LogParCoupleCurveTab.MaxAcc"/>
	    DeltaPos : DINT;  //! <Type Comment="Position difference between the master axis and the slave axis [Application units]" Name="_LogParCoupleCurveTab.DeltaPos"/>
	    pMaster : ^MasterStruct;  //! <Type Comment="Pointer to the master axis information. Use method _LMCAxis::ReadMasterInfo()." Name="_LogParCoupleCurveTab.pMaster"/>
	    GearMul : DINT;  //! <Type Comment="Multiplier for the gear ratio" Name="_LogParCoupleCurveTab.GearMul"/>
	    GearDiv : DINT;  //! <Type Comment="Divisor for the gear ratio" Name="_LogParCoupleCurveTab.GearDiv"/>
	    Mode : _LMCAXIS_CURVETABMODE;  //! <Type Comment="Slave axis operating mode" Name="_LogParCoupleCurveTab.Mode"/>
	    pCurveData : ^_LMCAXIS_CURVE;  //! <Type Comment="Pointer to the curve data" Name="_LogParCoupleCurveTab.pCurveData"/>
	    MaxJerk : DINT;  //! <Type Comment="Maximum jerk of axis [Application units / sec^2 / millisec]" Name="_LogParCoupleCurveTab.MaxJerk"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParCoupleGearAbsolute : STRUCT  //! <Type Public="true" Name="_LogParCoupleGearAbsolute"/>
	    AxisNo : DINT;  //! <Type Comment="Number of the selected axis, beginning with 1." Name="_LogParCoupleGearAbsolute.AxisNo"/>
	    CoupleMode : _LMCPROF_EXECUTE;  //! <Type Comment="Time of couple command execution" Name="_LogParCoupleGearAbsolute.CoupleMode"/>
	    MaxVel : DINT;  //! <Type Comment="Maximum speed of the axis for this movement [Application units / s]" Name="_LogParCoupleGearAbsolute.MaxVel"/>
	    MaxAcc : DINT;  //! <Type Comment="Maximum axis acceleration / deceleration [Application units / s²]" Name="_LogParCoupleGearAbsolute.MaxAcc"/>
	    DeltaPos : DINT;  //! <Type Comment="Position difference between the master axis and the slave axis [internal units]" Name="_LogParCoupleGearAbsolute.DeltaPos"/>
	    pMaster : ^MasterStruct;  //! <Type Comment="Pointer to the master axis information. Use method _LMCAxis::ReadMasterInfo()." Name="_LogParCoupleGearAbsolute.pMaster"/>
	    GearMul : DINT;  //! <Type Comment="Multiplier for the gear ratio" Name="_LogParCoupleGearAbsolute.GearMul"/>
	    GearDiv : DINT;  //! <Type Comment="Divisor for the gear ratio" Name="_LogParCoupleGearAbsolute.GearDiv"/>
	    MaxJerk : DINT;  //! <Type Comment="Maximum jerk of axis [Application units / sec^2 / millisec]" Name="_LogParCoupleGearAbsolute.MaxJerk"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParCoupleGearPolynom : STRUCT  //! <Type Public="true" Name="_LogParCoupleGearPolynom"/>
	    AxisNo : DINT;  //! <Type Comment="Number of the selected axis, beginning with 1." Name="_LogParCoupleGearPolynom.AxisNo"/>
	    CoupleMode : _LMCPROF_EXECUTE;  //! <Type Comment="Time of couple command execution" Name="_LogParCoupleGearPolynom.CoupleMode"/>
	    MaxVel : DINT;  //! <Type Comment="Maximum speed of the axis for this movement [Application units / s]" Name="_LogParCoupleGearPolynom.MaxVel"/>
	    MaxAcc : DINT;  //! <Type Comment="Maximum axis acceleration / deceleration [Application units / s²]" Name="_LogParCoupleGearPolynom.MaxAcc"/>
	    pMaster : ^MasterStruct;  //! <Type Comment="Pointer to the master axis information. Use method _LMCAxis::ReadMasterInfo()." Name="_LogParCoupleGearPolynom.pMaster"/>
	    GearMul : DINT;  //! <Type Comment="Multiplier for the gear ratio" Name="_LogParCoupleGearPolynom.GearMul"/>
	    GearDiv : DINT;  //! <Type Comment="Divisor for the gear ratio" Name="_LogParCoupleGearPolynom.GearDiv"/>
	    sMaster : DINT;  //! <Type Comment="Distance travelled by the master axis during coupling [application units]" Name="_LogParCoupleGearPolynom.sMaster"/>
	    sSlave : DINT;  //! <Type Comment="Distance travelled by the slave axis during coupling [application units]" Name="_LogParCoupleGearPolynom.sSlave"/>
	    MaxJerk : DINT;  //! <Type Comment="Maximum jerk of axis [Application units / sec^2 / millisec]" Name="_LogParCoupleGearPolynom.MaxJerk"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParCoupleGearRelative : STRUCT  //! <Type Public="true" Name="_LogParCoupleGearRelative"/>
	    AxisNo : DINT;  //! <Type Comment="Number of the selected axis, beginning with 1." Name="_LogParCoupleGearRelative.AxisNo"/>
	    CoupleMode : _LMCPROF_EXECUTE;  //! <Type Comment="Time of couple command execution" Name="_LogParCoupleGearRelative.CoupleMode"/>
	    MaxVel : DINT;  //! <Type Comment="Maximum speed of the axis for this movement [Application units / s]" Name="_LogParCoupleGearRelative.MaxVel"/>
	    MaxAcc : DINT;  //! <Type Comment="Maximum axis acceleration / deceleration [Application units / s²]" Name="_LogParCoupleGearRelative.MaxAcc"/>
	    pMaster : ^MasterStruct;  //! <Type Comment="Pointer to the master axis information. Use method _LMCAxis::ReadMasterInfo()." Name="_LogParCoupleGearRelative.pMaster"/>
	    GearMul : DINT;  //! <Type Comment="Multiplier for the gear ratio" Name="_LogParCoupleGearRelative.GearMul"/>
	    GearDiv : DINT;  //! <Type Comment="Divisor for the gear ratio" Name="_LogParCoupleGearRelative.GearDiv"/>
	    MaxJerk : DINT;  //! <Type Comment="Maximum jerk of axis [Application units / sec^2 / millisec]" Name="_LogParCoupleGearRelative.MaxJerk"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParCoupleGearVelocity : STRUCT  //! <Type Public="true" Name="_LogParCoupleGearVelocity"/>
	    AxisNo : DINT;  //! <Type Comment="Number of the selected axis, beginning with 1." Name="_LogParCoupleGearVelocity.AxisNo"/>
	    CoupleMode : _LMCPROF_EXECUTE;  //! <Type Comment="Time of couple command execution" Name="_LogParCoupleGearVelocity.CoupleMode"/>
	    MaxVel : DINT;  //! <Type Comment="Maximum speed of the axis for this movement [Application units / s]" Name="_LogParCoupleGearVelocity.MaxVel"/>
	    MaxAcc : DINT;  //! <Type Comment="Maximum axis acceleration / deceleration [Application units / s²]" Name="_LogParCoupleGearVelocity.MaxAcc"/>
	    pMaster : ^MasterStruct;  //! <Type Comment="Pointer to the master axis information. Use method _LMCAxis::ReadMasterInfo()." Name="_LogParCoupleGearVelocity.pMaster"/>
	    GearMul : DINT;  //! <Type Comment="Multiplier for the gear ratio" Name="_LogParCoupleGearVelocity.GearMul"/>
	    GearDiv : DINT;  //! <Type Comment="Divisor for the gear ratio" Name="_LogParCoupleGearVelocity.GearDiv"/>
	    MaxJerk : DINT;  //! <Type Comment="Maximum jerk of axis [Application units / sec^2 / millisec]" Name="_LogParCoupleGearVelocity.MaxJerk"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParCoupleProfilePos : STRUCT  //! <Type Public="true" Name="_LogParCoupleProfilePos"/>
	    AxisNo : DINT;  //! <Type Comment="Number of the selected axis, beginning with 1." Name="_LogParCoupleProfilePos.AxisNo"/>
	    CoupleMode : _LMCPROF_EXECUTE;  //! <Type Comment="Time of couple command execution" Name="_LogParCoupleProfilePos.CoupleMode"/>
	    MaxVel : DINT;  //! <Type Comment="Maximum speed of the axis for this movement [Application units / s]" Name="_LogParCoupleProfilePos.MaxVel"/>
	    MaxAcc : DINT;  //! <Type Comment="Maximum axis acceleration / deceleration [Application units / s²]" Name="_LogParCoupleProfilePos.MaxAcc"/>
	    Mode : _LMCPROF_RECOUPLEMODE;  //! <Type Comment="selecte the mode for the recouple" Name="_LogParCoupleProfilePos.Mode"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParCoupleUserPos : STRUCT  //! <Type Public="true" Name="_LogParCoupleUserPos"/>
	    AxisNo : DINT;  //! <Type Comment="Number of the selected axis, beginning with 1." Name="_LogParCoupleUserPos.AxisNo"/>
	    CoupleMode : _LMCPROF_EXECUTE;  //! <Type Comment="Time of couple command execution" Name="_LogParCoupleUserPos.CoupleMode"/>
	    MaxVel : DINT;  //! <Type Comment="Maximum speed of the axis for this movement [Application units / s]" Name="_LogParCoupleUserPos.MaxVel"/>
	    MaxAcc : DINT;  //! <Type Comment="Maximum axis acceleration / deceleration [Application units / s²]" Name="_LogParCoupleUserPos.MaxAcc"/>
	    pMasterPos : ^DINT;  //! <Type Comment="Pointer to the command variable containing the master position [internal units].&#13;&#10;The command variable has to contain set positions." Name="_LogParCoupleUserPos.pMasterPos"/>
	    DeltaPos : DINT;  //! <Type Comment="Position difference between the master position and the slave axis [internal units]" Name="_LogParCoupleUserPos.DeltaPos"/>
	    GearMul : DINT;  //! <Type Comment="Multiplier for the gear ratio" Name="_LogParCoupleUserPos.GearMul"/>
	    GearDiv : DINT;  //! <Type Comment="Divisor for the gear ratio" Name="_LogParCoupleUserPos.GearDiv"/>
	    Mode : _LMCAXIS_COUPLE_GEAR_MODE;
	    MaxJerk : DINT;  //! <Type Comment="Maximum jerk of axis [Application units / sec^2 / millisec]" Name="_LogParCoupleUserPos.MaxJerk"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParGetBrakePositions : STRUCT  //! <Type Public="true" Name="_LogParGetBrakePositions"/>
	    Pos : _LMCPROF_POS;  //! <Type Comment="Brakepositions" Name="_LogParGetBrakePositions.Pos"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParGetBufferData : STRUCT  //! <Type Public="true" Name="_LogParGetBufferData"/>
	    index : UDINT;  //! <Type Comment="index which should be copied" Name="_LogParGetBufferData.index"/>
	    MoveData : _LMCPROF_MoveData;  //! <Type Comment="Buffer data" Name="_LogParGetBufferData.MoveData"/>
	    RetCode : iprStates;  //! <Type Comment="READY ... copy is okay&#13;&#10;ERROR ... copy is not okay" Name="_LogParGetBufferData.RetCode"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParGetMoveFinished : STRUCT  //! <Type Public="true" Name="_LogParGetMoveFinished"/>
	    index : UDINT;  //! <Type Comment="Buffer index of the movement that should be checked" Name="_LogParGetMoveFinished.index"/>
	    RetCode : iprStates;  //! <Type Comment="READY ... Movement is Finished&#13;&#10;BUSY  ... Movement is Busy&#13;&#10;ERROR ... Wrong Index No" Name="_LogParGetMoveFinished.RetCode"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParGetRemotePoint : STRUCT  //! <Type Public="true" Name="_LogParGetRemotePoint"/>
	    RemoteDist : DINT;
	    RemoteTime : DINT;
	    ActualVel : DINT;
	    RemoteVel : DINT;
	    ActualAccel : DINT;
	    ProfileAccel : DINT;
	    Tjerk : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParGetSlowestAxis : STRUCT  //! <Type Public="true" Name="_LogParGetSlowestAxis"/>
	    Dest : _LMCPROF_POS;  //! <Type Comment="End positions [Application Units]" Name="_LogParGetSlowestAxis.Dest"/>
	    usAxis : USINT;  //! <Type Comment="Number of the slowest axis (0 in case of no locked axis, 1-9 otherwise)" Name="_LogParGetSlowestAxis.usAxis"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParGetStartPositions : STRUCT  //! <Type Public="true" Name="_LogParGetStartPositions"/>
	    StartPos : _LMCPROF_POS;  //! <Type Comment="Start positions [???units]" Name="_LogParGetStartPositions.StartPos"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParGetStartPositionsRestart : STRUCT  //! <Type Public="true" Name="_LogParGetStartPositionsRestart"/>
	    StartPos : _LMCPROF_POS;  //! <Type Comment="Axes positions [Application Units]" Name="_LogParGetStartPositionsRestart.StartPos"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParLockProfile : STRUCT  //! <Type Public="true" Name="_LogParLockProfile"/>
	    Axis1 : DINT;  //! <Type Comment="Couples axis &#13;&#10;0    --&gt; not coupled &#13;&#10;1-6  --&gt; coupled to assigned group" Name="_LogParLockProfile.Axis1"/>
	    Axis2 : DINT;  //! <Type Comment="Couples axis &#13;&#10;0    --&gt; not coupled &#13;&#10;1-6  --&gt; coupled to assigned group" Name="_LogParLockProfile.Axis2"/>
	    Axis3 : DINT;  //! <Type Comment="Couples axis &#13;&#10;0    --&gt; not coupled &#13;&#10;1-6  --&gt; coupled to assigned group" Name="_LogParLockProfile.Axis3"/>
	    Axis4 : DINT;  //! <Type Comment="Couples axis &#13;&#10;0    --&gt; not coupled &#13;&#10;1-6  --&gt; coupled to assigned group" Name="_LogParLockProfile.Axis4"/>
	    Axis5 : DINT;  //! <Type Comment="Couples axis &#13;&#10;0    --&gt; not coupled &#13;&#10;1-6  --&gt; coupled to assigned group" Name="_LogParLockProfile.Axis5"/>
	    Axis6 : DINT;  //! <Type Comment="Couples axis &#13;&#10;0    --&gt; not coupled &#13;&#10;1-6  --&gt; coupled to assigned group" Name="_LogParLockProfile.Axis6"/>
	    Axis7 : DINT;  //! <Type Comment="Couples axis &#13;&#10;0    --&gt; not coupled &#13;&#10;1-6  --&gt; coupled to assigned group" Name="_LogParLockProfile.Axis7"/>
	    Axis8 : DINT;  //! <Type Comment="Couples axis &#13;&#10;0    --&gt; not coupled &#13;&#10;1-6  --&gt; coupled to assigned group" Name="_LogParLockProfile.Axis8"/>
	    Axis9 : DINT;  //! <Type Comment="Couples axis &#13;&#10;0    --&gt; not coupled &#13;&#10;1-6  --&gt; coupled to assigned group" Name="_LogParLockProfile.Axis9"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParLockProfileRestart : STRUCT  //! <Type Public="true" Name="_LogParLockProfileRestart"/>
	    Axis1 : DINT;  //! <Type Comment="Couples axis &#13;&#10;0    --&gt; not coupled &#13;&#10;1-6  --&gt; coupled to assigned group" Name="_LogParLockProfileRestart.Axis1"/>
	    Axis2 : DINT;  //! <Type Comment="Couples axis &#13;&#10;0    --&gt; not coupled &#13;&#10;1-6  --&gt; coupled to assigned group" Name="_LogParLockProfileRestart.Axis2"/>
	    Axis3 : DINT;  //! <Type Comment="Couples axis &#13;&#10;0    --&gt; not coupled &#13;&#10;1-6  --&gt; coupled to assigned group" Name="_LogParLockProfileRestart.Axis3"/>
	    Axis4 : DINT;  //! <Type Comment="Couples axis &#13;&#10;0    --&gt; not coupled &#13;&#10;1-6  --&gt; coupled to assigned group" Name="_LogParLockProfileRestart.Axis4"/>
	    Axis5 : DINT;  //! <Type Comment="Couples axis &#13;&#10;0    --&gt; not coupled &#13;&#10;1-6  --&gt; coupled to assigned group" Name="_LogParLockProfileRestart.Axis5"/>
	    Axis6 : DINT;  //! <Type Comment="Couples axis &#13;&#10;0    --&gt; not coupled &#13;&#10;1-6  --&gt; coupled to assigned group" Name="_LogParLockProfileRestart.Axis6"/>
	    Axis7 : DINT;  //! <Type Comment="Couples axis &#13;&#10;0    --&gt; not coupled &#13;&#10;1-6  --&gt; coupled to assigned group" Name="_LogParLockProfileRestart.Axis7"/>
	    Axis8 : DINT;  //! <Type Comment="Couples axis &#13;&#10;0    --&gt; not coupled &#13;&#10;1-6  --&gt; coupled to assigned group" Name="_LogParLockProfileRestart.Axis8"/>
	    Axis9 : DINT;  //! <Type Comment="Couples axis &#13;&#10;0    --&gt; not coupled &#13;&#10;1-6  --&gt; coupled to assigned group" Name="_LogParLockProfileRestart.Axis9"/>
	    PathOffset : DINT;  //! <Type Comment="Offset along the path [Application Units]" Name="_LogParLockProfileRestart.PathOffset"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParLockProfileStartLineNo : STRUCT  //! <Type Public="true" Name="_LogParLockProfileStartLineNo"/>
	    Axis1 : DINT;  //! <Type Comment="Couples axis &#13;&#10;0    --&gt; not coupled &#13;&#10;1-6  --&gt; coupled to assigned group" Name="_LogParLockProfileStartLineNo.Axis1"/>
	    Axis2 : DINT;  //! <Type Comment="Couples axis &#13;&#10;0    --&gt; not coupled &#13;&#10;1-6  --&gt; coupled to assigned group" Name="_LogParLockProfileStartLineNo.Axis2"/>
	    Axis3 : DINT;  //! <Type Comment="Couples axis &#13;&#10;0    --&gt; not coupled &#13;&#10;1-6  --&gt; coupled to assigned group" Name="_LogParLockProfileStartLineNo.Axis3"/>
	    Axis4 : DINT;  //! <Type Comment="Couples axis &#13;&#10;0    --&gt; not coupled &#13;&#10;1-6  --&gt; coupled to assigned group" Name="_LogParLockProfileStartLineNo.Axis4"/>
	    Axis5 : DINT;  //! <Type Comment="Couples axis &#13;&#10;0    --&gt; not coupled &#13;&#10;1-6  --&gt; coupled to assigned group" Name="_LogParLockProfileStartLineNo.Axis5"/>
	    Axis6 : DINT;  //! <Type Comment="Couples axis &#13;&#10;0    --&gt; not coupled &#13;&#10;1-6  --&gt; coupled to assigned group" Name="_LogParLockProfileStartLineNo.Axis6"/>
	    Axis7 : DINT;  //! <Type Comment="Couples axis &#13;&#10;0    --&gt; not coupled &#13;&#10;1-6  --&gt; coupled to assigned group" Name="_LogParLockProfileStartLineNo.Axis7"/>
	    Axis8 : DINT;  //! <Type Comment="Couples axis &#13;&#10;0    --&gt; not coupled &#13;&#10;1-6  --&gt; coupled to assigned group" Name="_LogParLockProfileStartLineNo.Axis8"/>
	    Axis9 : DINT;  //! <Type Comment="Couples axis &#13;&#10;0    --&gt; not coupled &#13;&#10;1-6  --&gt; coupled to assigned group" Name="_LogParLockProfileStartLineNo.Axis9"/>
	    PathOffset : DINT;  //! <Type Comment="Offset along the path [Application Units]. Must be within the start line." Name="_LogParLockProfileStartLineNo.PathOffset"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParMoveCircle : STRUCT  //! <Type Public="true" Name="_LogParMoveCircle"/>
	    Positions : _LMCPROF_POS;  //! <Type Comment="Pointer to the absolute end position of the axes [Application Units]" Name="_LogParMoveCircle.Positions"/>
	    MiddlePoint : _LMCPROF_CIRCLEPOINT;  //! <Type Comment="Pointer to the absolute position of the middlepoint of the circle [Application Units]" Name="_LogParMoveCircle.MiddlePoint"/>
	    InterPoint : _LMCPROF_CIRCLEPOINT;  //! <Type Comment="Pointer to the absolute values of the inclined position of the circle to define the circle-pline [Application Units]" Name="_LogParMoveCircle.InterPoint"/>
	    CircleDef : _LMCPROFCIRCLEDEF;  //! <Type Comment="Defines which axes should perform a circular movement" Name="_LogParMoveCircle.CircleDef"/>
	    CmdConfig : _LMCPROFCMDCONFIG;  //! <Type Comment="16#01 --&gt; Rapid traverse&#13;&#10;16#02 --&gt; Move in clockwise direction (CW) in case of 2 dimenional movement / dromic direction in case of 3 dimensional movement&#13;&#10;16#04 --&gt; Move in counter clockwise direction (CCW) in case of 2 dimenional movement / antidromic direction in case of 3 dimensional movement&#13;&#10;16#08 --&gt; Feed rate interpolation&#13;&#10;" Name="_LogParMoveCircle.CmdConfig"/>
	    Velocity : DINT;  //! <Type Comment="Path speed (feed rate) for the movement.[Application units / s]" Name="_LogParMoveCircle.Velocity"/>
	    Accel : DINT;  //! <Type Comment="Acceleration for this movement [Application units / s² ]" Name="_LogParMoveCircle.Accel"/>
	    Decel : DINT;  //! <Type Comment="Deceleration for this movement [Application units / s² ]" Name="_LogParMoveCircle.Decel"/>
	    TransMode : _LMCPROFTRANSMODES;  //! <Type Comment="Transitionmodus during rounding" Name="_LogParMoveCircle.TransMode"/>
	    TransRadius : DINT;  //! <Type Comment="Radius of the tolerace-sphere during rounding [Application units].&#13;&#10;&#13;&#10;Parameter is only necessary for modes _LMCPROF_SMOOTH_PARAB + _LMCPROF_SMOOTH_CUBIC. " Name="_LogParMoveCircle.TransRadius"/>
	    Jerk : DINT;  //! <Type Comment="Jerk for this movement [Application units / sec^2 / millisec]" Name="_LogParMoveCircle.Jerk"/>
	    SetCoordSystem : DINT;
	    ActiveTool : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParMoveCurve : STRUCT  //! <Type Public="true" Name="_LogParMoveCurve"/>
	    Positions : _LMCPROF_POS;  //! <Type Comment="absolute end positions of the axes [application units]" Name="_LogParMoveCurve.Positions"/>
	    CmdConfig : _LMCPROFCMDCONFIG;  //! <Type Comment="16#01 --&gt; Rapid traverse&#13;&#10;16#02 --&gt; Move in clockwise direction (CW) in case of 2 dimenional movement / dromic direction in case of 3 dimensional movement&#13;&#10;16#04 --&gt; Move in counter clockwise direction (CCW) in case of 2 dimenional movement / antidromic direction in case of 3 dimensional movement&#13;&#10;16#08 --&gt; Feed rate interpolation&#13;&#10;" Name="_LogParMoveCurve.CmdConfig"/>
	    Velocity : DINT;  //! <Type Comment="Path speed (feed rate) for the movement.[Application units / s]" Name="_LogParMoveCurve.Velocity"/>
	    Accel : DINT;  //! <Type Comment="Acceleration for this movement [Application units / s² ]" Name="_LogParMoveCurve.Accel"/>
	    Decel : DINT;  //! <Type Comment="Deceleration for this movement [Application units / s²]" Name="_LogParMoveCurve.Decel"/>
	    TransMode : _LMCPROFTRANSMODES;  //! <Type Comment="Transitionmodus during rounding" Name="_LogParMoveCurve.TransMode"/>
	    TransRadius : DINT;  //! <Type Comment="Radius of the tolerace-sphere during rounding [Application units].&#13;&#10;&#13;&#10;Parameter is only necessary for modes _LMCPROF_SMOOTH_PARAB, _LMCPROF_SMOOTH_CUBIC, and _LMCPROF_SMOOT_QUINT. " Name="_LogParMoveCurve.TransRadius"/>
	    Obstacle : _LMCPROF_OBSTACLE;
	    Jerk : DINT;  //! <Type Comment="Jerk for this movement [Application units / sec^2 / millisec]" Name="_LogParMoveCurve.Jerk"/>
	    SetCoordSystem : DINT;
	    ActiveTool : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParMoveEndless : STRUCT
	    Direction : _LMCPROF_POS;
	    CmdConfig : _LMCPROFCMDCONFIG;
	    Velocity : DINT;
	    Accel : DINT;
	    Decel : DINT;
	    Jerk : DINT;
	    SetCoordSystem : DINT;
	    ActiveTool : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParMoveLinear : STRUCT  //! <Type Public="true" Name="_LogParMoveLinear"/>
	    Positions : _LMCPROF_POS;  //! <Type Comment="Absolute end position of the axes [Application Units]" Name="_LogParMoveLinear.Positions"/>
	    CmdConfig : _LMCPROFCMDCONFIG;  //! <Type Comment="16#01 --&gt; Rapid traverse&#13;&#10;16#02 --&gt; Move in clockwise direction (CW)&#13;&#10;16#04 --&gt; Move in counter clockwise direction (CCW)&#13;&#10;16#08 --&gt; Feed rate interpolation&#13;&#10;" Name="_LogParMoveLinear.CmdConfig"/>
	    Velocity : DINT;  //! <Type Comment="Path speed (feed rate) for the movement.[Application units / s]&#13;&#10;" Name="_LogParMoveLinear.Velocity"/>
	    Accel : DINT;  //! <Type Comment="Acceleration for this movement [Application units / s² ]" Name="_LogParMoveLinear.Accel"/>
	    Decel : DINT;  //! <Type Comment="Deceleration for this movement [Application units / s² ]" Name="_LogParMoveLinear.Decel"/>
	    TransMode : _LMCPROFTRANSMODES;  //! <Type Comment="Transitionmodus during rounding" Name="_LogParMoveLinear.TransMode"/>
	    TransRadius : DINT;  //! <Type Comment="Radius of the tolerace-sphere during rounding [Application units].&#13;&#10;&#13;&#10;Parameter is only necessary for modes _LMCPROF_SMOOTH_PARAB + _LMCPROF_SMOOTH_CUBIC + _LMCPROF_SMOOTH_QUINT." Name="_LogParMoveLinear.TransRadius"/>
	    Jerk : DINT;  //! <Type Comment="Jerk for this movement [Application units / sec^2 / millisec]" Name="_LogParMoveLinear.Jerk"/>
	    SetCoordSystem : DINT;
	    ActiveTool : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParMoveRelative : STRUCT  //! <Type Public="true" Name="_LogParMoveRelative"/>
	    Distances : _LMCPROF_POS;  //! <Type Comment="Relative distance of the axes [Application Units]" Name="_LogParMoveRelative.Distances"/>
	    CmdConfig : _LMCPROFCMDCONFIG;  //! <Type Comment="16#01 --&gt; Rapid traverse&#13;&#10;16#02 --&gt; Move in clockwise direction (CW)&#13;&#10;16#04 --&gt; Move in counter clockwise direction (CCW)&#13;&#10;16#08 --&gt; Feed rate interpolation" Name="_LogParMoveRelative.CmdConfig"/>
	    Velocity : DINT;  //! <Type Comment="Path speed (feed rate) for the movement.[Application units / s]&#13;&#10;" Name="_LogParMoveRelative.Velocity"/>
	    Accel : DINT;  //! <Type Comment="Acceleration for this movement [Application units / s² ]" Name="_LogParMoveRelative.Accel"/>
	    Decel : DINT;  //! <Type Comment="Deceleration for this movement [Application units / s² ]" Name="_LogParMoveRelative.Decel"/>
	    TransMode : _LMCPROFTRANSMODES;  //! <Type Comment="Transitionmodus during rounding" Name="_LogParMoveRelative.TransMode"/>
	    TransRadius : DINT;  //! <Type Comment="Radius of the tolerace-sphere during rounding [Application units].&#13;&#10;&#13;&#10;Parameter is only necessary for modes _LMCPROF_SMOOTH_PARAB + _LMCPROF_SMOOTH_CUBIC + _LMCPROF_SMOOTH_QUINT." Name="_LogParMoveRelative.TransRadius"/>
	    Jerk : DINT;  //! <Type Comment="Jerk for this movement [Application units / sec^2 / millisec]" Name="_LogParMoveRelative.Jerk"/>
	    SetCoordSystem : DINT;
	    ActiveTool : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParProfileInPosition : STRUCT  //! <Type Public="true" Name="_LogParProfileInPosition"/>
	    Mode : _LMCPROFINPOSTYPES;  //! <Type Comment="Mode, defined by the Enum" Name="_LogParProfileInPosition.Mode"/>
	    RetCode : DINT;  //! <Type Comment="0 ... FALSE&#13;&#10;1 ... TRUE " Name="_LogParProfileInPosition.RetCode"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParReadAxisParameter : STRUCT  //! <Type Public="true" Name="_LogParReadAxisParameter"/>
	    AxisNo : DINT;  //! <Type Comment="Number of the selected axis, beginning with 1." Name="_LogParReadAxisParameter.AxisNo"/>
	    ParNo : _LMCPROFPARAMETERAXIS;  //! <Type Comment="Number of the selected Parameter" Name="_LogParReadAxisParameter.ParNo"/>
	    RetValue : DINT;  //! <Type Comment="Value of the selected Parameter" Name="_LogParReadAxisParameter.RetValue"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParReadAxisState : STRUCT  //! <Type Public="true" Name="_LogParReadAxisState"/>
	    AxisNo : DINT;  //! <Type Comment="Number of the selected axis, beginning with 1." Name="_LogParReadAxisState.AxisNo"/>
	    AxisState : _LMCAXIS_STATUS;  //! <Type Comment="Status flags of the axis" Name="_LogParReadAxisState.AxisState"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParReadCmdIndex : STRUCT  //! <Type Public="true" Name="_LogParReadCmdIndex"/>
	    Mode : _LMCPROF_CMDINDEX;  //! <Type Comment="_LMCPROF_LASTLOADED : Returns the index of the last movement from the user which was successfuly loaded&#13;&#10;_LMCPROF_ACTCMD : Returns the index of the current move command&#13;&#10;_LMCPROF_VORANZ : Returns the number of entries in the buffer remaining&#13;&#10;_LMCPROF_SUMINDEX : Returns the number of entries in the UserBuffer remaining" Name="_LogParReadCmdIndex.Mode"/>
	    Index : UDINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParReadCommonCalcParas : STRUCT  //! <Type Public="true" Name="_LogParReadCommonCalcParas"/>
	    CalcParas : _LMCCommonCalcParas;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _logParReadGroupParameter : STRUCT  //! <Type Public="true" Name="_logParReadGroupParameter"/>
	    GrpNo : DINT;  //! <Type Comment="Number of the selected group, beginning with 1." Name="_logParReadGroupParameter.GrpNo"/>
	    ParNo : _LMCPROFPARAMETERGROUPS;  //! <Type Comment="Number of the selected Parameter" Name="_logParReadGroupParameter.ParNo"/>
	    RetValue : DINT;  //! <Type Comment="Value of the selected parameter" Name="_logParReadGroupParameter.RetValue"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParReadPosition : STRUCT  //! <Type Public="true" Name="_LogParReadPosition"/>
	    AxisNo : DINT;  //! <Type Comment="Axis number 1 - 6&#13;&#10;" Name="_LogParReadPosition.AxisNo"/>
	    Mode : DINT;  //! <Type Comment="0 ... Application Units&#13;&#10;1 ... Internal Units" Name="_LogParReadPosition.Mode"/>
	    Position : DINT;  //! <Type Comment="Position of the selected axis in the specified units. With an invalid axis entry, 16#FFFFFFFF is returned." Name="_LogParReadPosition.Position"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParReadPosOffset : STRUCT  //! <Type Public="true" Name="_LogParReadPosOffset"/>
	    PosOffset : _LMCPROF_POS;  //! <Type Comment="Zero point offsets (Geometric reference points) [Application units]" Name="_LogParReadPosOffset.PosOffset"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParReadProfileActValues : STRUCT  //! <Type Public="true" Name="_LogParReadProfileActValues"/>
	    Mode : _LMCPROF_ACTUALVALUES;
	    ActualValue : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParReadProfileError : STRUCT  //! <Type Public="true" Name="_LogParReadProfileError"/>
	    ErrorInfo : _LMCPROFERRORDEF;  //! <Type Comment="Error Structure" Name="_LogParReadProfileError.ErrorInfo"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParReadProfileParameter : STRUCT  //! <Type Public="true" Name="_LogParReadProfileParameter"/>
	    ParNo : _LMCPROFPARAMETER;  //! <Type Comment="Defines the wanted parameter" Name="_LogParReadProfileParameter.ParNo"/>
	    RetValue : DINT;  //! <Type Comment="Value of the Parameter" Name="_LogParReadProfileParameter.RetValue"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParReadRestartInfo : STRUCT  //! <Type Public="true" Name="_LogParReadRestartInfo"/>
	    sRestart : LREAL;  //! <Type Comment="Accumulated path length [Internal Units].&#13;&#10;This is the path length from the beginning of the NC-program to the point where it was aborted." Name="_LogParReadRestartInfo.sRestart"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _logParReadRestartPos : STRUCT  //! <Type Public="true" Name="_logParReadRestartPos"/>
	    Positions : _LMCPROF_POS;  //! <Type Comment="Absolute positions of all axes at the restart point [Application Units]" Name="_logParReadRestartPos.Positions"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParSetAxisParameter : STRUCT  //! <Type Public="true" Name="_LogParSetAxisParameter"/>
	    AxisNo : DINT;  //! <Type Comment="Number of the selected axis, beginning with 1." Name="_LogParSetAxisParameter.AxisNo"/>
	    ParNo : _LMCPROFPARAMETERAXIS;  //! <Type Comment="Number of the selected Parameter" Name="_LogParSetAxisParameter.ParNo"/>
	    Value : DINT;  //! <Type Comment="Value of the selected Parameter" Name="_LogParSetAxisParameter.Value"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParSetBasicParameter : STRUCT  //! <Type Public="true" Name="_LogParSetBasicParameter"/>
	    VMax : DINT;  //! <Type Comment="Maximum path speed [Application units / s]" Name="_LogParSetBasicParameter.VMax"/>
	    AMax : DINT;  //! <Type Comment="Maximum path acceleration/deceleration [Application units / s²]" Name="_LogParSetBasicParameter.AMax"/>
	    Tjerk : DINT;  //! <Type Comment="Time for the path acceleration/deceleration to attain its maximum value [ms]." Name="_LogParSetBasicParameter.Tjerk"/>
	    TangError : DINT;  //! <Type Comment="Maximum tangential error = 1/10000°" Name="_LogParSetBasicParameter.TangError"/>
	    PosOffset : _LMCPROF_POS;  //! <Type Comment="Shifting of the null point for the axis (Geometric reference points) [Application units]" Name="_LogParSetBasicParameter.PosOffset"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParSetDynSWEndPos : STRUCT  //! <Type Public="true" Name="_LogParSetDynSWEndPos"/>
	    AxNo : DINT;  //! <Type Comment="Axis number 1 - 9" Name="_LogParSetDynSWEndPos.AxNo"/>
	    pSWEndPos : ^DINT;  //! <Type Comment="Pointer to the dynamic SW end position.&#13;&#10;To delete a dynamic SW end position set this pointer to NIL." Name="_LogParSetDynSWEndPos.pSWEndPos"/>
	    Mode : _LMC_DYN_SWLIMITS;  //! <Type Comment="Choose maximum or minimum dynamic position" Name="_LogParSetDynSWEndPos.Mode"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParSetGroupParameter : STRUCT  //! <Type Public="true" Name="_LogParSetGroupParameter"/>
	    GrpNo : DINT;  //! <Type Comment="Number of the selected group, beginning with 1." Name="_LogParSetGroupParameter.GrpNo"/>
	    ParNo : _LMCPROFPARAMETERGROUPS;  //! <Type Comment="Number of the selected parameter" Name="_LogParSetGroupParameter.ParNo"/>
	    Value : DINT;  //! <Type Comment="Value of the selected parameter" Name="_LogParSetGroupParameter.Value"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParSetPosOffset : STRUCT  //! <Type Public="true" Name="_LogParSetPosOffset"/>
	    PosOffset : _LMCPROF_POS;  //! <Type Comment="Zero point offsets (Geometric reference points) [Application units]" Name="_LogParSetPosOffset.PosOffset"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParSetProfileParameter : STRUCT  //! <Type Public="true" Name="_LogParSetProfileParameter"/>
	    ParNo : _LMCPROFPARAMETER;  //! <Type Comment="Number of the selected Parameter" Name="_LogParSetProfileParameter.ParNo"/>
	    Value : DINT;  //! <Type Comment="new value of the parameter" Name="_LogParSetProfileParameter.Value"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParSetProfilePositions : STRUCT  //! <Type Public="true" Name="_LogParSetProfilePositions"/>
	    Mode : _LMCPROF_SETPOS_MODE;  //! <Type Comment="Mode defines how we get the set positions." Name="_LogParSetProfilePositions.Mode"/>
	    pApproxPos : ^_LMCPROF_POS;  //! <Type Comment="(approximated) positions, where the profile positions may be set [application units]" Name="_LogParSetProfilePositions.pApproxPos"/>
	    pCallbackData : pVoid;  //! <Type Comment="pointer to some application data, which may be needed when executing the callback for getting the right set positions" Name="_LogParSetProfilePositions.pCallbackData"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParSetRestartPointFileOffset : STRUCT  //! <Type Public="true" Name="_LogParSetRestartPointFileOffset"/>
	    PathOffset : DINT;  //! <Type Comment="Offset along the path [Application Units]. Must be within the start line." Name="_LogParSetRestartPointFileOffset.PathOffset"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParSetTimeBase : STRUCT  //! <Type Public="true" Name="_LogParSetTimeBase"/>
	    udTimeBase : UDINT;  //! <Type Comment="Time base in µs" Name="_LogParSetTimeBase.udTimeBase"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParStopMove : STRUCT  //! <Type Public="true" Name="_LogParStopMove"/>
	    Mode : DINT;  //! <Type Comment="0 --&gt; Continue a stopped movement&#13;&#10;1 --&gt; Stop the current movement&#13;&#10;2 --&gt; Stop the current movement with new Decel" Name="_LogParStopMove.Mode"/>
	    Decel : DINT;  //! <Type Comment="New deceleration, if Mode:=2. [Application units / sec^2]" Name="_LogParStopMove.Decel"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 4)
	  _LogParStretchLastMove : STRUCT  //! <Type Public="true" Name="_LogParStretchLastMove"/>
	    FactorMul : UDINT;
	    FactorDiv : UDINT;
	  END_STRUCT;
#pragma pack(pop)
	END_TYPE
  //Servers:
	ClassSvr 	: SvrChCmd_DINT;
  //Clients:
	cStdLib 	: CltChCmd__StdLib;
  //Variables:
		AccessNo 	: DINT;			//! <Variable Comment="Index of next free entry in the ring buffer" Name="AccessNo"/>
		LogMode : BINT
		[
		  1 LogMethodCall,  //! <Variable Comment="Log move commands and write commands only" Name="LogMode.LogMethodCall"/>
		  2 LogReadMethods,  //! <Variable Comment="Additionally log request method calls" Name="LogMode.LogReadMethods"/>
		  3 LogMethodCallPlusParam,  //! <Variable Comment="Additionally log the method parameters" Name="LogMode.LogMethodCallPlusParam"/>
		];
			//! <Variable Comment="Specifies logger behaviour" Name="LogMode"/>
		pLogFile 	: ^_LogFile;
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL Logger
		VAR_INPUT
			CmdCode 	: _LMCLogCmdList;
			pMethodPar 	: ^void;
			RetCode 	: _LMCPROFERRORTYPES;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL GetLogPtr
		VAR_INPUT
			pLogIndex 	: ^DINT;
		END_VAR
		VAR_OUTPUT
			pLogEntry 	: ^_LogStruct;
		END_VAR;
	
	FUNCTION GLOBAL SetLogParameter
		VAR_INPUT
			Value 	: DINT;			//! <Variable Comment="0: logging off&#13;&#10;1: log move commands and write commands&#13;&#10;2: log move commands and write commands plus request commands&#13;&#10;3: log move commands and write commands plus the method parameters (default)&#13;&#10;4: log move commands and write commands plus request commands plus the method parameters" Name="SetLogParameter.Value"/>
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL InitLogBuffer
		VAR_OUTPUT
			pLogFileOut 	: ^_LMCProfileLog::_LogFile;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

#pragma usingLtd _StdLib


//}}LSL_DECLARATION


FUNCTION GLOBAL TAB _LMCProfileLog::@CT_
0$UINT,
2#0100000000000000$UINT, //TY__LMCPROFILELOG
1$UINT, 4$UINT, (SIZEOF(::_LMCProfileLog))$UINT, 
1$UINT, 1$UINT, 0$UINT, 
TO_UDINT(2883857672), "_LMCProfileLog", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::_LMCProfileLog.ClassSvr.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(619352855), "ClassSvr", 
//Clients:
(::_LMCProfileLog.cStdLib.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000000$UINT, TO_UDINT(2073677046), "cStdLib", TO_UDINT(3689364044), "_StdLib", 0$UINT, 0$UINT, 
END_FUNCTION


#define USER_CNT__LMCProfileLog 3

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT__LMCProfileLog] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION _LMCProfileLog::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT__LMCProfileLog, pCmd := #vmt.CmdTable);
#pragma warning (disable : 74)
	vmt.UserFcts[0]		:= #Logger();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[1]		:= #GetLogPtr();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[2]		:= #InitLogBuffer();

#pragma warning (default : 74)
	ClassSvr.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF ClassSvr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION
//{{LSL_ENCRYPTION 16#800
8B0B8BFFF342212FF2412A957A14F9954FA6069633958BC893B167C1A15E273154A7E2EEDEEE2ABA753443C67B194FBC882336641BD0F64BB53491223DA4529D5F9F152C85C57C2D7182E8CE630E03813615D366AE3D89274E90B912BC4CA30DEC6110F7
68AD1A12CB2A0BD7664B3DF4D63B32F178E9ACCA72CD02904069C3A9B2E3BB46F92E879B4BA6EF347EE0EC499A845583421EF684BABD581D000AE8AF2DD8593C2781773CDAE76F73D818B94DCDE4206D8F56E854DFCB31143826ACFB346CD225E9C057F9
EFA9D745C86EA3B26D1D31596E1F5B734F2F7B70CD3A29CE35C2114CF5F30820AD0FCC7A4AF1F3B65F84663C3A67904DEFA8579511A17EE089C4F288F73B0554FE6AD8DE03FB6EA62522872976EE4B0AD552AD6EE3F8FCAABDC935BF6138E45105B34563
C305A877DACD78A3B116DE9D364ECC98AD29C0A21CD4C2F71300C018EDB748F635813E05E3CB79579A256E33151A1208F2A98E7E2667514220094B24653A3B7CCB345404B632090B2CDE0EE51E1E41D18BCD4B481413F6609E96DAFDD1143257A5F7BF91
8FA824936D5FB0C48F94C500BAE909B795CF4209E4B3F2F6B567D13A8B741EC59FE0F100449E0139FCF95BC3770DAEE02DA713953CFF23A232ABDE908EB4AAB6D38399F1696F06A686B16B9E528B47D98369BCE78FA75D86E8E31172547CF02CA34AFFA7
79EF74FA0DF9CA773AC40A3D4BE689B4F4F5AC30C108288F2549C077F6C6D37822087E3174AAC4A4A48F96AEE005C52432A186C5CC3944665BED7E595CD6CF9275BA3F934B43F0EE36CE794C1E39E48A8D2773087DA119F497A28C7FE49AD06D8EC306F0
890A2D7477F7E4F680CE961FDD6730D086EBFA0B537F8667187A2D1CD6A7D211BD977365FB9323F0535F1F813DF8C3AD51C3EBEAB581821BB2EE3DAFC3A31A06FD99310E6357167932A688290F068DF62C678CB0C724DE81EB0B142256420EE018C56192
9318EB29D238D65CF62B9ED46610CC4BC30AF5BC8076DBB6BAD60E159CF3CA656E8556FFBF04852A336C3438B0EF5AE3B9D083DCDA389B8FB15D9FB52619BB7B3F03C2B312461BB8A264AEA82EE4403CB55D09C8585AD68404A1B257A9C1C190C1E8FC37
3A385D58830D0C45F1CCF47C591FEAE4620B23EC5CC5A01198AACBCE6E61E49E65298816920E0EC5E19E31B49A47B1F9B87C2BA54170DBDF1F54700E390CB79D685EBC5214E53D810E2C9551C2E598DD7AE3E6512CA8A65431724A28BAF8002F353D3283
D959998F995DDE327F827396C8DF84BA160500E1C540A93103F39E3D674085547DBA5F6E629BB9984156CC1F2F5DBA33408AA33525D6E3B23CD1F948622EA04F486DB3B4313154313F60DC45888AAA7AE7F264545978F5BCC399223ED14800BDEC2677B1
B3AC9DF3B93DC465CA5F27207BFF2BD1CF9F4A317B4772B723AB0C8D5C2BF9DF8CDF91274300F0883022EDDC7EF782EA7BAD1306CB075825F3FB8F7E0C790CDF81AD384D2D42EB43D733B05061AF041BC5E745A98D250A38A0B0E734742E3B7AB8411EBD
913625E2C786B45DB791BBE9B31B9B0AE736905967498924A4520BE38099916A96C15F617CEB58EB12E98EFF8C1EF6D84A9CE3694AD6DD6724C5FCAD4250917B9552744033C6BAFF1376F2823468984176FCE923E7475022516D21A459DCE390CCFF8F44
3E019E3E88EFA6318F7E286EDFD8B1F398B619B481501C8EDA3D906EDCA7392CB3AB8568B8B2F9B610507EB0E0F2F0B9CC54B7977E8345B3CC474E3305D51688DA4F4D19DC546CBA6064DA12549F7DD9AA392215711DA14FF8353792B8698FB0BAE9B7FE
908A5A6426F932B43A469C62B4B603BE2EC4FE8B73C0C8A1F102A9E37FA6CD9B1897C16E43C572B07D3798FAF184F1A732857FEC09EE581C8D25BFDC55C5C6A4B6621123D9A140DE9A67F2BCDF1A3AD2B39AEEAFD1802C2B6339A04E0D83D52638C20045
649C10DF02A664276B24E7F1271AC1DD40DDB61663834447060F18B1F075BA4063C415F3E1F0AAE152119C08318C48290D3FD58AD69D132EE4656D60DC1107975BA4E9EB10D3BB39B2FA67FCD58FFF8320864E607D6AE642E5B3A11E4BDDD07F53773F09
95B71FDE2265B1D119EBF2F705A080AB17E1C7154AD4E6433876D48CACC1617BC00C1B42AC40A4C5D1E99155497D2DE94AB649A673F8522C3F462291314C0A6B0262930357C1D1644A120DB9BF647117EA8D7489C31ED553A30547C7AFE7488642A5AA46
11B9838C9841E7CBC93C7F303A4C396C4423F1DFFBCD287E0F1BB79876B37F2D1769F006F251B22C28C5DC8E2EE645DEE080470A70CF7534F8FD09C619AF7298D95F9DEBCAF2E35EF36B5052721296CBC12688FE7FC4491609BFE5E5CDC90A5097E2E89E
CF632171E482DC92A286E3DEDADF932FE99B081756F23AC49215DA0765B77A50846353EB88A370F30D28D55BA44F8E7F31045BDE9FE1E00B0046870476BD393BEA2C9B3B3CF78022C026288ADFA6A8FF9EE5598B055686A8EA5C70362825A58CBEFE57CA
FFCB27B3D3197B45EA1A3CB818B042998C177F4891A6F554D758FF6C8A486B452A02DB6E7754623635E2CF38E1F5CF1646012E1BA36B5FCE581FF482C6D145DACEF3C79461AA6FF8795E87E116D28355BDC0BFA0AEEDC2F3D3B9A89B960FA56AE8A58055
2C818A1698127A011F94E5AB3C7A9E258C4EF5DF0C7F3E74A57DE9BD78884688EA9A67CBAA088E5E45830895F1AA450412D48CEE97C0EC8C5AC1FC719D775F5CB8734BBEE3E760E592F139D45C1D3926F3BC1FDE2A163BA74FB3DBBF51AB384C5521CAAA
3272F83E2427FD96388A7F4E75D9705795D06CDA4B24D4E690FC8B24E663235ED9B1FB52C785A5C7FDD824082180237737B54A28D2C46E5C1FDE4D84CCD191D703C93C99B5521970A42DD201F72021EEB5C4565FE90C0ADD4370856E7E329820342F9DC3
036BED7B4291AC01442DD3A94C57E410D65A02CD9EF5AC6CB81EDAF4DDEEF5F7A9D9155DA84085BC8E0F196FD9AF1245FB81A82D21DFA6B34ECBE6406B8575F1764B6BD27E8B1D21519D644ADDCBBA7DB2F79189008BE6DA962F4561A0E3DB8AD7AEB185
B1ABB64360B2F35DCC5D7FECC96EB383F75C9C670163BD0C0EF3242F3A3115EC10B35D6EDF28714832BF008EAB217DDADFEDC3413343EED6E1BD4591CD663CA1B32C227F28ED4958E7D8E3552BA6A00BE66F00CD0DADBD2233028643230740970748E577
C132865E6E7A633637B9955DF4025A487E08C080C1CDD9ACBE9EF65D07584D04F2F85842350700C624728C7A877EBD7A04225BA9E13C00EA6E3D3882E80210E8D7B8B709A05E6A17333B1DF577938254C7BC8B5E58F27F780A0DA81F332B62E622328CFB
7CB35C27C3CEBBE589999AA0C2B64E50AB9657F98F43A30A2F834ED90B1AB9FA860BCCBAF90B26D5E531402FEC37FE81357C02039195BBF22AFD3C308108B1084DFD6E3B047F23ADC85D0701C69CD9E4524CA6BB83E1C4E47BBCBA12D4C15F105CE66588
7786E44C799FDC25AE64BC60D95255D582161D977E0AC551EB41DD8D1CB296B12EB16EB0190B68025A8E8D7DE8B4410A88BAAA2E64B20F1BFDABF3C2E7D7CDEC22E3D08B6335886A7F91665F63C934ECCB4AAB59170DAC9D91E36F8163E2E83137318DF8
360028026D7A5C9D54EA824F29E13AD1886F71E2CDA757940FF1A74E5824923FA834FA80086D6EB9741A79A59CA8F3C3FB54C1BE6548D584B51DB9AF55423C82D16681324B28AF1912F806FA11C441628F7A0794CC147C145BC1C62ABC532008A1621C93
04CAF1400F0F4669C18048FD2690EA9709C6D73680E9F9A0694D937628361A2F22E4078D0C52C1901F1FC508DA19D6E6E86318A6EB8FD40211CC0A66030BBDD498B62495F5C42F0D82111D5096D9C13C47C56B8B18F6CB3EFA3DD74F2AE110937BEBD716
BAB991F12B4EF3DABC8326D9BD54E18437C6D61E8199708C1F72168AC192F17C191DD8BC671398A69C927F09003F561F4432ED2D9FB66BE580CA633422B9910AC8DA2DC09790DDF87FF4646ABD0A2CE7EA70FBE538E8B3FC2FF1F938D3A50208466DA9ED
9FC854449240F9967F57F79AB9967E1BC36156A2D90657B11F5216F043260B6D99522E887CE57920D49AA4F413BD96A598B87C007C9D709F885E67290AA29E199EFC456DE72FE3249E1372DB2587FEB2C78C603FB8DC9FE06C2F83FA8B393C3F77F8F1F8
66732C9155ACADE7FAB6F838E8DADF631A651FAC1020F723907C169B5518DC0FD5469C09B7CE07FAE687C30FFAD7E8F0D70396B3BB0B15DF62B49A01898FED7075A0353D3FF049C642B3EB9F5551F6E24A6D15EEBB500E8A31E51D143558805728EF1ABC
B7ED398B27D195BBBC525A1DFB93F0A8CDC4D1035542174437B18ACE760B574E7573C1B861225A94078CE6CBC1A9ECF1DF8F8D12716B8EA654BC86F5E620E7FC569562639B9EB1EABE2E77ECE38DC363032F09ADBBFD820E785DAD212A4E7091BDC7D436
815E52A796C28AB3F3CA33E30B7E52447EBCB07D85828B2C8EC7E4BCE772A1199FE89FD464A7052F5292069CD4F28B1AE64A8711343A9104B49662AE2043D77834DACF2FC2801CB72393AA49AD142031388A62C5C239DEC414A122C9D6111B91ECE24733
6D41935FD22053A5BFB52FAE314C6A4FB920239A66F9771E23A7F9B6FE691370F16EF9459E48E87D003193E668F7E1487DBE5C5EF5A63F33F40180C9B498D001E6D1879E576FEBD60390CF3D0D1274CB36738EF4F2B8F00B4FE403FADFAD6824232738EB
D777F7D4AC4FD7ABE78AF205235AE668D5AD73DB3EDE374B5E1938314FD661EE67C121102AEFEABA2D16FD9EAD91092C388B9B7B2BA2D11D368F4F73E85A0C8DF7CF23C8201C68B0FB49B13D95CCF88B3A9F7625220A5EC763EE2525EA0B6016AE1056BF
B0285ADE9D631ACB617DF43C71CD26937B7A1E364D569EE40EB896BF766554EF1B7BE45EE401B3EA47ABA2244F81F624CC5884493AE63A554EC548DAF255700F388E5E03AE647765D8BC5CE37D85214304586E031FFDAC0C0E5654E77DD405F9D83FEEA0
101AC244CB7389850AEB7DA70AD9478250E838C64BF7DB4184D5711B897C80C8B9A372EEACFCC84485732CEDF6371694145E9B3D9ED01D552F9F439A0FF3C3B26523070A098B690D46F113B8F8AB35D2142198F1A3DF91FD869306F399247B1F35372A9A
97ABC5A42CA27D7E3055A8CA25C7B3F568E53EA16D26E5B3C31CF90A3B6D4BF8F636283BCC72F37A55438C8BC4A8DB05EE4ED25DE48256D78413734863E56590530538DF51B5E5E36F5593F101B036B2139533A522AEC49041D6D591ABAE7AE7543B1B33
3CA7766949202E1EEAB4CF2531736208E80452AA12F26BF8867FDE6C61C9CFE47DEC00FCE79364158D182CFE0B54C3C57C70B95CC25B2DB70749049DBE2835C9316E07C6A80522D683D9DC0DBDCC27B4895E475B5AF3DB6C25F678487AFB348F89DD5FD8
7B006367651D55B77DEC17374C8FA76985C943F750F18B35E9245EB5B4E25C42EE4EEC36844BCFE0A752A69FD09994DA264B4A754554F512A0921087B628D8ED83C613003D8DC03C360E70098313F4F1BFC693C78FFBBE803221BC21622C5E796BAA0FAA
C34CB8C96FAF2AB5EA662DA91AC27062589A9A08738B48B92C4D785DCEFCDA77637C9F6FAF1776D16818B264E5DD7311B6DD7C82789C0857943B70F4D05EE909C1D55990BB7F148D8DDDB41ADFD2B2D587F3B7B15689DD1C02CFF20DEC3EC22DE6AC6A7F
835617E392961E23DA061820C6A03500BCEE95AC472AF8EA9A41CE6ED5F656E708EBB5F0AB42B664F4EE101F5F9E6F756178218B3C079D43BBA5BA44C38FC7B0AED2800473D0E678A94B8B937FBB3F08896ADF06EF4C423165B6F213598B88B40CFB7AA9
E29BE7A8E54BC9EB4A4672C802BFAA38F350D6EE1509B329939A7CA36CDD877DBF7F2FA3D6C2C05557AC5F9D085726AC7367BA349809EDF94DE01901FDF2E6737DED938408F89DEFF57AB301B8F7A335C8326E288514AD8990ADE2830234C249F0A8C417
B77CCD038B5010FF10ACD10B5C3A857638506967222766956F83918DE2C4614D9A4189F9EEB575F2145DDE0F1D815EA504944ED6ED30DC3EAF740015AA58DA9FACD8EDBC3644C716AEA87AC8ABE2AAEE6146ECC1D1E32FABA648E9D2EF179160F87B5FCD
68C07C94871E90CA20CA1A03B1B4EB4900FA2C5B7686ADB59468E70BF3A3E7BA8C464D0AEF4775CFF087AD261463B0623AD28DCE7F6B199B93DB003885BF0025F2ADDD41B23FD5DD28C6008DAA6C2E34E81787D926D6357B3F2879188B5FF25BA1991EC0
A63ED5D86948FF68E6E1DAB611086E5298C7B5003274774F71FB6D8E39EBCAD7705A20AEAD687A5E15BE7F2E8F49B6676E8849934D88EB3C148DB5F9C3F0832B0BA06B6BCAECDEC291BCB083450C951D462C142B67FDCD2E3F5FEA4DFB762C533F225DF5
857644B3EB06826F027A68A1D71CCEEA71DCBF58EC4252911ED8790AEF01AF780A7410021A49D4A739BBBC76ACAADB883884717F25010F0C9EF183811DAAD43894983CBB9A9DB0BF58C61DF73CC32C1C5FB72198CF3757E7182C4703CFA1C2733A448EE1
191460A4F339B8B16B7AFC8EF34C27663667806D939CA2B063F36A3213B8B41472A5114DE4C101C3DDFA57990217F2C93C8846F209F61E278D47637884C56D4D8A0D3FB347ADB30DE83A0C604AA06120F2BEAE841788F4D5DEFDEA7ACC7EB05560360565
42EF1B51D5531C720FF35092B64CAAD18F07AC095C34F08939453527E8E39715CA44577891BE24AEF40B026B042FAB154011016809C6A137051B611D9303425032517B6EEAC33DCAB474EF23F8EC120320F0A37B7CA59F2DF28C81A75602E03D7CC8234D
CE6F48AFB6C3131724B22795478628EDF8A0C73D9EE3238C8E39CCB641191EE5445BEDB312F3B104E2CDBF411591DB8F80B1790C8C70DAEEFD281B0BD7E528B669459455E7D86472A9ED11463ECA5E3D57BCA79C7D109CFC04E18B6655B9E64AF86D7729
2813A446C4623900AEDE15AF8EE881996F6C9C09D9F60CAD77EF67DFF97D4443AABBA44F3AFE238D8EEA964E073662CCC4F886A511740C50C08FB0296EEC7C05383C3A44FB591434FB1EFF697D19295C0AE93D9097C471E2C795E1DF64ECD836E9FBF6A5
CACAE8D861609E3C391C49C3366FE9E66F3004F8219274FE9C60D8BBFD32B8D33E6EF9BA50E04673C2FAA823F4E1E84AF27E385F1A058DE18B42004ECD9B3FEA728E5962FBF7B381FF4C344E6FD1412E67730254ACA63DDE20DA9EBC0827CB083BC20140
2ECE742E03B6B5E6BC35D414B25988D2EF642A1841E4289C1967EA95D7D095320147B4FCDD594E8AA824F95783C94F66CE034D13FD6A72B90A7E328CF9B51EDD81C131495A60F1AA79A895C27EFCEC666E66483C55F9F6657173C602F38B16FF1F98AD52
2D233A9492315E926F3813921C12C2363FE77551D7F2EA9ACFD2C3D5C9BB38890AADBCB715F5D04BD7317EF080A387FF0EABD154646719330A2015288791C2A0F12B8700FC955EAB3362A54C68ED26E291C1D1DA461C1D498F36BAA8151EA50FEDFFE4FF
7646A131D7B09046BECBE116A34465D70827079F4008DA4A61D07F12C0BE7CD54A45A40469B8453642E1DCBBF0C968438DD03EA6A2852645A358D01708F6146E9BC789AB8EE5B0C16A3388BBAD5B0D6B01816C2BFFF6E00B95291C49F2889FA7D16A41FE
5D48C5A12868139FE071BF638DD68A8BF1720BF73DB9CF9993D7F63BEDE6E9BA089727FA26817A36E47EF183ABC891DA0FF8867FC875E797DEE6532DB378ECF39329294B88B0E18512D06A4B3CA4A001EC26E2AEBE16502A7ECACDCCA1D997A60DF9E944
ED8B7F46DE6681C4812E481D7754DE41190BCC90F79F4671856115D540E7F8D0E5176502C14EC07311E73ABEB59EBAD58424DC9E313BA587674B9C4865E2F5AEEC14D82138B4BCD7FFB7730F092657E6BA2CC63253C236ED87BFBC88F918D50FDBE3D018
335880038179AA566DD7848B02A1FA31488D5256972B6A75F7C3DE72F6B9890AE0624FA20232E86E829AA714F148950ADEDDE6F570C560635DB204BFCEE4D541F62A7A2C0CBC3876E066ADE7B567386DE7039000292F7FC58320BC0902394272A5B9747C
C8A9427E6697CF5062043ED68D5CCCFDBB376983582783D284122E958655D0BEF1DC375A4925118FB8A9595E8E010D3F081106F3039BF5ABDBF7296118957D1773991CBFC740E64E52A696D2E216EDA3D5EEB5BCA953685BEC337063382DECE274D18289
C6DFB4E2E7A25CDF03BD9CB5F85B75F1B7A7A4B5CB4767A0288E86376F948E1479F7D3170CD6ACD49762BD0F371059C7CBCC39075CFB6CFA8C509B9D250EE4075FC31C222DF9DFA34F0272DF6DFF2F17CE8E41A2D544C037AC21C6613117FDF7C3CD786B
7E5AD8D1D169250FDB4CEEFCC87F844FC20CD61711D2A478FDFB68CBA9248C5F8692F2BF57F5FA190C4B557D9442428FE6C7D69CCCDF76B71118E2C1C3D3F031FED2DCC8ED7C42AE2D736711B8398A4D1643D7C4D65BBD89C284E7633E45E4709BC52433
C708ADD37A75E43AB15A83654BD559C2CAAC063282BFE0C2D729310B7D2D848C2FB12A2D63BA67DB15460832D60E88C0C4D2FB80C718ABF56E3858E4D8985EE47C73BDCC8BA141E5B3B197F2869CF6AD4080A0EA67F27260A8BE1D631B4E985656335455
2F7F1ECD9ADFCB77E05C802CFBC8BC70901B44D8E1767A9FB966B24A3A1B3A06F58C2F3EBE0757790772AE407D88AD270186DEEAEDB307ACBCC327E96429C347EAB7DF43A895F42A7FAD42471DC919BD4B3D2B5965FA48F7A26E98E2C894E0C7512271F8
D3366198139DA7933DB9E1D80F6FBD6081C85E30EE1EB184B30E89CFBE548E43F9667DF4768215196FD86CE2EC63F64785B068E760D411E45611A9C48FD97393278D16DC114BFD28B66D6906A3C53425E9443220A079AA22A30AC9BCC6510D6FAED603E0
EC730E44C5F3D10B564F32D9F6B8A42E835F23BB6A522C9DC50594EA26755EAD3BEA551AE7A82E562BBBCD8580A7F2E3723BF403B409CF447FDF81920F0C7EBB9CF0870565E0267FB2ED16C2A6A4EF702AA46F5F699A01D00F455B6E6C931559870946B0
52039E7196D5DDB6113032BEF300552FD9142AD12BA7AA38CCA1BCB0B58FF0CE05423290367A66F5496097458A5DEB62F43F55DB1A12DB7089ADE59EA783C5C0BCACB6FA95CCA287AB61B29DA07A746D7E878CE0AE9635F49B06F15B694C2411C45054B2
8EA5731A97A81556FCB8B033A11DA09CA64ECF51C86C0D19B39E769264ADCF0C08C6413247048A16D7728B6C96F0348D4B578123392A554A92633C26A78C35960149070DF15F4D446354622BCDC9491C2A53BF2AE0A2EBDB32F3ADDFA50CBFE8CE0D23CD
83BE0E9FF27419B64557B0CB27BE3C5EEB344880DBCA9F3C6C7C46009687D0671748D1EDF3434F6D0DD2178CC3E6530C91DA024F8ACBDFD73B06F591A0FFBD403E80640CB29AA4603C934A6EBA9CC7EF61AAC7B125EFA859939E8955A1557BC0C4284A3D
73B760179F759A87231156570634B0DC6BAE9E4BB7BD7A33C37470B8ADDCC37C88F020B75FD7D9089A1A689088FE7423C130BF653775984C7EACD5E6A86CBCFCDE0D0CBD29B19B871554AA87A8ED5099B8E4F84B98393CA43EB8DD33981B159D6E1FBDB1
7F3AC7A920A0E860330A8FD8670A9587E665E61AFC5230DF2729F877A4FEE828EC38A078579FA829E9D65824F4880F69FE05B0B69A0E35447F85D8534809CBACFC479186EFD0F77141168B1A1BE242D453E14BED0C99550E9741765626C08463354AFC8D
C98548FFC8F9BE95F212E1141A0BBCFDAA498BCF184F415ACD187B5DD463D1C4314AB701E3553607F467B1812D8D50C29158D4E9A4D2C5D745E0BC9AB2E8B9976DF5CFEAD489F471902F460DD470A343B80B4F1F28C58D84994D92DDEE83C3C3D7B63E47
5C3EC5DAE3BE45226168BA05F2DE1605FD643A4C372BB286EFE0E839BECEBABDD51FB62709A08BF8EE6BEF45C8F0EA17E172CFF043770CA21C4D25BD4491B5B54EB046B0225ADA04651CBDFB461DF255E3AB5887ECE791B7311BC96BFDAB25B6B33B93F3
5C972C2DF9A18284C96D69EAE8D50ACCF431BB6859A4BFECEA8176FBADCF35AB8B222EFE627A2FAE92B86CC2CC8D0FD2C7AE1EDB8DE0E70C639E10BA6DD195450AABA43F45E2DEE17305919EFCE3895FB0A3B9AB817E053DF7BCBDCAFFBABEE15423AFA0
4EB96746376B2F1DA12D660269E266350CF721F7504093FAE0B29E4BB248310149350EBA819E9E4CF67A808C62CC6686B3A2D0CF7ADAE4145AC5573981205B5079377BE528606781CB38E759521BE3CF3688D9783EFE75C1D6B36034EF8ACC8B1EE6A7BA
6460B2F9D97EF0E75381728284216E19C4C7F21530561DB864504C746E472DA383C1A0FE1F331C0E2CDB7A98A855F0539A04BE2EFD2306A9876BFDB183ACA7AFB34686752A53831AE98F2C45A4B1D65864ACFDC98E751977C852267AEA5BC78F6BC52103
1D2838EA4A253D20A96A42FE6A50C41DF3DE23749550AF02A8BC8E8E2F6065B0B4BD5C35F2D4C93509AC9588EA56405373C8D83F8F48BE4BAB9E4EC514B1AE9185112A5E0088A3E490E3BE34D6E721324CD27A31375A8A7720521F1064F00767CBE3FF14
455DCB5275EEB684303314A6BE84C86A1E085D6E3A0DDE033DA340CA022625C534D7A201D45DA49BD15112314C275B0FC36860FEAB81797D0563A67C296C9D7BEEB271418EC39D4D2EB406AC5C12A67D625734F299CF00632B93C8A1F9D58BDFC2CC9E19
2F8EA074FCD2A935E6A887640A6607CEE9EBE05C13FDBE24D9740E0EC851237D98A73BEB67808499E3A2C6E4018DDB3FA04D532262B8DCEA27C9B814EB35F41CE703BB1B233908311354A71DF1E853A9FF81954AADEBE422B133BE142B32088898C6F0E8
C83AE8D9310095177EF9B6C319E258CFC6E8E666A7EE32CB9E2A3B2D2EDCE4813C8A715C42A2D79839565EED684ED92A64C4BF0607154AB5CC4763C23FC49AB87725F3EFC60EF938066CB144E44AF1970F4B556EB0F1D9A5951B386A6669BB80F7462114
D7C61ED710FD07B7D0887CDA6AFE9B2247FD749E31B59331F6880ABC27D5168D234249820C170D1045E5D1177AB62B06282894FCD20B16D237D161E3E6F2B2CE98A4236E4EDED8F4621F1A416ADECE695D7AF9EE8726E6D5A06A3C4A65C9B469A879D1E5
9B5C8602BDABCCB3E2CD86682B27ABDBB3F6C1C18A3E626EBDCF9477BE1005B7B064B62C4FE1A10277024E885A021C09C04CE551C56F6631BF46667CC1FA82BEC89BFEFEE608EEF29EA873B47A761FE1EA1846ED07AF0EF87CEBDD3F55F1F422E1024B03
C3A86427626304563B537E740B79795E44D651006EC0D296B4188621DCD53ABC47C5D16F782048B22BDCA7F492CCFF4DD00B01C118958792FBACD8937A52B6D9792B2A12015F2650794C69B5FCF0B712FF0168BEE37A304C2FFB11BF34D88CD035A8593F
A7B5B35F2F591E0AB17C0089C6C9AED6F2D36814F2B73192A7EBB38C063F671C36A658F4BA675B4875A85227DBE3A39637FC56387B993741ADF07F10E33F180776DC968168EF8281C1B0D67273D54EA0FC070A76E453D3E5C15B96A7A137249A885CDBA7
56B78273B126DD08D038AC0035DE2A9BE36FDC8C7ADC6F2B00AEC2DC4F53BB7A0C20AA2468790E87B7D51FCA03FD8FC1D2770F9CF1105D396E397FD412DEF108DCC8BA0006F5D9DA19B99C4E7711C4D4F5D12255DF0E8B14DD051555E772B8B012EC025A
06FE36ECFB04B66861BD64E696014F13931E3FC61D7FDCD078D29475093976E908FDB250CCA7D9FA1499C51E08E97B00DA6F45E27F2C1B757181A8A4C00E87F5D37F2480D2343C2828A2C70570188F4BC76DFC5533617D9EE9089FC132B7DCBA183B8A65
0C87D4C2AA063889C1940D3A200DC4ABC3698CC55DE31D41754CFC3EEE63D460C89F144C93722AE2C2E5D47F95BB418ECA47752A2E1AA3877770CBAAAFE85709696F4ED67AF1A176B01740765E97C32470D8B385734866623CF62B7424F38B60922305D1
D8A2437F83412ADEEB5A72A7876294CE1631A2F8F1DA66F9901F04CBCC4DAFA61F1DEC4B1E6E4C03FA06C8E95319616BE3F47D46CD61F826B448F27DB45B941589710C46A49744DB12C2B0E37F90AEFEB54F8AA8BB1FD9CF0C47231D10376649BF7F9322
18B9D6E6C93626956FB31F450A7FFB0A3C69D4CD