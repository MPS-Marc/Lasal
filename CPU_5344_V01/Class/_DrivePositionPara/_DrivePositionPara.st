//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "_DrivePositionPara"
	Revision           = "1.2"
	GUID               = "{8936EC46-33B7-4AC2-9A21-E627F9317CAB}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "true"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	IconPath           = ".\Class\_DriveMngBase\Drive.ico"
	SharedCommandTable = "true"
	Objectsize         = "(360,660)"
	Comment            = "displays the position parameter of the connected Drive">
	<Channels>
		<Server Name="P_KV" GUID="{FDD19806-2D35-4DCB-99DE-CAF0AA68993F}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="Para-Nr : 070&#13;&#10;Unit  : [(10e-3)/s]&#13;&#10;Description : Proportional gain of the position controller&#13;&#10;d/dt[I-PCMD] = P-KV * [I-PE]"/>
		<Server Name="P_PEMAX" GUID="{949CC027-824C-449B-84C6-DCCD0BE058E5}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="Para-Nr : 075&#13;&#10;Unit  : [-]&#13;&#10;Description : if the positon error [I-PE] is greater than P-PEMAX &#13;&#10;the bit PEMAX in [I-STATUS] is set"/>
		<Server Name="P_PSCALE" GUID="{BDCCBA60-15AD-4057-B368-F4A1680C199F}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="Para-Nr : 072&#13;&#10;Unit  : [Bit]&#13;&#10;Description : The internal actual position consists of 64 bit. &#13;&#10;The lower 32 bit is the position within one revolution and the higher 32 bit are the number of revolutions.&#13;&#10;P-PSCALE represents the number of shifts of the internal 64 Bit poistion.&#13;&#10;This gives the possibility to scale the position setpoint of the controller to the internal position.&#13;&#10;&#13;&#10;0 = the 32 bit controller position represents the position within one revolution.&#13;&#10;16 = the 32 bit controller position represents the position of 16 bit within one revolution and 16 bit revolutions"/>
		<Server Name="P_SFF" GUID="{645C3766-A6C6-46C2-B24F-E69E9952047E}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="Para-Nr : 071&#13;&#10;Unit  : [Promille]&#13;&#10;Description : Speed feed forward of the position controller  &#13;&#10;(P-SFF = 1000 is equal to 1)"/>
		<Server Name="P_SMODE" GUID="{DC03A298-80EA-4EC0-BA7D-20799D646393}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="Para-Nr : 076&#13;&#10;Unit  : [-]&#13;&#10;Spline Mode&#13;&#10;&#13;&#10;0 .. The speed feed forward is calculated by the host controller&#13;&#10;1 .. The speed feed forward is calculated by the drive: difference new position set-point minus last position set point"/>
		<Server Name="P_SSCALE" GUID="{10723B49-D923-4FFA-8DBD-56F8027CC1CC}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="Para-Nr : 073&#13;&#10;Unit  : [Promille]&#13;&#10;Description : Scaling of the speed feedforward = speed setpoint = P-SSCALE / 1000 (1000 is equal to 1)&#13;&#10;The speed feed forward comes from the host controller for the spline interpolation."/>
		<Server Name="P_TFF" GUID="{9C03078E-BEEC-44E3-BC3A-7F30993FCCB0}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="Para-Nr : 074&#13;&#10;Unit  : [Promille]&#13;&#10;Description : Scaling of the torque feed forward for the &#13;&#10;position controller in [G-MODE] = 3 and -3"/>
	</Channels>
	<RevDoku>
		<Owner Company="Sigmatek" Author="HasHan"/>
		<Dokumentation Revision="1.2" Date="08.11.2016" Author="ZoePat" Company="Sigmatek" Description="Client &quot;DriveAxis&quot; is now not required."/>
		<Dokumentation Revision="1.1" Date="10.08.2010" Author="Ramand" Company="Sigmatek" Description="For the number of parameters in this group now a constant is used instead of the numerical value for easier change in the future"/>
		<Dokumentation Revision="1.0" Date="05.08.2009" Author="HasHan" Company="Sigmatek" Description="Creation"/>
	</RevDoku>
	<Network Name="_DrivePositionPara">
		<!-- List of Components in this network -->
		<Components>
			<Object
				Name       = "_base"
				GUID       = "{9C4C117F-695A-40AA-B0B6-04DF5ACA1446}"
				Class      = "_DriveParaBase"
				Position   = "(218,120)"
				Visualized = "false">
				<Channels>
					<Server Name="State"/>
					<Client Name="DriveAxis"/>
					<Client Name="ErrorCode"/>
				</Channels>
			</Object>
		</Components>
		<Comments>
		</Comments>
		<!-- List of Connections in this network -->
		<Connections>
			<Connection Source="this.State" Destination="_base.State" Vertices="(740,210),(568,210),"/>
			<Connection Source="_base.DriveAxis" Destination="this.DriveAxis" Vertices="(218,210),(38,210),"/>
			<Connection Source="_base.ErrorCode" Destination="this.ErrorCode" Vertices="(218,270),(38,270),"/>
		</Connections>
		<!-- Headerfiles -->
		<Options>
		</Options>
	</Network>
</Class>
*)
#pragma using _DriveParaBase

_DrivePositionPara : CLASS
: _DriveParaBase
  //Servers:
	P_KV 	: SvrCh_DINT;
	P_SFF 	: SvrCh_DINT;
	P_PSCALE 	: SvrCh_DINT;
	P_SSCALE 	: SvrCh_DINT;
	P_TFF 	: SvrCh_DINT;
	P_PEMAX 	: SvrCh_DINT;
	P_SMODE 	: SvrCh_DINT;
  //Clients:
  //Variables:
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL Init;
	
	FUNCTION VIRTUAL GLOBAL RefreshPara
		VAR_INPUT
			usParaNr 	: USINT;
			dValue 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL RefreshAllPara;
	
	FUNCTION VIRTUAL GLOBAL P_KV::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL P_SFF::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL P_PSCALE::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL P_SSCALE::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL P_TFF::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL P_PEMAX::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL P_SMODE::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

//}}LSL_DECLARATION


FUNCTION GLOBAL TAB _DrivePositionPara::@CT_
0$UINT,
2#0100000000000000$UINT, //TY__DRIVEPOSITIONPARA
1$UINT, 2$UINT, (SIZEOF(::_DrivePositionPara))$UINT, 
7$UINT, 0$UINT, 0$UINT, 
TO_UDINT(3572968528), "_DrivePositionPara", //Class
TO_UDINT(3299882984), "_DriveParaBase", 1$UINT, 2$UINT, //Baseclass
//Servers:
(::_DrivePositionPara.P_KV.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(472701756), "P_KV", 
(::_DrivePositionPara.P_SFF.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(976862189), "P_SFF", 
(::_DrivePositionPara.P_PSCALE.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(875015471), "P_PSCALE", 
(::_DrivePositionPara.P_SSCALE.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2998132609), "P_SSCALE", 
(::_DrivePositionPara.P_TFF.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1064742248), "P_TFF", 
(::_DrivePositionPara.P_PEMAX.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(589845054), "P_PEMAX", 
(::_DrivePositionPara.P_SMODE.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3167309043), "P_SMODE", 
//Clients:
END_FUNCTION


#define USER_CNT__DrivePositionPara 4

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT__DrivePositionPara] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION _DrivePositionPara::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
		nCmdSize	: UINT;
	END_VAR

	ret_code	:= _DriveParaBase::@STD();
	IF ret_code <> C_OK THEN
		RETURN;
	END_IF;
	nCmdSize		:= _DriveParaBase::State.pMeth^.nCmds$UINT*SIZEOF(pVoid) + CMDMETH.Init;

	_memcpy((#vmt.CmdTable)$^USINT, _DriveParaBase::State.pMeth, nCmdSize);
	vmt.CmdTable.nCmds		:= nSTDCMD + USER_CNT__DrivePositionPara;
	vmt.CmdTable.Init		:= #Init();
#pragma warning (disable : 74)
	vmt.UserFcts[2]		:= #RefreshPara();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[3]		:= #RefreshAllPara();

#pragma warning (default : 74)
	_DriveParaBase::State.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF _DriveParaBase::State.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	P_KV.pMeth			:= StoreMethod( #M_RD_DIRECT(), #P_KV::Write() );
	IF P_KV.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	P_SFF.pMeth			:= StoreMethod( #M_RD_DIRECT(), #P_SFF::Write() );
	IF P_SFF.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	P_PSCALE.pMeth			:= StoreMethod( #M_RD_DIRECT(), #P_PSCALE::Write() );
	IF P_PSCALE.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	P_SSCALE.pMeth			:= StoreMethod( #M_RD_DIRECT(), #P_SSCALE::Write() );
	IF P_SSCALE.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	P_TFF.pMeth			:= StoreMethod( #M_RD_DIRECT(), #P_TFF::Write() );
	IF P_TFF.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	P_PEMAX.pMeth			:= StoreMethod( #M_RD_DIRECT(), #P_PEMAX::Write() );
	IF P_PEMAX.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	P_SMODE.pMeth			:= StoreMethod( #M_RD_DIRECT(), #P_SMODE::Write() );
	IF P_SMODE.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION
FUNCTION VIRTUAL GLOBAL _DrivePositionPara::Init

  if _firstscan then
    if (IsAxisConnected() = TRUE) then
      DriveAxis.AddParaObjects(Index:=IDX_POS_PARA, pThis:=this); // add the object in the list of the axis
    end_if;
  end_if;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL _DrivePositionPara::P_KV::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	if (input <> P_KV) & (bNoASync = FALSE) then
    result := SetASyncCmd(ParaNr:= SDD_P_KV, ParaRdWr:= 1, ParaValue:= input, pThis:= this);
  end_if;
  
  P_KV := input;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL _DrivePositionPara::P_SFF::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	if (input <> P_SFF) & (bNoASync = FALSE) then
    result := SetASyncCmd(ParaNr:= SDD_P_SFF, ParaRdWr:= 1, ParaValue:= input, pThis:= this);
  end_if;
  
  P_SFF := input;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL _DrivePositionPara::P_PSCALE::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	if (input <> P_PSCALE) & (bNoASync = FALSE) then
    result := SetASyncCmd(ParaNr:= SDD_P_PSCALE, ParaRdWr:= 1, ParaValue:= input, pThis:= this);
  end_if;
  
  P_PSCALE := input;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL _DrivePositionPara::P_SSCALE::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	if (input <> P_SSCALE) & (bNoASync = FALSE) then
    result := SetASyncCmd(ParaNr:= SDD_P_SSCALE, ParaRdWr:= 1, ParaValue:= input, pThis:= this);
  end_if;
  
  P_SSCALE := input;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL _DrivePositionPara::P_TFF::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	if (input <> P_TFF) & (bNoASync = FALSE) then
    result := SetASyncCmd(ParaNr:= SDD_P_TFF, ParaRdWr:= 1, ParaValue:= input, pThis:= this);
  end_if;
  
  P_TFF := input;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL _DrivePositionPara::P_PEMAX::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	if (input <> P_PEMAX) & (bNoASync = FALSE) then
    result := SetASyncCmd(ParaNr:= SDD_P_PEMAX, ParaRdWr:= 1, ParaValue:= input, pThis:= this);
  end_if;
  
  P_PEMAX := input;

END_FUNCTION




FUNCTION VIRTUAL GLOBAL _DrivePositionPara::RefreshPara
	VAR_INPUT
		usParaNr 	: USINT;
		dValue 	: DINT;
	END_VAR
  
  case usParaNr of
  SDD_P_KV :
    P_KV := dValue;
  
  SDD_P_SFF :
    P_SFF := dValue;
  
  SDD_P_PSCALE :
    P_PSCALE := dValue;
  
  SDD_P_SSCALE :
    P_SSCALE := dValue;
  
  SDD_P_TFF :
    P_TFF := dValue;
  
  SDD_P_PEMAX :
    P_PEMAX := dValue;
    
  SDD_P_SMODE :
    P_SMODE := dValue;
  end_case;
  
END_FUNCTION


FUNCTION VIRTUAL GLOBAL _DrivePositionPara::RefreshAllPara

  // number of Parameters in this group
  AnzASyncPara += NBR_POS_PARA;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL _DrivePositionPara::P_SMODE::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	if (input <> P_SMODE) & (bNoASync = FALSE) then
    result := SetASyncCmd(ParaNr:= SDD_P_SMODE, ParaRdWr:= 1, ParaValue:= input, pThis:= this);
  end_if;
  
  P_SMODE := input;

END_FUNCTION
