//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "cntrTime"
	Revision           = "0.0"
	GUID               = "{85AFE257-D408-4620-80AB-E2E0765D253C}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "true"
	DefBackground      = "10 ms"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(284,120)">
	<Channels>
		<Server Name="ClassSvr" GUID="{F7D4960D-8714-4F3E-BC25-EFF0CB028210}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="resetSoftCounter" GUID="{84D9FF9F-C464-4C2A-BA1A-F343E14C9B9C}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="softCntrHr" GUID="{2C8F609D-2900-4D2E-BC5D-42ACE9F1B96C}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="softCounter" GUID="{EFEACF20-2FF7-4BCC-B215-DBE360B9C9C1}" Visualized="false" Initialize="false" WriteProtected="false" Retentive="SRam"/>
		<Server Name="totalCounter" GUID="{0DF52DF3-921D-4911-ABB6-51DE0AEF4267}" Visualized="false" Initialize="false" WriteProtected="false" Retentive="SRam"/>
		<Server Name="totalCounterHr" GUID="{5891774D-E95A-4085-B50D-8190AB2A989C}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Client Name="active" Required="false" Internal="false"/>
	</Channels>
</Class>
*)
cntrTime : CLASS
  //Servers:
	ClassSvr 	: SvrChCmd_DINT;
	softCounter 	: SvrCh_DINT;
	totalCounter 	: SvrCh_DINT;
	resetSoftCounter 	: SvrCh_DINT;
	softCntrHr 	: SvrCh_DINT;
	totalCounterHr 	: SvrCh_DINT;
  //Clients:
	active 	: CltCh_DINT;
  //Variables:
		timeActive 	: UDINT;
		timeWritten 	: UDINT;
		tmpCounter 	: DINT;
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL Init;
	
	FUNCTION VIRTUAL GLOBAL Background
		VAR_INPUT
			EAX 	: UDINT;
		END_VAR
		VAR_OUTPUT
			state (EAX) 	: UDINT := READY;
		END_VAR;
	
	FUNCTION storeIt;
	
	FUNCTION VIRTUAL GLOBAL resetSoftCounter::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

//}}LSL_DECLARATION


FUNCTION GLOBAL TAB cntrTime::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_CNTRTIME
0$UINT, 0$UINT, (SIZEOF(::cntrTime))$UINT, 
6$UINT, 1$UINT, 0$UINT, 
TO_UDINT(2072864996), "cntrTime", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::cntrTime.ClassSvr.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(619352855), "ClassSvr", 
(::cntrTime.softCounter.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000001000$UINT, TO_UDINT(4203045961), "softCounter", 
(::cntrTime.totalCounter.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000001000$UINT, TO_UDINT(1698109949), "totalCounter", 
(::cntrTime.resetSoftCounter.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(260643724), "resetSoftCounter", 
(::cntrTime.softCntrHr.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1886885425), "softCntrHr", 
(::cntrTime.totalCounterHr.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(962966829), "totalCounterHr", 
//Clients:
(::cntrTime.active.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(3152427908), "active", 
END_FUNCTION


#define USER_CNT_cntrTime 1

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_cntrTime] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION cntrTime::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT_cntrTime, pCmd := #vmt.CmdTable);
	vmt.CmdTable.Init		:= #Init();
#pragma warning (disable : 74)
	vmt.UserFcts[0]		:= #Background();

#pragma warning (default : 74)
	ClassSvr.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF ClassSvr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	softCounter.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF softCounter.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	totalCounter.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF totalCounter.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	resetSoftCounter.pMeth			:= StoreMethod( #M_RD_DIRECT(), #resetSoftCounter::Write() );
	IF resetSoftCounter.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION
// JdK 21-11-2019: class to count time something like a motor is on, they are stored in ram servers, don't write them to often

FUNCTION VIRTUAL GLOBAL cntrTime::Init

  tmpCounter:= totalCounter;

END_FUNCTION

FUNCTION VIRTUAL GLOBAL cntrTime::Background
	VAR_INPUT
		EAX 	: UDINT;
	END_VAR
	VAR_OUTPUT
		state (EAX) 	: UDINT;(* := READY *)
	END_VAR

  active:= active.Read();
  IF active= 0 THEN
    timeActive:= ops.tAbsolute;
  ELSIF ops.tAbsolute-timeActive > 100 THEN //store every 0.1 second
    softCounter+= 1;
    totalCounter+= 1;
    timeActive+= 100;
    
    IF totalCounter-tmpCounter > 1200 THEN //store every 2 minutes
      storeIt();
    END_IF;
    
  END_IF;
  
  IF totalCounter = tmpCounter THEN
    timeWritten:= ops.tAbsolute;
  ELSIF ops.tAbsolute-timeWritten > 300000 THEN //after 5 minutes
    storeIt();
  END_IF;

  softCntrHr:=softCounter/3600; //in 1/10 hr
  totalCounterHr:=totalCounter/3600;

END_FUNCTION





FUNCTION cntrTime::storeIt

  tmpCounter:=totalCounter;
  softCounter-= 1; //we can only store a new value
  totalCounter-= 1;
  softCounter.Write(input:=softCounter+1); //write action to store value
  totalCounter.Write(input:=totalCounter+1);

END_FUNCTION


FUNCTION VIRTUAL GLOBAL cntrTime::resetSoftCounter::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	resetSoftCounter := input;
  softCounter.Write(input:=0);
	result := resetSoftCounter;

END_FUNCTION
