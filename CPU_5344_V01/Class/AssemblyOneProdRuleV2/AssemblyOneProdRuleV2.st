//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "AssemblyOneProdRuleV2"
	Revision           = "0.0"
	GUID               = "{5811BDA4-0922-4F6F-BBBC-C88CD04E1925}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "true"
	DefBackground      = "1000 ms"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(480,300)">
	<Channels>
		<Server Name="Amount" GUID="{76990DF8-1294-4BD6-8623-53C7942BAC18}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="ClassSvr" GUID="{81E9E9F8-C3BF-4C02-8236-A57F6043DE15}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="Length" GUID="{3F806AB4-E388-49D3-B2AC-65C3F219FFFC}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="ProductId" GUID="{D3B1FC46-F428-42C4-946C-681497339419}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="rnr" GUID="{7F27B602-7A98-4749-870A-96569D0ADF6A}" Visualized="true" Initialize="true" WriteProtected="false" Retentive="false"/>
		<Server Name="strDescription" GUID="{6738FA51-4D6F-4C9F-9595-A0084708DED6}" Visualized="true" Remotely="true" Initialize="true" WriteProtected="false" Retentive="false" Comment="use this channel to access the string functions"/>
		<Client Name="str_Description" Required="true" Internal="true"/>
	</Channels>
	<Network Name="AssemblyOneProdRuleV2">
		<!-- List of Components in this network -->
		<Components>
			<Object
				Name       = "str_Description"
				GUID       = "{F6600431-5E19-472D-AA48-C436715ABF58}"
				Class      = "EditString"
				Position   = "(120,300)"
				Visualized = "true"
				Remotely   = "true">
				<Channels>
					<Server Name="Data"/>
					<Server Name="Handle"/>
					<Server Name="NewData"/>
				</Channels>
			</Object>
		</Components>
		<Comments>
		</Comments>
		<!-- List of Connections in this network -->
		<Connections>
			<Connection Source="this.str_Description" Destination="str_Description.Data"/>
			<Connection Source="this.strDescription" Destination="str_Description.Data" Vertices="(608,330),(436,390),"/>
		</Connections>
		<!-- Headerfiles -->
		<Options>
		</Options>
	</Network>
</Class>
*)
AssemblyOneProdRuleV2 : CLASS
  //Servers:
	ClassSvr 	: SvrChCmd_DINT;
	rnr 	: SvrCh_DINT;
	strDescription 	: SvrCh_UDINT;
	Amount 	: SvrCh_DINT;
	ProductId 	: SvrCh_DINT;
	Length 	: SvrCh_DINT;
  //Clients:
	str_Description 	: CltChCmd_EditString;
  //Variables:
		ptr 	: ^AssemblyDbV2::tRecipeLine;
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL Background
		VAR_INPUT
			EAX 	: UDINT;
		END_VAR
		VAR_OUTPUT
			state (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION GLOBAL WritePtr
		VAR_INPUT
			iptr 	: ^AssemblyDbV2::tRecipeLine;
		END_VAR;
	
	FUNCTION GLOBAL WriteDescription
		VAR_INPUT
			inStr 	: gbl_datatypes::tStr20;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL strDescription::Read
		VAR_OUTPUT
			output (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL strDescription::Write
		VAR_INPUT
			input (EAX) 	: UDINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Amount::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL ProductId::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Length::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

#pragma using EditString


//}}LSL_DECLARATION


FUNCTION GLOBAL TAB AssemblyOneProdRuleV2::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_ASSEMBLYONEPRODRULEV2
0$UINT, 0$UINT, (SIZEOF(::AssemblyOneProdRuleV2))$UINT, 
6$UINT, 1$UINT, 0$UINT, 
TO_UDINT(1616900063), "AssemblyOneProdRuleV2", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::AssemblyOneProdRuleV2.ClassSvr.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(619352855), "ClassSvr", 
(::AssemblyOneProdRuleV2.rnr.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2078699935), "rnr", 
(::AssemblyOneProdRuleV2.strDescription.pMeth)$UINT, _CH_SVR$UINT, 2#0000000001000000$UINT, TO_UDINT(415395287), "strDescription", 
(::AssemblyOneProdRuleV2.Amount.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2119808964), "Amount", 
(::AssemblyOneProdRuleV2.ProductId.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3879709768), "ProductId", 
(::AssemblyOneProdRuleV2.Length.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(4052048180), "Length", 
//Clients:
(::AssemblyOneProdRuleV2.str_Description.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(3670666575), "str_Description", TO_UDINT(648754807), "EditString", 0$UINT, 0$UINT, 
END_FUNCTION


#define USER_CNT_AssemblyOneProdRuleV2 1

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_AssemblyOneProdRuleV2] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION AssemblyOneProdRuleV2::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT_AssemblyOneProdRuleV2, pCmd := #vmt.CmdTable);
#pragma warning (disable : 74)
	vmt.UserFcts[0]		:= #Background();

#pragma warning (default : 74)
	ClassSvr.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF ClassSvr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	rnr.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF rnr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	strDescription.pMeth			:= StoreMethod( #strDescription::Read(), #strDescription::Write() );
	IF strDescription.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Amount.pMeth			:= StoreMethod( #M_RD_DIRECT(), #Amount::Write() );
	IF Amount.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	ProductId.pMeth			:= StoreMethod( #M_RD_DIRECT(), #ProductId::Write() );
	IF ProductId.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Length.pMeth			:= StoreMethod( #M_RD_DIRECT(), #Length::Write() );
	IF Length.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION


FUNCTION VIRTUAL GLOBAL AssemblyOneProdRuleV2::strDescription::Read
	VAR_OUTPUT
		output (EAX) 	: UDINT;
	END_VAR

	strDescription := str_Description.Data.Read();
	output := strDescription;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL AssemblyOneProdRuleV2::strDescription::Write
	VAR_INPUT
		input (EAX) 	: UDINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: UDINT;
	END_VAR

	strDescription := input;
	result := (str_Description.Data.Write(strDescription))$UDINT;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL AssemblyOneProdRuleV2::Amount::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

  if ptr <> NIL then
    Amount := input;
    ptr^.amount := Amount;
    result := Amount;
  else
    result := ACCESS_DENIED;
  end_if;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL AssemblyOneProdRuleV2::ProductId::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR


  if ptr <> NIL then
    ProductId := input;
    ptr^.productId := ProductId;
    result := ProductId;
  else
    result := ACCESS_DENIED;
  end_if;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL AssemblyOneProdRuleV2::Background
	VAR_INPUT
		EAX 	: UDINT;
	END_VAR
	VAR_OUTPUT
		state (EAX) 	: UDINT;
	END_VAR
//
//  if str_Description.NewData.Read() <> 0 then
//    _memset(dest:=#ptr^.ArtikelNummer[0], usByte:=0, cntr:=sizeof(ptr^.ArtikelNummer));
//    str_Description.ReadDataOff(udOff:=0, pData:=#ptr^.ArtikelNummer[0], udMax:=sizeof(ptr^.ArtikelNummer));
//    ptrChanged^ := TRUE;
//    str_Description.NewData.Write(input:=0);
//  end_if;
    
	state := READY;

END_FUNCTION


FUNCTION GLOBAL AssemblyOneProdRuleV2::WritePtr
	VAR_INPUT
		iptr 	: ^AssemblyDbV2::tRecipeLine;
	END_VAR

  ptr := iptr;
  Amount := ptr^.amount;
  ProductId := ptr^.productId;
  //str_Description.WriteDataOff(udLen:=sizeof(Samenstelling::tRegel.ArtikelNummer), udOff:=0, pData:=#ptr^.ArtikelNummer[0]);

END_FUNCTION


FUNCTION GLOBAL AssemblyOneProdRuleV2::WriteDescription
	VAR_INPUT
		inStr 	: gbl_datatypes::tStr20;
	END_VAR
    
  str_Description.WriteDataOff(udLen:=sizeof(inStr), udOff:=0, pData:=#inStr[0]);

END_FUNCTION


FUNCTION VIRTUAL GLOBAL AssemblyOneProdRuleV2::Length::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	Length := input;
	result := Length;

END_FUNCTION
