//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)

//{{LSL_DEFINES
#define IIO041_DEVICE_ID  1077
//}}LSL_DEFINES

//{{LSL_DECLARATION

(*!
<Class
	Name               = "IIO041"
	Revision           = "1.11"
	GUID               = "{20AB0EC7-8E0A-49BA-BCB9-6CE540648EED}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "true"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(652,120)"
	Comment            = "SDIAS SDCI Master Module&#13;&#10;&#13;&#10;with 4 Ports to be used for SDCI devices, as +24V digital Input or as +24V digital Output.&#13;&#10;Additionally the Pin 2 of every Port is a +24V digital Input">
	<Channels>
		<Server Name="SdciOut_1" GUID="{95865F8B-EE82-45F5-A8A2-9C1C1C95E40C}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false" Comment="Connect the client &quot;SdciIn&quot; of an SDCIDevice-derivation object here"/>
		<Server Name="SdciOut_2" GUID="{C6D0DE09-5872-45D7-9838-0FA75F90C175}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false" Comment="Connect the client &quot;SdciIn&quot; of an SDCIDevice-derivation object here"/>
		<Server Name="SdciOut_3" GUID="{9DCFF359-C189-43D3-87A4-E243AF06E5B3}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false" Comment="Connect the client &quot;SdciIn&quot; of an SDCIDevice-derivation object here"/>
		<Server Name="SdciOut_4" GUID="{EDC8061C-FB27-427D-831C-5322255F692C}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false" Comment="Connect the client &quot;SdciIn&quot; of an SDCIDevice-derivation object here"/>
		<Client Name="SDCIPort1" Required="true" Internal="true"/>
		<Client Name="SDCIPort2" Required="true" Internal="true"/>
		<Client Name="SDCIPort3" Required="true" Internal="true"/>
		<Client Name="SDCIPort4" Required="true" Internal="true"/>
	</Channels>
	<RevDoku>
		<Owner Company="Sigmatek" Author="RamAnd"/>
		<Dokumentation Revision="1.11" Date="12.08.2019" Author="LazJos" Company="Sigmatek" Description="Added support for HWAlarms."/>
		<Dokumentation Revision="1.10" Date="08.07.2019" Author="LanSte" Company="Sigmatek" Description="Added support to endianswap asy data."/>
		<Dokumentation Revision="1.9" Date="24.06.2019" Author="LanSte" Company="Sigmatek" Description="Added buffer for SDOs.&#13;&#10;Made asy commands threadsafe."/>
		<Dokumentation Revision="1.8" Date="04.04.2019" Author="HaeTho" Company="Sigmatek" Description="sensors may now be initialized either in init phase (as it was until now) or in cyclic task"/>
		<Dokumentation Revision="1.7" Date="09.01.2019" Author="FurDom" Company="Sigmatek" Description="Added function for Spi Write in SdiasBase class."/>
		<Dokumentation Revision="1.6" Date="08.06.2018" Author="RamAnd" Company="Sigmatek" Description="LASAL Hardware Description (.lhd) file has been updated."/>
		<Dokumentation Revision="1.5" Date="23.01.2018" Author="RamAnd" Company="Sigmatek" Description="Log messages have been standardized for easier maintenance, easier use in any class and to allow spam filtering. Code for the logging functions is now only located in HwControl."/>
		<Dokumentation Revision="1.4" Date="03.07.2017" Author="RamAnd" Company="Sigmatek" Description="Added support for SDIAS simple master (CP101/CP102)"/>
		<Dokumentation Revision="1.3" Date="16.05.2017" Author="RamAnd" Company="Sigmatek" Description="When adding an SDO (i.e. via ReadSPIData) from background priority it was possible that the adding process got interrupted by receiving the answer to this SDO which is handled in cyclic priority. In the error case the answer was unexpected and therefore ignored. Then the class signals a timeout while waiting for the answer, which already arrived before waiting for it. Added mutex and changed instruction order to prevent this error.&#13;&#10;Corrected port number check in newinst to prevent an access exception if a user connects the SDCI device on the wrong server."/>
		<Dokumentation Revision="1.2" Date="20.03.2017" Author="RamAnd" Company="Sigmatek" Description="Added the possibility to connect a module during runtime (call Reconnect() method of SDCIDevice).&#13;&#10;Added the possibility to skip the endian swap of the PDO data in both directions."/>
		<Dokumentation Revision="1.1" Date="03.03.2017" Author="ZoePat" Company="Sigmatek" Description="Changed message counter handling to avoid errors after restarting the application."/>
		<Dokumentation Revision="1.0" Date="14.02.2017" Author="ZoePat" Company="Sigmatek" Description="First release version."/>
	</RevDoku>
	<Network Name="IIO041">
		<!-- List of Components in this network -->
		<Components>
			<Object
				Name       = "_base"
				GUID       = "{152D2C4E-33FA-4F29-B94C-E8011D8EFEFF}"
				Class      = "SdiasSDCIMaster"
				Position   = "(218,120)"
				Visualized = "true"
				Remotely   = "true">
				<Channels>
					<Server Name="ClassState"/>
					<Server Name="CycleTime"/>
					<Server Name="DeviceID"/>
					<Server Name="FirmwareVersion"/>
					<Server Name="FPGAVersion"/>
					<Server Name="HwVersion"/>
					<Server Name="LEDControl" Value="0"/>
					<Server Name="NbrOfEventsAvailable"/>
					<Server Name="PowerSupply"/>
					<Server Name="RetryCounter"/>
					<Server Name="SerialNo"/>
					<Client Name="MaxBufferSize"/>
					<Client Name="Place" Value="0"/>
					<Client Name="Required" Value="1"/>
					<Client Name="SdiasIn"/>
					<Client Name="StartInInit" Value="1"/>
				</Channels>
			</Object>
			<Object
				Name       = "SDCIPort1"
				GUID       = "{601B36C3-FE51-424F-B253-C7A72576C4D3}"
				Class      = "SDCIPort"
				Position   = "(930,660)"
				Visualized = "false">
				<Channels>
					<Server Name="ClassSvr"/>
					<Client Name="PortNo" Value="0"/>
					<Client Name="ToMaster"/>
				</Channels>
			</Object>
			<Object
				Name       = "SDCIPort2"
				GUID       = "{344086B3-F880-4C3C-A799-402FD6C58B43}"
				Class      = "SDCIPort"
				Position   = "(930,900)"
				Visualized = "false">
				<Channels>
					<Server Name="ClassSvr"/>
					<Client Name="PortNo" Value="1"/>
					<Client Name="ToMaster"/>
				</Channels>
			</Object>
			<Object
				Name       = "SDCIPort3"
				GUID       = "{508B71F2-3169-4FF0-AB1B-EFC1B25BB143}"
				Class      = "SDCIPort"
				Position   = "(930,1140)"
				Visualized = "false">
				<Channels>
					<Server Name="ClassSvr"/>
					<Client Name="PortNo" Value="2"/>
					<Client Name="ToMaster"/>
				</Channels>
			</Object>
			<Object
				Name       = "SDCIPort4"
				GUID       = "{2F24C8B7-E165-4540-8651-CCFAA24E0D9B}"
				Class      = "SDCIPort"
				Position   = "(930,1380)"
				Visualized = "false">
				<Channels>
					<Server Name="ClassSvr"/>
					<Client Name="PortNo" Value="3"/>
					<Client Name="ToMaster"/>
				</Channels>
			</Object>
		</Components>
		<Comments>
		</Comments>
		<!-- List of Connections in this network -->
		<Connections>
			<Connection Source="this.ClassState" Destination="_base.ClassState" Vertices="(1402,210),(772,210),"/>
			<Connection Source="this.DeviceID" Destination="_base.DeviceID" Vertices="(1402,270),(772,270),"/>
			<Connection Source="this.FPGAVersion" Destination="_base.FPGAVersion" Vertices="(1402,330),(772,330),"/>
			<Connection Source="this.HwVersion" Destination="_base.HwVersion" Vertices="(1402,390),(772,390),"/>
			<Connection Source="this.SerialNo" Destination="_base.SerialNo" Vertices="(1402,450),(772,450),"/>
			<Connection Source="this.RetryCounter" Destination="_base.RetryCounter" Vertices="(1402,510),(772,510),"/>
			<Connection Source="this.LEDControl" Destination="_base.LEDControl" Vertices="(1402,570),(772,570),"/>
			<Connection Source="_base.SdiasIn" Destination="this.SdiasIn" Vertices="(218,210),(38,210),"/>
			<Connection Source="_base.Place" Destination="this.Place" Vertices="(218,270),(38,270),"/>
			<Connection Source="_base.Required" Destination="this.Required" Vertices="(218,330),(38,330),"/>
			<Connection Source="this.SDCIPort1" Destination="SDCIPort1.ClassSvr"/>
			<Connection Source="this.SDCIPort2" Destination="SDCIPort2.ClassSvr"/>
			<Connection Source="this.SDCIPort3" Destination="SDCIPort3.ClassSvr"/>
			<Connection Source="this.SDCIPort4" Destination="SDCIPort4.ClassSvr"/>
			<Connection Source="SDCIPort4.ToMaster" Destination="_base.ClassState" Vertices="(930,1470),(772,210),"/>
			<Connection Source="SDCIPort1.ToMaster" Destination="_base.ClassState" Vertices="(930,750),(772,210),"/>
			<Connection Source="SDCIPort2.ToMaster" Destination="_base.ClassState" Vertices="(930,990),(772,210),"/>
			<Connection Source="SDCIPort3.ToMaster" Destination="_base.ClassState" Vertices="(930,1230),(772,210),"/>
			<Connection Source="this.SdciOut_1" Destination="SDCIPort1.ClassSvr" Vertices="(1402,870),(1230,750),"/>
			<Connection Source="this.SdciOut_2" Destination="SDCIPort2.ClassSvr" Vertices="(1402,930),(1230,990),"/>
			<Connection Source="this.SdciOut_3" Destination="SDCIPort3.ClassSvr" Vertices="(1402,990),(1230,1230),"/>
			<Connection Source="this.SdciOut_4" Destination="SDCIPort4.ClassSvr" Vertices="(1402,1050),(1230,1470),"/>
			<Connection Source="this.CycleTime" Destination="_base.CycleTime" Vertices="(1402,690),(772,690),"/>
			<Connection Source="this.PowerSupply" Destination="_base.PowerSupply" Vertices="(1402,750),(772,750),"/>
			<Connection Source="this.FirmwareVersion" Destination="_base.FirmwareVersion" Vertices="(1402,630),(772,630),"/>
			<Connection Source="this.NbrOfEventsAvailable" Destination="_base.NbrOfEventsAvailable" Vertices="(1402,810),(772,810),"/>
			<Connection Source="_base.StartInInit" Destination="this.StartInInit" Vertices="(218,390),(38,390),"/>
			<Connection Source="_base.MaxBufferSize" Destination="this.MaxBufferSize" Vertices="(218,450),(38,450),"/>
		</Connections>
		<!-- Headerfiles -->
		<Options>
		</Options>
	</Network>
</Class>
*)
#pragma using SdiasSDCIMaster

IIO041 : CLASS
: SdiasSDCIMaster
  //Servers:
	SdciOut_1 	: SvrChCmd_DINT;
	SdciOut_2 	: SvrChCmd_DINT;
	SdciOut_3 	: SvrChCmd_DINT;
	SdciOut_4 	: SvrChCmd_DINT;
  //Clients:
	SDCIPort1 	: CltChCmd_SDCIPort;
	SDCIPort2 	: CltChCmd_SDCIPort;
	SDCIPort3 	: CltChCmd_SDCIPort;
	SDCIPort4 	: CltChCmd_SDCIPort;
  //Variables:
  //Functions:
				//! <Function Comment="This Methode should be used, to check the DeviceID of the Module." Name="CheckDeviceID"/>
	FUNCTION VIRTUAL GLOBAL CheckDeviceID
		VAR_INPUT
			udID2Check 	: UDINT;			//! <Variable Comment="Device ID of connected Module." Name="CheckDeviceID.udID2Check"/>
		END_VAR
		VAR_OUTPUT
			bIsOK 	: BOOL;			//! <Variable Comment="FALSE = Wrong DeviceID for Module&#13;&#10;TRUE  = DeviceID of Module is correct" Name="CheckDeviceID.bIsOK"/>
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL GetDeviceID
		VAR_OUTPUT
			output 	: UDINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

#pragma using SDCIPort


//}}LSL_DECLARATION


FUNCTION GLOBAL TAB IIO041::@CT_
0$UINT,
2#0100000000000000$UINT, //TY_IIO041
1$UINT, 11$UINT, (SIZEOF(::IIO041))$UINT, 
4$UINT, 4$UINT, 0$UINT, 
TO_UDINT(3248397833), "IIO041", //Class
TO_UDINT(2874110376), "SdiasSDCIMaster", 1$UINT, 10$UINT, //Baseclass
//Servers:
(::IIO041.SdciOut_1.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(2089641615), "SdciOut_1", 
(::IIO041.SdciOut_2.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(3850647349), "SdciOut_2", 
(::IIO041.SdciOut_3.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(2458060707), "SdciOut_3", 
(::IIO041.SdciOut_4.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(216502784), "SdciOut_4", 
//Clients:
(::IIO041.SDCIPort1.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(1189114974), "SDCIPort1", TO_UDINT(2258655160), "SDCIPort", 1$UINT, 0$UINT, 
(::IIO041.SDCIPort2.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(3756598756), "SDCIPort2", TO_UDINT(2258655160), "SDCIPort", 1$UINT, 0$UINT, 
(::IIO041.SDCIPort3.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(2834175346), "SDCIPort3", TO_UDINT(2258655160), "SDCIPort", 1$UINT, 0$UINT, 
(::IIO041.SDCIPort4.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(915046609), "SDCIPort4", TO_UDINT(2258655160), "SDCIPort", 1$UINT, 0$UINT, 
END_FUNCTION


#define USER_CNT_IIO041 29

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_IIO041] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION IIO041::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
		nCmdSize	: UINT;
	END_VAR

	ret_code	:= SdiasSDCIMaster::@STD();
	IF ret_code <> C_OK THEN
		RETURN;
	END_IF;
	nCmdSize		:= SdiasBase::ClassState.pMeth^.nCmds$UINT*SIZEOF(pVoid) + CMDMETH.Init;

	_memcpy((#vmt.CmdTable)$^USINT, SdiasBase::ClassState.pMeth, nCmdSize);
	vmt.CmdTable.nCmds		:= nSTDCMD + USER_CNT_IIO041;
#pragma warning (disable : 74)
	vmt.UserFcts[8]		:= #CheckDeviceID();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[14]		:= #GetDeviceID();

#pragma warning (default : 74)
	SdiasBase::ClassState.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF SdiasBase::ClassState.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	_memcpy((#vmt.CmdTable)$^USINT, SdciOut_1.pMeth, SIZEOF(CMDMETH));
	vmt.CmdTable.nCmds		:= nSTDCMD;
	SdciOut_1.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF SdciOut_1.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	_memcpy((#vmt.CmdTable)$^USINT, SdciOut_2.pMeth, SIZEOF(CMDMETH));
	vmt.CmdTable.nCmds		:= nSTDCMD;
	SdciOut_2.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF SdciOut_2.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	_memcpy((#vmt.CmdTable)$^USINT, SdciOut_3.pMeth, SIZEOF(CMDMETH));
	vmt.CmdTable.nCmds		:= nSTDCMD;
	SdciOut_3.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF SdciOut_3.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	_memcpy((#vmt.CmdTable)$^USINT, SdciOut_4.pMeth, SIZEOF(CMDMETH));
	vmt.CmdTable.nCmds		:= nSTDCMD;
	SdciOut_4.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF SdciOut_4.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION


FUNCTION VIRTUAL GLOBAL IIO041::CheckDeviceID
	VAR_INPUT
		udID2Check 	: UDINT;
	END_VAR
	VAR_OUTPUT
		bIsOK 	: BOOL;
	END_VAR

  if udID2Check = IIO041_DEVICE_ID then
    bIsOK := TRUE;
  else
    bIsOK := FALSE;
  end_if;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL IIO041::GetDeviceID
	VAR_OUTPUT
		output 	: UDINT;
	END_VAR

  output := IIO041_DEVICE_ID;

END_FUNCTION
