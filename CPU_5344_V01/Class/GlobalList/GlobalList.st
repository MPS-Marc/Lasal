//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "GlobalList"
	Revision           = "0.0"
	GUID               = "{E77FDC0E-158B-4DB7-BC91-13536DFB0A01}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(284,120)">
	<Channels>
		<Server Name="ActRegel" GUID="{186551A4-E6DC-44C0-8CBE-DD13D9FCD00A}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="ClassSvr" GUID="{CE420AE4-3A53-4BFD-B43B-6DA15676AE3C}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="FileRegel" GUID="{F60A63DF-FC57-48ED-818F-BCBEC10F5FB7}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="Stepper" GUID="{9D9BECE3-5845-4070-B938-44809584C9C9}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Client Name="Aanv" Required="true" Internal="false"/>
		<Client Name="FileSys" Required="false" Internal="false"/>
		<Client Name="ram1" Required="true" Internal="false"/>
		<Client Name="ram10" Required="true" Internal="false"/>
		<Client Name="ram2" Required="true" Internal="false"/>
		<Client Name="ram3" Required="true" Internal="false"/>
		<Client Name="ram4" Required="true" Internal="false"/>
		<Client Name="ram5" Required="true" Internal="false"/>
		<Client Name="ram6" Required="true" Internal="false"/>
		<Client Name="ram7" Required="true" Internal="false"/>
		<Client Name="ram8" Required="true" Internal="false"/>
		<Client Name="ram9" Required="true" Internal="false"/>
	</Channels>
</Class>
*)
GlobalList : CLASS
  //Servers:
	ClassSvr 	: SvrChCmd_DINT;
	ActRegel 	: SvrCh_DINT;
	FileRegel 	: SvrCh_DINT;
	Stepper 	: SvrCh_DINT;
  //Clients:
	FileSys 	: CltChCmd__FileSys;
	Aanv 	: CltCh_DINT;
	ram1 	: CltChCmd_RamSregels;
	ram2 	: CltChCmd_RamSregels;
	ram3 	: CltChCmd_RamSregels;
	ram4 	: CltChCmd_RamSregels;
	ram5 	: CltChCmd_RamSregels;
	ram6 	: CltChCmd_RamSregels;
	ram7 	: CltChCmd_RamSregels;
	ram8 	: CltChCmd_RamSregels;
	ram9 	: CltChCmd_RamSregels;
	ram10 	: CltChCmd_RamSregels;
  //Variables:
		FileOpened 	: DINT;
		TmpName : ARRAY [0..30] OF CHAR;

		TmpName2 : ARRAY [0..30] OF CHAR;

		FindFileHandle 	: DINT;
		FileInfo 	: _DDE_INFO;
		FileHandle 	: DINT;
		ruleSize 	: UDINT;
		InitDone 	: DINT;
		MaxRuleNR 	: DINT;
		tmpRule 	: SRegelInfo;
		tmpBufRule 	: SRegelInfo;
		tmpNextRule 	: SRegelInfo;
		tmpNextNextRule 	: SRegelInfo;
		StartNum 	: DINT;
		i 	: DINT;
		iRead 	: DINT;
		iEnd 	: DINT;
		iTmpEnd 	: DINT;
		Gewisseld 	: DINT;
		HoognaarLaag 	: DINT;
		iWrite 	: DINT;
		emptyRule 	: SRegelInfo;
		emptyPosRule 	: SRegelInfo;
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL Init;
	
	FUNCTION GLOBAL clearAll;
	
	FUNCTION GLOBAL writeTabel
		VAR_INPUT
			tabel 	: SRegelInfoArray;
			nr 	: DINT;
		END_VAR;
	
	FUNCTION GLOBAL ReadTabel
		VAR_INPUT
			nr 	: DINT;
		END_VAR
		VAR_OUTPUT
			tabel 	: SRegelInfoArray;
		END_VAR;
	
	FUNCTION GLOBAL writeLine
		VAR_INPUT
			Nr 	: DINT;
			Regel 	: SRegelInfo;
		END_VAR;
	
	FUNCTION GLOBAL readLine
		VAR_INPUT
			Nr 	: DINT;
		END_VAR
		VAR_OUTPUT
			Regel 	: SRegelInfo;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

#pragma usingLtd _FileSys
#pragma usingLtd RamSregels


//}}LSL_DECLARATION


FUNCTION GLOBAL TAB GlobalList::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_GLOBALLIST
0$UINT, 0$UINT, (SIZEOF(::GlobalList))$UINT, 
4$UINT, 12$UINT, 0$UINT, 
TO_UDINT(2390595228), "GlobalList", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::GlobalList.ClassSvr.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(619352855), "ClassSvr", 
(::GlobalList.ActRegel.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(188817669), "ActRegel", 
(::GlobalList.FileRegel.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3368364589), "FileRegel", 
(::GlobalList.Stepper.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(663165702), "Stepper", 
//Clients:
(::GlobalList.FileSys.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000000$UINT, TO_UDINT(1422438244), "FileSys", TO_UDINT(545279513), "_FileSys", 1$UINT, 20$UINT, 
(::GlobalList.Aanv.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(2672202233), "Aanv", 
(::GlobalList.ram1.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(621924016), "ram1", TO_UDINT(944659580), "RamSregels", 0$UINT, 0$UINT, 
(::GlobalList.ram2.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(3155730186), "ram2", TO_UDINT(944659580), "RamSregels", 0$UINT, 0$UINT, 
(::GlobalList.ram3.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(3407851420), "ram3", TO_UDINT(944659580), "RamSregels", 0$UINT, 0$UINT, 
(::GlobalList.ram4.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(1434139199), "ram4", TO_UDINT(944659580), "RamSregels", 0$UINT, 0$UINT, 
(::GlobalList.ram5.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(578554537), "ram5", TO_UDINT(944659580), "RamSregels", 0$UINT, 0$UINT, 
(::GlobalList.ram6.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(3145030419), "ram6", TO_UDINT(944659580), "RamSregels", 0$UINT, 0$UINT, 
(::GlobalList.ram7.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(3430050693), "ram7", TO_UDINT(944659580), "RamSregels", 0$UINT, 0$UINT, 
(::GlobalList.ram8.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(1556968980), "ram8", TO_UDINT(944659580), "RamSregels", 0$UINT, 0$UINT, 
(::GlobalList.ram9.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(734676610), "ram9", TO_UDINT(944659580), "RamSregels", 0$UINT, 0$UINT, 
(::GlobalList.ram10.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(1067416931), "ram10", TO_UDINT(944659580), "RamSregels", 0$UINT, 0$UINT, 
END_FUNCTION


#define USER_CNT_GlobalList 0

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_GlobalList] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION GlobalList::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT_GlobalList, pCmd := #vmt.CmdTable);
	vmt.CmdTable.Init		:= #Init();
	ClassSvr.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF ClassSvr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Stepper.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF Stepper.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION
FUNCTION VIRTUAL GLOBAL GlobalList::Init
    ruleSize := sizeof(SRegelInfo);
    MaxRuleNR := 10*CMAXREGEL;
    
    emptyPosRule.Command := 0;
    emptyPosRule.x1Pos := 0;
    emptyPosRule.Units := Units.PU1;
    
    
END_FUNCTION



FUNCTION GLOBAL GlobalList::clearAll

  ram1.ClearAll();
  ram2.ClearAll();
  ram3.ClearAll();
  ram4.ClearAll();
  ram5.ClearAll();
  ram6.ClearAll();
  ram7.ClearAll();
  ram8.ClearAll();
  ram9.ClearAll();
  ram10.ClearAll();

  FileOpened := 0;

END_FUNCTION


FUNCTION GLOBAL GlobalList::writeTabel
	VAR_INPUT
		tabel 	: SRegelInfoArray;
		nr 	: DINT;
	END_VAR

  case nr of
  
  1:
    ram1.WriteTable(tabel:=tabel);
    
  2:
    ram2.WriteTable(tabel:=tabel);
    
  3:
    ram3.WriteTable(tabel:=tabel);
    
  4:
    ram4.WriteTable(tabel:=tabel);
    
  5:
    ram5.WriteTable(tabel:=tabel);
    
  6:
    ram6.WriteTable(tabel:=tabel);
        
  7:
    ram7.WriteTable(tabel:=tabel);
        
  8:
    ram8.WriteTable(tabel:=tabel);
        
  9:
    ram9.WriteTable(tabel:=tabel);
        
  10:
    ram10.WriteTable(tabel:=tabel);
  end_case;


END_FUNCTION


FUNCTION GLOBAL GlobalList::writeLine
	VAR_INPUT
		Nr 	: DINT;
		Regel 	: SRegelInfo;
	END_VAR
  
  //CheckPtr();  
  
  if Nr < MaxRuleNR then
    if Nr < CMAXREGEL then
      //ListP1^[nr] := Regel;
      ram1.WriteLine(Nr:=Nr, Regel:=Regel);
      //ListP1[Nr] := Regel;
    elsif Nr < 2* CMAXREGEL then
      //listP2^[nr-CMAXREGEL] := Regel;
      ram2.WriteLine(Nr:=Nr-CMAXREGEL, Regel:=Regel);
    elsif Nr < 3* CMAXREGEL then
      //listP3^[nr-2*CMAXREGEL] := Regel;
      ram3.WriteLine(Nr:=Nr-2*CMAXREGEL, Regel:=Regel);
    elsif Nr < 4* CMAXREGEL then
      //listP4^[nr-3*CMAXREGEL] := Regel;
      ram4.WriteLine(Nr:=Nr-3*CMAXREGEL, Regel:=Regel);
    elsif Nr < 5* CMAXREGEL then
      //listP5^[nr-4*CMAXREGEL] := Regel;
      ram5.WriteLine(Nr:=Nr-4*CMAXREGEL, Regel:=Regel);      
    elsif Nr < 6* CMAXREGEL then
      //listP5^[nr-4*CMAXREGEL] := Regel;
      ram6.WriteLine(Nr:=Nr-5*CMAXREGEL, Regel:=Regel);      
    elsif Nr < 7* CMAXREGEL then
      //listP5^[nr-4*CMAXREGEL] := Regel;
      ram7.WriteLine(Nr:=Nr-6*CMAXREGEL, Regel:=Regel);      
    elsif Nr < 8* CMAXREGEL then
      //listP5^[nr-4*CMAXREGEL] := Regel;
      ram8.WriteLine(Nr:=Nr-7*CMAXREGEL, Regel:=Regel);      
    elsif Nr < 9* CMAXREGEL then
      //listP5^[nr-4*CMAXREGEL] := Regel;
      ram9.WriteLine(Nr:=Nr-8*CMAXREGEL, Regel:=Regel);      
    elsif Nr < 10* CMAXREGEL then
      //listP5^[nr-4*CMAXREGEL] := Regel;
      ram10.WriteLine(Nr:=Nr-9*CMAXREGEL, Regel:=Regel);      
    end_if;
    
    
    ActRegel := nr;
  end_if;



END_FUNCTION


FUNCTION GLOBAL GlobalList::readLine
	VAR_INPUT
		Nr 	: DINT;
	END_VAR
	VAR_OUTPUT
		Regel 	: SRegelInfo;
	END_VAR

  //CheckPtr(); 
  
  
  if Nr < 0 then
    Nr := 0;
  end_if;

  if Nr < MaxRuleNR then
    if Nr < CMAXREGEL then
      //Regel := ListP1^[Nr];
      Regel := ram1.ReadLine(Nr:=Nr);
      //Regel := ListP1[Nr];
    elsif Nr < 2* CMAXREGEL then
      //Regel := listP2^[Nr-CMAXREGEL];
      Regel := ram2.ReadLine(Nr:=Nr-CMAXREGEL);
    elsif Nr < 3* CMAXREGEL then
      //Regel := listP3^[Nr-2*CMAXREGEL];
      Regel := ram3.ReadLine(Nr:=Nr-2*CMAXREGEL);
    elsif Nr < 4* CMAXREGEL then
      //Regel := listP4^[Nr-3*CMAXREGEL];
      Regel := ram4.ReadLine(Nr:=Nr-3*CMAXREGEL);
    elsif Nr < 5* CMAXREGEL then
      //Regel := listP5^[Nr-4*CMAXREGEL];
      Regel := ram5.ReadLine(Nr:=Nr-4*CMAXREGEL);      
    elsif Nr < 6* CMAXREGEL then
      //Regel := listP5^[Nr-4*CMAXREGEL];
      Regel := ram6.ReadLine(Nr:=Nr-5*CMAXREGEL);      
    elsif Nr < 7* CMAXREGEL then
      //Regel := listP5^[Nr-4*CMAXREGEL];
      Regel := ram7.ReadLine(Nr:=Nr-6*CMAXREGEL);      
    elsif Nr < 8* CMAXREGEL then
      //Regel := listP5^[Nr-4*CMAXREGEL];
      Regel := ram8.ReadLine(Nr:=Nr-7*CMAXREGEL);      
    elsif Nr < 9* CMAXREGEL then
      //Regel := listP5^[Nr-4*CMAXREGEL];
      Regel := ram9.ReadLine(Nr:=Nr-8*CMAXREGEL);      
    elsif Nr < 10* CMAXREGEL then
      //Regel := listP5^[Nr-4*CMAXREGEL];
      Regel := ram10.ReadLine(Nr:=Nr-9*CMAXREGEL);      
    end_if;    
    
    
    ActRegel := nr;
  end_if;


    

END_FUNCTION


FUNCTION GLOBAL GlobalList::ReadTabel
	VAR_INPUT
		nr 	: DINT;
	END_VAR
	VAR_OUTPUT
		tabel 	: SRegelInfoArray;
	END_VAR

  case nr of
  
  1:
    tabel := ram1.ReadTable();
    
  2:
    tabel := ram2.ReadTable();
    
  3:
    tabel := ram3.ReadTable();
    
  4:
    tabel := ram4.ReadTable();
    
  5:
    tabel := ram5.ReadTable();
    
  6:
    tabel := ram6.ReadTable();
    
  7:
    tabel := ram7.ReadTable();
    
  8:
    tabel := ram8.ReadTable();
    
  9:
    tabel := ram9.ReadTable();
    
  10:
    tabel := ram10.ReadTable();
    
  end_case;

  
END_FUNCTION



