//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "cntrAmount"
	Revision           = "0.0"
	GUID               = "{3C35B874-9738-4A05-BD31-814FDCC9D10A}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "true"
	DefBackground      = "100 ms"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(284,120)">
	<Channels>
		<Server Name="ClassSvr" GUID="{AFEE9039-FDC6-4646-B413-6DAEFC3A01F6}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="count" GUID="{FD46FA6E-5D50-476F-9551-954DE0409ECF}" Visualized="false" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="resetSoftCounter" GUID="{13917829-E433-4CD6-8AA3-E7BAC256E04F}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="softCounter" GUID="{6DD16AD6-2F3F-4FE7-98A1-CE73FFA6A421}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="SRam"/>
		<Server Name="totalCounter" GUID="{9A0721EE-F23B-49BC-813F-A0C2ADD6B60C}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="SRam"/>
	</Channels>
</Class>
*)
cntrAmount : CLASS
  //Servers:
	ClassSvr 	: SvrChCmd_DINT;
	softCounter 	: SvrCh_DINT;
	totalCounter 	: SvrCh_DINT;
	resetSoftCounter 	: SvrCh_DINT;
	count 	: SvrCh_DINT;
  //Clients:
  //Variables:
		tmpCounter 	: DINT;
		timeWritten 	: UDINT;
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL Init;
	
	FUNCTION VIRTUAL GLOBAL Background
		VAR_INPUT
			EAX 	: UDINT;
		END_VAR
		VAR_OUTPUT
			state (EAX) 	: UDINT := READY;
		END_VAR;
	
	FUNCTION storeIt;
	
	FUNCTION VIRTUAL GLOBAL resetSoftCounter::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL count::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

//}}LSL_DECLARATION


FUNCTION GLOBAL TAB cntrAmount::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_CNTRAMOUNT
0$UINT, 0$UINT, (SIZEOF(::cntrAmount))$UINT, 
5$UINT, 0$UINT, 0$UINT, 
TO_UDINT(719986565), "cntrAmount", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::cntrAmount.ClassSvr.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(619352855), "ClassSvr", 
(::cntrAmount.softCounter.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000001000$UINT, TO_UDINT(4203045961), "softCounter", 
(::cntrAmount.totalCounter.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000001000$UINT, TO_UDINT(1698109949), "totalCounter", 
(::cntrAmount.resetSoftCounter.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(260643724), "resetSoftCounter", 
(::cntrAmount.count.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1921877714), "count", 
//Clients:
END_FUNCTION


#define USER_CNT_cntrAmount 1

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_cntrAmount] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION cntrAmount::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT_cntrAmount, pCmd := #vmt.CmdTable);
	vmt.CmdTable.Init		:= #Init();
#pragma warning (disable : 74)
	vmt.UserFcts[0]		:= #Background();

#pragma warning (default : 74)
	ClassSvr.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF ClassSvr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	softCounter.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF softCounter.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	totalCounter.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF totalCounter.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	resetSoftCounter.pMeth			:= StoreMethod( #M_RD_DIRECT(), #resetSoftCounter::Write() );
	IF resetSoftCounter.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	count.pMeth			:= StoreMethod( #M_RD_DIRECT(), #count::Write() );
	IF count.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION
// JdK 21-11-2019: class to count operations, they are stored in ram servers, don't write them to often


FUNCTION VIRTUAL GLOBAL cntrAmount::Init

  tmpCounter:= totalCounter;
  timeWritten:= ops.tAbsolute;

END_FUNCTION

FUNCTION VIRTUAL GLOBAL cntrAmount::Background
	VAR_INPUT
		EAX 	: UDINT;
	END_VAR
	VAR_OUTPUT
		state (EAX) 	: UDINT;(* := READY *)
	END_VAR

  IF totalCounter= tmpCounter THEN
    timeWritten:= ops.tAbsolute; //no need to write again
  ELSIF ops.tAbsolute-timeWritten > 300000 THEN //after 5 minutes
    storeIt();
  END_IF;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL cntrAmount::resetSoftCounter::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	resetSoftCounter := input;
  softCounter:= 0;
  softCounter.Write(input:=softCounter);
	result := resetSoftCounter;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL cntrAmount::count::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	count := input;
  
  softCounter+=1;
  totalCounter+=1;
  
  IF totalCounter - tmpCounter > 100 THEN //don't write every action, to safe memory
    storeIt();
  END_IF;

    
  
	result := count;

END_FUNCTION




FUNCTION cntrAmount::storeIt

  tmpCounter:=totalCounter;
  softCounter-= 1; //we can only store a new value
  totalCounter-= 1;
  softCounter.Write(input:=softCounter+1); //write action to store value
  totalCounter.Write(input:=totalCounter+1);
  
END_FUNCTION
