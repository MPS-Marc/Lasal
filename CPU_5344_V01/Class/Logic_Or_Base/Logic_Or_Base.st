//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "Logic_Or_Base"
	Revision           = "1.11"
	GUID               = "{B14BCCC0-3259-11D4-AB39-01A024AEA053}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "true"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	IconPath           = ".\Class\Logic_Or_Base\Tools.ICO"
	SharedCommandTable = "true"
	Objectsize         = "(284,120)"
	Comment            = "Baseclass for Logic OR class ">
	<Channels>
		<Server Name="Result" GUID="{4A574521-6692-11D6-BDB2-000103C6CD0D}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="result of the calculation"/>
	</Channels>
	<Dependencies>
		<Files>
			<File Path=".\Source\code\Global_Functions\H_Get_ptr_on_Obj.h" Include="false"/>
			<File Path=".\Source\code\Global_Functions\Get_ptr_on_Obj.st"/>
		</Files>
	</Dependencies>
	<RevDoku>
		<Owner Company="Sigmatek"/>
		<Dokumentation Revision="1.11" Date="2017-02-01" Author="FucHer" Company="Sigmatek" Description="Or_Stx(): clients were not updated  in case of target architecture ARM. Use RD_CHNL() instead of RD().&#13;&#10;To update all clients do not exit the loop when a client is unequal zero."/>
		<Dokumentation Revision="1.10" Date="2013-07-12" Author="spimar" Company="Sigmatek" Description="Bugfix:&#13;&#10;-In case of target architecture X86 the read method of the connected clients wasn&apos;t called;&#13;&#10;-In case of target architecture ARM all clients were read, also if there was already a agreement found;"/>
		<Dokumentation Revision="1.4" Date="30.04.09" Author="hötant" Company="Sigmatek" Description="Changed LSL_TARGETARCH_ARM to _LSL_TARGETARCH_ARM"/>
		<Dokumentation Revision="1.3" Date="04.02.09" Author="hötant" Company="Sigmatek" Description="AWL to ST (to guarantee compatibility for other processors) "/>
	</RevDoku>
</Class>
*)
Logic_Or_Base : CLASS
  //Servers:
	Result 	: SvrChCmd_DINT;
  //Clients:
  //Variables:
		pCls 	: ^ClsHdr;
  //Functions:
	
	FUNCTION Logic_Or_Base
		VAR_OUTPUT
			ret_code 	: ConfStates;
		END_VAR;
	
	FUNCTION AWL Or_Stx
		VAR_INPUT
			ptr_C 	: ^CltCh;
			numbers 	: UINT;
		END_VAR
		VAR_OUTPUT
			result 	: DINT;
		END_VAR;
				//! <Function Comment="******************************************************************&#13;&#10;             OR Verknüpfung mit variablen Clients&#13;&#10;******************************************************************&#13;&#10;   CLIENT: Op1, Op2, ...&#13;&#10;   SERVER: result =&gt; Resultat&#13;&#10;      ACHTUNG: Nur das Komplexe Objekt darf Clients haben !!&#13;&#10;               Die Basisklasse darf keine Clients haben !!&#13;&#10;  Wenn Op1&lt;&gt;0 OR Op2 &lt;&gt;0 , ...  Dann result := 1 Sonst 0&#13;&#10;******************************************************************&#13;&#10;    erstellt  :   BS  :    KW 35/01&#13;&#10;******************************************************************&#13;&#10;******************************************************************&#13;&#10;               OR linkage with variable channels&#13;&#10;******************************************************************&#13;&#10;   CLIENT: Op1, Op2, ...&#13;&#10;   SERVER: result&#13;&#10;      ACHTUNG: Only the complex objekt is allowed to have clients !!&#13;&#10;               The baseclass is not allowed to have clients !!&#13;&#10;  If Op1&lt;&gt;0 OR Op2 &lt;&gt;0 , ...  then result := 1 Else 0&#13;&#10;******************************************************************&#13;&#10;    created  :   BS  :    KW 35/01&#13;&#10;******************************************************************&#13;&#10;" Name="Result.Read"/>
	FUNCTION VIRTUAL GLOBAL Result::Read
		VAR_OUTPUT
			EAX 	: DINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

//}}LSL_DECLARATION


FUNCTION GLOBAL TAB Logic_Or_Base::@CT_
0$UINT,
2#0100000000000000$UINT, //TY_LOGIC_OR_BASE
1$UINT, 11$UINT, (SIZEOF(::Logic_Or_Base))$UINT, 
1$UINT, 0$UINT, 0$UINT, 
TO_UDINT(38961218), "Logic_Or_Base", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::Logic_Or_Base.Result.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(3817997973), "Result", 
//Clients:
END_FUNCTION


#define USER_CNT_Logic_Or_Base 0

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_Logic_Or_Base] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION Logic_Or_Base::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT_Logic_Or_Base, pCmd := #vmt.CmdTable);
	vmt.CmdTable.Read		:= #Read();
	vmt.CmdTable.Write		:= #M_WR_DIRECT();
	Result.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF Result.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	ret_code	:= Logic_Or_Base();

END_FUNCTION

//{{LSL_IMPLEMENTATION


//*********************Inserted from .\code\C_Or.st*********************



 



//[#DEUTSCH]
//******************************************************************
//             OR Verknüpfung mit variablen Clients
//******************************************************************
//			CLIENT:	Op1, Op2, ...
//			SERVER:	result => Resultat
//
//      ACHTUNG: Nur das Komplexe Objekt darf Clients haben !!
//               Die Basisklasse darf keine Clients haben !!
//
//		Wenn Op1<>0 OR Op2 <>0 , ...  Dann result := 1 Sonst 0
//******************************************************************
//  		erstellt 	: 		BS		:   	KW 35/01
//******************************************************************
//[#ENGLISH]
//******************************************************************
//               OR linkage with variable channels
//******************************************************************
//			CLIENT:	Op1, Op2, ...
//			SERVER:	result
//
//      ACHTUNG: Only the complex objekt is allowed to have clients !!
//               The baseclass is not allowed to have clients !!
//
//		If Op1<>0 OR Op2 <>0 , ...  then result := 1 Else 0
//******************************************************************
//  		created 	: 		BS		:   	KW 35/01
//******************************************************************
FUNCTION Logic_Or_Base::Result::Read
VAR_OUTPUT
	EAX	: DINT; 	// data
END_VAR
VAR	
	Ptr		: ^CltCh;
END_VAR

// Pointer auf 1.Client
	Ptr := THIS$^CltCh;

//-----------------------------------------------------------------
// vor Änderung
//  Ptr := (ptr$UDINT + SIZEOF(Logic_Or_Base) + SIZEOF(SvrCh)*TO_UDINT(pCls^.nSvrChs))$^CltCh;
// read datas
// assotioate datas
//	result.dData := Or_stx(ptr,pCls^.nCltChs);

// nach Änderung

  Ptr := (ptr$UDINT + SIZEOF(Logic_Or_Base) + SIZEOF(SvrCh)*TO_UDINT(pCls^.pDsc^.nSvrChs))$^CltCh;

// read datas
// assotioate datas
	result.dData := Or_stx(ptr,pCls^.pDsc^.nCltChs);
//HaaPet
//-----------------------------------------------------------------


// write datas
	EAX := result.dData$UDINT;
END_FUNCTION //COR::COR

//[#ENGLISH]
//******************************************************************
//               OR linkage with variable channels
//******************************************************************
//			CLIENT:	Op1, Op2, ...
//			SERVER:	result
//
//      ACHTUNG: Only the complex objekt is allowed to have clients !!
//               The baseclass is not allowed to have clients !!
//
//		If Op1<>0 OR Op2 <>0 , ...  then result := 1 Else 0
//******************************************************************
//  		created 	: 		BS		:   	KW 35/01
//******************************************************************
//[#DEUTSCH]
//******************************************************************
//             OR Verknüpfung mit variablen Clients
//******************************************************************
//			CLIENT:	Op1, Op2, ...
//			SERVER:	result => Resultat
//
//      ACHTUNG: Nur das Komplexe Objekt darf Clients haben !!
//               Die Basisklasse darf keine Clients haben !!
//
//		Wenn Op1<>0 OR Op2 <>0 , ...  Dann result := 1 Sonst 0
//******************************************************************
//  		erstellt 	: 		BS		:   	KW 35/01
//******************************************************************
FUNCTION Logic_Or_Base::Logic_Or_Base
	VAR_OUTPUT
		ret_code 	: ConfStates;
	END_VAR

  pCls 	:= Get_ptr_on_Obj(THIS);

	ret_code := C_OK;

END_FUNCTION
 

#ifdef _LSL_TARGETARCH_ARM

FUNCTION Logic_Or_Base::Or_Stx
	VAR_INPUT
		ptr_C 	: ^CltCh;
		numbers 	: UINT;
	END_VAR
	VAR_OUTPUT
		result 	: DINT;
	END_VAR
VAR
  i:DINT;
END_VAR

  result:=0;
  i:=0;
  while i < numbers do 
    if (RD_CHNL(pt:=this, chOffs:=to_uint((ptr_C$UDINT - this$UDINT))) <> 0) then
      result:=1;
    end_if;
    ptr_c += SIZEOF(CLTCH);
    i+=1;
  end_while;

END_FUNCTION //GLOBAL Logic_Or::Or_Stx

#else

FUNCTION AWL LOGIC_OR_BASE::Or_Stx
VAR_INPUT
	ptr_C		: ^CLTCH;
	numbers		: UINT;
END_VAR
VAR_OUTPUT
	result		: DINT;
END_VAR

	L.D			result, 0
	L.EBX		Ptr_C
	SUB.EBX		ESI
	CLR			ECX			// LOOP with ECX
	L.CX		numbers
	O.CX		CX
	JZ			END_OR_ST
LOOP_READ_OR
	PUSH		EBX
	PUSH		ECX
	FC			ASM_RD_CHNL
	POP			ECX
	POP			EBX
	O.EAX		EAX
	JZ			SET_RESULT_OR
	L.D			result, 1     // do not stop loop if client <> 0

SET_RESULT_OR
	ADD.EBX		SIZEOF(CLTCH)
	LOOP		LOOP_READ_OR
	JMP			END_OR_ST	

	
END_OR_ST	

END_FUNCTION //GLOBAL Logic_Or::Or_Stx

#endif
(*
FUNCTION AWL LOGIC_OR_BASE::Or_Stx
VAR_INPUT
	ptr_C		: ^CLTCH;
	numbers		: UINT;
END_VAR
VAR_OUTPUT
	result		: DINT;
END_VAR

	L.D			result, 0
	L.EBX		Ptr_C
	SUB.EBX		ESI
	CLR			ECX			// LOOP with ECX
	L.CX		numbers
	O.CX		CX
	JZ			END_OR_ST
LOOP_READ_OR
	PUSH		EBX
	PUSH		ECX
	FC			ASM_RD_CHNL
	POP			ECX
	POP			EBX
	O.EAX		EAX
	JNZ			SET_RESULT_OR
	ADD.EBX		SIZEOF(CLTCH)
	LOOP		LOOP_READ_OR
	JMP			END_OR_ST	

SET_RESULT_OR
	L.D			result, 1
	
END_OR_ST	

END_FUNCTION //GLOBAL Logic_Or::Or_Stx
*)









