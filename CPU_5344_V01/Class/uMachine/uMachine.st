//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "uMachine"
	Revision           = "0.0"
	GUID               = "{8CF88231-72A5-4AD6-844B-50B7F7045CE7}"
	RealtimeTask       = "false"
	CyclicTask         = "true"
	DefCyclictime      = "10 ms"
	BackgroundTask     = "true"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(780,840)">
	<Channels>
		<Client Name="ctrlBu1Saw" Required="true" Internal="false"/>
		<Client Name="ctrlManualInput" Required="true" Internal="false"/>
		<Client Name="ctrlPressureRollers" Required="true" Internal="false"/>
		<Client Name="ctrlPu1" Required="true" Internal="false"/>
		<Client Name="ctrlSuspend" Required="true" Internal="false"/>
	</Channels>
	<Network Name="uMachine">
		<!-- List of Components in this network -->
		<Components>
			<Object
				Name       = "_base"
				GUID       = "{0A57FB88-B566-443B-A468-D6066F8B0E7A}"
				Class      = "unitBase"
				Position   = "(218,120)"
				Visualized = "true">
				<Channels>
					<Server Name="abortButton"/>
					<Server Name="ClassSvr"/>
					<Server Name="cmdCompleted"/>
					<Server Name="cmdHMI"/>
					<Server Name="cmdWaitReset"/>
					<Server Name="ErrorNr"/>
					<Server Name="holdButton"/>
					<Server Name="includesUnit"/>
					<Server Name="mode"/>
					<Server Name="reqMode"/>
					<Server Name="resetButton"/>
					<Server Name="simulation"/>
					<Server Name="startButton"/>
					<Server Name="state"/>
					<Server Name="stopButton"/>
					<Server Name="stprAction"/>
					<Server Name="stprMoving"/>
					<Server Name="stprState"/>
					<Server Name="stsHMI_RunsAllowed"/>
					<Server Name="stsInAlarm"/>
					<Server Name="stsIsInterlocked"/>
					<Server Name="stsProgChangesAllowed"/>
					<Server Name="stsStateCompleted"/>
					<Server Name="suspendButton"/>
					<Server Name="testSline"/>
					<Server Name="thisIsUnit"/>
					<Server Name="unHoldButton"/>
					<Server Name="unsuspendButton"/>
					<Client Name="iBlinkFast"/>
					<Client Name="iBlinkSlow"/>
					<Client Name="id"/>
					<Client Name="iSafe"/>
					<Client Name="oCycleLight"/>
					<Client Name="oResetAlarm"/>
				</Channels>
			</Object>
		</Components>
		<Comments>
		</Comments>
		<!-- List of Connections in this network -->
		<Connections>
			<Connection Source="this.ClassSvr" Destination="_base.ClassSvr" Vertices="(690,210),(518,210),"/>
			<Connection Source="this.state" Destination="_base.state" Vertices="(690,270),(518,270),"/>
			<Connection Source="this.mode" Destination="_base.mode" Vertices="(690,330),(518,330),"/>
			<Connection Source="this.cmdHMI" Destination="_base.cmdHMI" Vertices="(690,390),(518,390),"/>
			<Connection Source="this.stsInAlarm" Destination="_base.stsInAlarm" Vertices="(690,450),(518,450),"/>
			<Connection Source="this.stsIsInterlocked" Destination="_base.stsIsInterlocked" Vertices="(690,510),(518,510),"/>
			<Connection Source="this.stsHMI_RunsAllowed" Destination="_base.stsHMI_RunsAllowed" Vertices="(690,570),(518,570),"/>
			<Connection Source="this.stprAction" Destination="_base.stprAction" Vertices="(690,690),(518,690),"/>
			<Connection Source="this.stprMoving" Destination="_base.stprMoving" Vertices="(690,750),(518,750),"/>
			<Connection Source="this.stprState" Destination="_base.stprState" Vertices="(690,810),(518,810),"/>
			<Connection Source="this.stsStateCompleted" Destination="_base.stsStateCompleted" Vertices="(690,870),(518,870),"/>
			<Connection Source="this.thisIsUnit" Destination="_base.thisIsUnit" Vertices="(690,990),(518,990),"/>
			<Connection Source="this.includesUnit" Destination="_base.includesUnit" Vertices="(690,1050),(518,1050),"/>
			<Connection Source="_base.iSafe" Destination="this.iSafe" Vertices="(218,270),(38,210),"/>
			<Connection Source="this.simulation" Destination="_base.simulation" Vertices="(690,1110),(518,1170),"/>
			<Connection Source="this.startButton" Destination="_base.startButton" Vertices="(690,1290),(518,1350),"/>
			<Connection Source="this.stopButton" Destination="_base.stopButton" Vertices="(690,1350),(518,1410),"/>
			<Connection Source="this.suspendButton" Destination="_base.suspendButton" Vertices="(690,1410),(518,1470),"/>
			<Connection Source="this.holdButton" Destination="_base.holdButton" Vertices="(690,1470),(518,1530),"/>
			<Connection Source="this.unsuspendButton" Destination="_base.unsuspendButton" Vertices="(690,1530),(518,1590),"/>
			<Connection Source="this.unHoldButton" Destination="_base.unHoldButton" Vertices="(690,1590),(518,1650),"/>
			<Connection Source="this.abortButton" Destination="_base.abortButton" Vertices="(690,1650),(518,1710),"/>
			<Connection Source="this.reqMode" Destination="_base.reqMode" Vertices="(690,1170),(518,1230),"/>
			<Connection Source="this.ErrorNr" Destination="_base.ErrorNr" Vertices="(690,630),(518,630),"/>
			<Connection Source="this.resetButton" Destination="_base.resetButton" Vertices="(690,1230),(518,1290),"/>
			<Connection Source="this.cmdCompleted" Destination="_base.cmdCompleted" Vertices="(690,1710),(518,1830),"/>
			<Connection Source="_base.oResetAlarm" Destination="this.oResetAlarm" Vertices="(218,330),(38,270),"/>
			<Connection Source="_base.oCycleLight" Destination="this.oCycleLight" Vertices="(218,390),(38,330),"/>
			<Connection Source="_base.iBlinkSlow" Destination="this.iBlinkSlow" Vertices="(218,450),(38,390),"/>
			<Connection Source="_base.iBlinkFast" Destination="this.iBlinkFast" Vertices="(218,510),(38,450),"/>
			<Connection Source="this.testSline" Destination="_base.testSline" Vertices="(690,1770),(518,1890),"/>
			<Connection Source="this.cmdWaitReset" Destination="_base.cmdWaitReset" Vertices="(690,930),(518,930),"/>
		</Connections>
		<!-- Headerfiles -->
		<Options>
		</Options>
	</Network>
</Class>
*)
#pragma using unitBase

uMachine : CLASS
: unitBase
  //Servers:
  //Clients:
	ctrlManualInput 	: CltChCmd_emBase;
	ctrlPressureRollers 	: CltChCmd_emPressureRoller;
	ctrlPu1 	: CltChCmd_emWagon;
	ctrlBu1Saw 	: CltChCmd_emBase;
	ctrlSuspend 	: CltChCmd_emBase;
  //Variables:
		tmpCil 	: cilPos;
  //Functions:
	
	FUNCTION VIRTUAL work;
	
	FUNCTION VIRTUAL Init1;
	
	FUNCTION VIRTUAL execResetting;
	
	FUNCTION VIRTUAL execStarting;
	
	FUNCTION VIRTUAL startOtherUnits
		VAR_INPUT
			sLine 	: SRegelInfo;
		END_VAR
		VAR_OUTPUT
			okUnits 	: Units;
		END_VAR;
	
	FUNCTION VIRTUAL readySpecial
		VAR_INPUT
			sLine 	: SRegelInfo;
		END_VAR
		VAR_OUTPUT
			ok 	: DINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

#pragma usingLtd emBase
#pragma usingLtd emPressureRoller
#pragma usingLtd emWagon


//}}LSL_DECLARATION


FUNCTION GLOBAL TAB uMachine::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_UMACHINE
0$UINT, 0$UINT, (SIZEOF(::uMachine))$UINT, 
0$UINT, 5$UINT, 0$UINT, 
TO_UDINT(3486047275), "uMachine", //Class
TO_UDINT(1584517769), "unitBase", 1$UINT, 0$UINT, //Baseclass
//Servers:
//Clients:
(::uMachine.ctrlManualInput.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(2059894991), "ctrlManualInput", TO_UDINT(2572249677), "emBase", 1$UINT, 0$UINT, 
(::uMachine.ctrlPressureRollers.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(2527027619), "ctrlPressureRollers", TO_UDINT(3643978336), "emPressureRoller", 1$UINT, 0$UINT, 
(::uMachine.ctrlPu1.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(372180686), "ctrlPu1", TO_UDINT(38933641), "emWagon", 1$UINT, 1$UINT, 
(::uMachine.ctrlBu1Saw.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(2775740923), "ctrlBu1Saw", TO_UDINT(2572249677), "emBase", 1$UINT, 0$UINT, 
(::uMachine.ctrlSuspend.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(631123612), "ctrlSuspend", TO_UDINT(2572249677), "emBase", 1$UINT, 0$UINT, 
END_FUNCTION


#define USER_CNT_uMachine 40

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_uMachine] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION uMachine::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
		nCmdSize	: UINT;
	END_VAR

	ret_code	:= unitBase::@STD();
	IF ret_code <> C_OK THEN
		RETURN;
	END_IF;
	nCmdSize		:= cmBase::ClassSvr.pMeth^.nCmds$UINT*SIZEOF(pVoid) + CMDMETH.Init;

	_memcpy((#vmt.CmdTable)$^USINT, cmBase::ClassSvr.pMeth, nCmdSize);
	vmt.CmdTable.nCmds		:= nSTDCMD + USER_CNT_uMachine;
#pragma warning (disable : 74)
	vmt.UserFcts[9]		:= #work();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[12]		:= #Init1();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[20]		:= #execResetting();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[22]		:= #execStarting();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[37]		:= #startOtherUnits();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[38]		:= #readySpecial();

#pragma warning (default : 74)
	cmBase::ClassSvr.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF cmBase::ClassSvr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION
// JdK 1-10-2019: changed for 4255
// JdK 12-6-2019: uMachine created for 4284/Traffiroad /standard lib
// function is to control BU's and extra PU, so far we can see now, the only thing we have to do is the standard functionlity



FUNCTION VIRTUAL uMachine::Init1

  ctrlPu1.cmdWaitReset:=1;
 

  IF initDone= 0 THEN
    unitBase::Init1();
  END_IF;

END_FUNCTION


FUNCTION VIRTUAL uMachine::readySpecial
	VAR_INPUT
		sLine 	: SRegelInfo;
	END_VAR
	VAR_OUTPUT
		ok 	: DINT;
	END_VAR
  VAR
  	ok1, ok2, ok3, ok4, ok5, ok6 , ok7  : DINT;
  END_VAR

  ok1:= ctrlManualInput.Ready(sLine:=sLine);
  ok2:= ctrlPressureRollers.Ready(sLine:=sLine);
  ok3:= ctrlPu1.Ready(sLine:=sLine);
  ok4:= ctrlBu1Saw.Ready(sLine:=sLine);
  ok5:= 1;
  ok6:= 1;
  ok7:= 1;


 
  ok:= ok1 & ok2 & ok3 & ok4 & ok5 & ok6 & ok7  & stprAction=0 & stprMoving=0;

END_FUNCTION


FUNCTION VIRTUAL uMachine::startOtherUnits
	VAR_INPUT
		sLine 	: SRegelInfo;
	END_VAR
	VAR_OUTPUT
		okUnits 	: Units;
	END_VAR


  okUnits:= ctrlManualInput.Start(sLine:=sLine)+ctrlPressureRollers.Start(sLine:=sLine)+ctrlPu1.Start(sLine:=sLine)+ctrlBu1Saw.Start(sLine:=sLine)+
             ctrlSuspend.Start(sLine:=sLine);
  

END_FUNCTION


FUNCTION VIRTUAL uMachine::work

  //always write max speed to em wagon
  
 //TP 19-10-2020 just do this in the cal 

  ctrlPu1.cmdMaxSpeedNegative:=ctrlPressureRollers.stsMaxSpeedWagonNegative;
  


    //RVDL 10-1-2020
  // rollers need to open when firts opertion is done. Sts is used for writing correct speed by EmPressureroll
//  IF OpenPressureRollAtFirstOperation.Read() = 1 THEN // make it a choice
//    ctrlPressureRollers.stsFirstOperation:= ctrlBu1Saw.stsNrInAssembly;
//  END_IF;

 // enable milling if sawing is done
// IF ctrlBu1Saw.stprAction >5 THEN
//    ctrlBu2Mill.stprAction := 1;
// END_IF;


END_FUNCTION



FUNCTION VIRTUAL uMachine::execStarting

  execResetting();

END_FUNCTION


FUNCTION VIRTUAL uMachine::execResetting
  // RVDL 13-12-2019 wait with wagon when reseeing to prevent alarms
  
  IF pmlCom.cmd.reRun= 1 THEN
    stprState:=1000; //don't do a thing during reset, if it's a rerun
  ELSE
    CASE stprState OF
    
    0: //just go on
      ctrlPu1.cmdWaitReset:= 1;
      stprState+=1;
      
    1:  // wait for Saw and pressurerolls
    IF ctrlBu1Saw.stsStateCompleted & ctrlManualInput.stsStateCompleted & ctrlPressureRollers.stsStateCompleted THEN
      ctrlPu1.cmdWaitReset:=0 ;
      stprState+=1;
    END_IF;
   
      
    2: //done
      IF ctrlPu1.stsStateCompleted THEN
        ctrlPu1.cmdWaitReset:= 1;
        stprState:=1000;
      END_IF;
      
    1000: //ready
    
    
    END_CASE;
  END_IF;
  
END_FUNCTION
