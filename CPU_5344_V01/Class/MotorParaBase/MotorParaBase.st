//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "MotorParaBase"
	Revision           = "0.0"
	GUID               = "{B7D8CBB8-09CE-4DF7-A323-DFA9442C40C3}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "true"
	DefBackground      = "100 ms"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(480,780)">
	<Channels>
		<Server Name="ClassSvr" GUID="{4FD6D1DC-B934-4F9E-A8B4-BF6781CD24CB}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="SRam"/>
		<Server Name="FeedbOfffset" GUID="{087653DF-C81A-4E64-B90F-6AA5BB19D487}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="SRam"/>
		<Server Name="P_KV" GUID="{4FC14701-31B5-4FC4-AC3A-20357976C95F}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="SRam"/>
		<Server Name="P_SFF" GUID="{6D5AB1EA-63D0-49FD-A600-4BDBBDF73138}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="SRam"/>
		<Server Name="P_SSCALE" GUID="{0C972148-A66C-400C-8E87-05EB7E9806D7}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="SRam"/>
		<Server Name="P_TFF" GUID="{69C0E5F4-697B-4BFA-8E75-57AC2E16C312}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="SRam"/>
		<Server Name="Update" GUID="{DF238D46-ED79-473C-9FED-F152ED59C5E0}" Visualized="false" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="V_KP" GUID="{2C753667-A6C7-42BF-BB8C-5A9C339547FE}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="SRam"/>
		<Server Name="V_KPREL" GUID="{3861E0C6-3763-4F10-9C20-0D670CD79EB9}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="SRam"/>
		<Server Name="V_NMAX" GUID="{E609893C-2179-4B7F-B7C4-46B01A1147F1}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="SRam"/>
		<Server Name="V_T" GUID="{77A806DB-E3D5-4E39-9824-32FC5FEA8B05}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="SRam"/>
		<Server Name="V_T2" GUID="{EFA3F7C2-E1FD-4AAB-94FC-8765DB1BB322}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="SRam"/>
		<Server Name="V_TN" GUID="{3CD754BE-F641-44BA-8C99-7C45E418DC89}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="SRam"/>
		<Client Name="MotPara" Required="true" Internal="false"/>
		<Client Name="PositionPara" Required="true" Internal="false"/>
		<Client Name="SpeedPara" Required="true" Internal="false"/>
	</Channels>
</Class>
*)
MotorParaBase : CLASS
  //Servers:
	ClassSvr 	: SvrChCmd_DINT;
	Update 	: SvrCh_DINT;
	P_KV 	: SvrCh_DINT;
	P_SFF 	: SvrCh_DINT;
	P_TFF 	: SvrCh_DINT;
	P_SSCALE 	: SvrCh_DINT;
	V_KP 	: SvrCh_DINT;
	V_T 	: SvrCh_DINT;
	V_TN 	: SvrCh_DINT;
	V_T2 	: SvrCh_DINT;
	V_NMAX 	: SvrCh_DINT;
	V_KPREL 	: SvrCh_DINT;
	FeedbOfffset 	: SvrCh_DINT;
  //Clients:
	PositionPara 	: CltChCmd__DrivePositionPara;
	SpeedPara 	: CltChCmd__DriveSpeedPara;
	MotPara 	: CltChCmd__DriveMotorPara;
  //Variables:
		dataLoaded 	: DINT;
		tStartTim 	: UDINT;
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL Init;
	
	FUNCTION VIRTUAL GLOBAL Background
		VAR_INPUT
			EAX 	: UDINT;
		END_VAR
		VAR_OUTPUT
			state (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION GLOBAL LoadWriteVal;
	
	FUNCTION VIRTUAL GLOBAL Update::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL P_KV::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL P_SFF::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL P_TFF::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL P_SSCALE::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL V_KP::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL V_T::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL V_TN::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL V_T2::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL V_NMAX::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL V_KPREL::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL FeedbOfffset::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

#pragma usingLtd _DriveMotorPara
#pragma usingLtd _DrivePositionPara
#pragma usingLtd _DriveSpeedPara


//}}LSL_DECLARATION


FUNCTION GLOBAL TAB MotorParaBase::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_MOTORPARABASE
0$UINT, 0$UINT, (SIZEOF(::MotorParaBase))$UINT, 
13$UINT, 3$UINT, 0$UINT, 
TO_UDINT(146447722), "MotorParaBase", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::MotorParaBase.ClassSvr.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000001000$UINT, TO_UDINT(619352855), "ClassSvr", 
(::MotorParaBase.Update.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1759376126), "Update", 
(::MotorParaBase.P_KV.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000001000$UINT, TO_UDINT(472701756), "P_KV", 
(::MotorParaBase.P_SFF.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000001000$UINT, TO_UDINT(976862189), "P_SFF", 
(::MotorParaBase.P_TFF.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000001000$UINT, TO_UDINT(1064742248), "P_TFF", 
(::MotorParaBase.P_SSCALE.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000001000$UINT, TO_UDINT(2998132609), "P_SSCALE", 
(::MotorParaBase.V_KP.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000001000$UINT, TO_UDINT(3492028885), "V_KP", 
(::MotorParaBase.V_T.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000001000$UINT, TO_UDINT(3327483750), "V_T", 
(::MotorParaBase.V_TN.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000001000$UINT, TO_UDINT(3882947112), "V_TN", 
(::MotorParaBase.V_T2.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000001000$UINT, TO_UDINT(3200397119), "V_T2", 
(::MotorParaBase.V_NMAX.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000001000$UINT, TO_UDINT(1577944140), "V_NMAX", 
(::MotorParaBase.V_KPREL.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000001000$UINT, TO_UDINT(1505989390), "V_KPREL", 
(::MotorParaBase.FeedbOfffset.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000001000$UINT, TO_UDINT(515752448), "FeedbOfffset", 
//Clients:
(::MotorParaBase.PositionPara.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(138267871), "PositionPara", TO_UDINT(3572968528), "_DrivePositionPara", 1$UINT, 2$UINT, 
(::MotorParaBase.SpeedPara.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(791020502), "SpeedPara", TO_UDINT(2960957186), "_DriveSpeedPara", 1$UINT, 2$UINT, 
(::MotorParaBase.MotPara.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(3090070768), "MotPara", TO_UDINT(4269273944), "_DriveMotorPara", 1$UINT, 4$UINT, 
END_FUNCTION


#define USER_CNT_MotorParaBase 1

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_MotorParaBase] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION MotorParaBase::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT_MotorParaBase, pCmd := #vmt.CmdTable);
	vmt.CmdTable.Write		:= #M_WR_DIRECT();
	vmt.CmdTable.Init		:= #Init();
#pragma warning (disable : 74)
	vmt.UserFcts[0]		:= #Background();

#pragma warning (default : 74)
	ClassSvr.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF ClassSvr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Update.pMeth			:= StoreMethod( #M_RD_DIRECT(), #Update::Write() );
	IF Update.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	P_KV.pMeth			:= StoreMethod( #M_RD_DIRECT(), #P_KV::Write() );
	IF P_KV.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	P_SFF.pMeth			:= StoreMethod( #M_RD_DIRECT(), #P_SFF::Write() );
	IF P_SFF.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	P_TFF.pMeth			:= StoreMethod( #M_RD_DIRECT(), #P_TFF::Write() );
	IF P_TFF.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	P_SSCALE.pMeth			:= StoreMethod( #M_RD_DIRECT(), #P_SSCALE::Write() );
	IF P_SSCALE.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	V_KP.pMeth			:= StoreMethod( #M_RD_DIRECT(), #V_KP::Write() );
	IF V_KP.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	V_T.pMeth			:= StoreMethod( #M_RD_DIRECT(), #V_T::Write() );
	IF V_T.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	V_TN.pMeth			:= StoreMethod( #M_RD_DIRECT(), #V_TN::Write() );
	IF V_TN.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	V_T2.pMeth			:= StoreMethod( #M_RD_DIRECT(), #V_T2::Write() );
	IF V_T2.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	V_NMAX.pMeth			:= StoreMethod( #M_RD_DIRECT(), #V_NMAX::Write() );
	IF V_NMAX.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	V_KPREL.pMeth			:= StoreMethod( #M_RD_DIRECT(), #V_KPREL::Write() );
	IF V_KPREL.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	FeedbOfffset.pMeth			:= StoreMethod( #M_RD_DIRECT(), #FeedbOfffset::Write() );
	IF FeedbOfffset.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION


FUNCTION VIRTUAL GLOBAL MotorParaBase::Init
 

END_FUNCTION


FUNCTION VIRTUAL GLOBAL MotorParaBase::Update::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	Update := input;
  LoadWriteVal();
	result := Update;
  
END_FUNCTION


FUNCTION GLOBAL MotorParaBase::LoadWriteVal

  /// position para
  PositionPara.P_KV := PositionPara.P_KV.Read();
  PositionPara.P_SFF := PositionPara.P_SFF.Read();
  PositionPara.P_TFF := PositionPara.P_TFF.Read();
  PositionPara.P_SSCALE := PositionPara.P_SSCALE.Read();

  if P_KV = 0 then
    P_KV := PositionPara.P_KV;
  end_if;
  if P_SFF = 0 then
    P_SFF := PositionPara.P_SFF;
  end_if;
  if P_TFF = 0 then
    P_TFF := PositionPara.P_TFF;
  end_if;
  if P_SSCALE = 0 then
    P_SSCALE := PositionPara.P_SSCALE;
  end_if;
  
  // kijk waarden o
  SpeedPara.V_KP := SpeedPara.V_KP.Read();
  SpeedPara.V_T := SpeedPara.V_T.Read();
  SpeedPara.V_TN := SpeedPara.V_TN.Read();
  SpeedPara.V_T2 := speedPara.V_T2.Read();
  SpeedPara.V_NMAX := Speedpara.V_NMAX.Read();
  SpeedPara.V_KPREL := SpeedPara.V_KPREL.Read();

  if V_KP = 0 then
    V_KP := SpeedPara.V_KP;
  end_if;
  if V_T = 0 then
    V_T := SpeedPara.V_T.Read();
  end_if;
  if V_TN = 0 then
    V_TN := SpeedPara.V_TN.Read();
  end_if; 
   if V_T2 = 0 then
    V_T2 := SpeedPara.V_T2.Read();
  end_if;  
  if V_NMAX = 0 then
    V_NMAX := SpeedPara.V_NMAX.Read();
  end_if;  
  if V_KPREL = 0 then
    V_KPREL := SpeedPara.V_KPREL.Read();
  end_if;  
  
  // MotorParaBase
  MotPara.M_ROFF := MotPara.M_ROFF.Read();
  
  if FeedbOfffset = 0 then
    FeedbOfffset := MotPara.M_ROFF.Read();
  end_if;
  
 
  // nu schrijf alle variabelen
  // position para
  PositionPara.P_KV.Write(input:=P_KV);
  PositionPara.P_SFF.Write(input:=P_SFF);
  PositionPara.P_TFF.Write(input:=P_TFF);
  PositionPara.P_SSCALE.Write(input:=P_SSCALE);
  
  // speed para
  SpeedPara.V_KP.Write(input:=V_KP); 
  SpeedPara.V_T.Write(input:=V_T);
  SpeedPara.V_TN.Write(input:=V_TN);
  SpeedPara.V_T2.Write(input:=V_T2);
  SpeedPara.V_NMAX.Write(input:=V_NMAX);
  SpeedPara.V_KPREL.Write(input:=V_KPREL);

  // motor
  MotPara.M_ROFF.Write(input:=FeedbOfffset);

  // refresh
  SpeedPara.RefreshAllPara();
  
END_FUNCTION


FUNCTION VIRTUAL GLOBAL MotorParaBase::Background
	VAR_INPUT
		EAX 	: UDINT;
	END_VAR
	VAR_OUTPUT
		state (EAX) 	: UDINT;
	END_VAR
  
  

	state := READY;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL MotorParaBase::V_KP::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	V_KP := input;
	result := V_KP;
  
  LoadWriteVal();

END_FUNCTION


FUNCTION VIRTUAL GLOBAL MotorParaBase::V_TN::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	V_TN := input;
	result := V_TN;
  
  LoadWriteVal();

END_FUNCTION


FUNCTION VIRTUAL GLOBAL MotorParaBase::V_T::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	V_T := input;
	result := V_T;
  
  LoadWriteVal();

END_FUNCTION


FUNCTION VIRTUAL GLOBAL MotorParaBase::V_T2::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	V_T2 := input;
	result := V_T2;
  
  LoadWriteVal();

END_FUNCTION


FUNCTION VIRTUAL GLOBAL MotorParaBase::V_NMAX::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	V_NMAX := input;
	result := V_NMAX;
  
  LoadWriteVal();

END_FUNCTION


FUNCTION VIRTUAL GLOBAL MotorParaBase::V_KPREL::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	V_KPREL := input;
	result := V_KPREL;
  
  LoadWriteVal();

END_FUNCTION


FUNCTION VIRTUAL GLOBAL MotorParaBase::P_KV::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	P_KV := input;
	result := P_KV;
  LoadWriteVal();

END_FUNCTION


FUNCTION VIRTUAL GLOBAL MotorParaBase::P_SFF::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	P_SFF := input;
	result := P_SFF;
  LoadWriteVal();

END_FUNCTION


FUNCTION VIRTUAL GLOBAL MotorParaBase::P_TFF::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	P_TFF := input;
	result := P_TFF;
  LoadWriteVal();

END_FUNCTION


FUNCTION VIRTUAL GLOBAL MotorParaBase::FeedbOfffset::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	FeedbOfffset := input;
	result := FeedbOfffset;
  LoadWriteVal();

END_FUNCTION


FUNCTION VIRTUAL GLOBAL MotorParaBase::P_SSCALE::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	P_SSCALE := input;
	result := P_SSCALE;
  LoadWriteVal();

END_FUNCTION
