//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "multipleTrigger"
	Revision           = "0.0"
	GUID               = "{A2827F88-F1D0-44F0-80C6-A3D1E557B655}"
	RealtimeTask       = "false"
	CyclicTask         = "true"
	DefCyclictime      = "10 ms"
	BackgroundTask     = "false"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(284,120)">
	<Channels>
		<Server Name="typeAction" GUID="{880DAC53-CBEB-4642-BB60-976A512546E7}" Visualized="false" Initialize="true" DefValue="1" WriteProtected="false" Retentive="false" Comment="1 means only positive triggers&#13;&#10;2 means only negative triggers&#13;&#10;else both triggers&#13;&#10;"/>
		<Client Name="client1" Required="true" Internal="false"/>
		<Client Name="client2" Required="false" Internal="false"/>
		<Client Name="client3" Required="false" Internal="false"/>
		<Client Name="client4" Required="false" Internal="false"/>
		<Client Name="input" Required="true" Internal="false"/>
	</Channels>
</Class>
*)
multipleTrigger : CLASS
  //Servers:
	typeAction 	: SvrChCmd_DINT;
  //Clients:
	input 	: CltCh_DINT;
	client1 	: CltCh_DINT;
	client2 	: CltCh_DINT;
	client3 	: CltCh_DINT;
	client4 	: CltCh_DINT;
  //Variables:
		oldInput 	: DINT;
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL CyWork
		VAR_INPUT
			EAX 	: UDINT;
		END_VAR
		VAR_OUTPUT
			state (EAX) 	: UDINT := READY;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

//}}LSL_DECLARATION


FUNCTION GLOBAL TAB multipleTrigger::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_MULTIPLETRIGGER
0$UINT, 0$UINT, (SIZEOF(::multipleTrigger))$UINT, 
1$UINT, 5$UINT, 0$UINT, 
TO_UDINT(2941015492), "multipleTrigger", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::multipleTrigger.typeAction.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(3362257606), "typeAction", 
//Clients:
(::multipleTrigger.input.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(796717159), "input", 
(::multipleTrigger.client1.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(2620510234), "client1", 
(::multipleTrigger.client2.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(87589280), "client2", 
(::multipleTrigger.client3.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(1916776758), "client3", 
(::multipleTrigger.client4.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(3965396117), "client4", 
END_FUNCTION


#define USER_CNT_multipleTrigger 0

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_multipleTrigger] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION multipleTrigger::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT_multipleTrigger, pCmd := #vmt.CmdTable);
	vmt.CmdTable.Write		:= #M_WR_DIRECT();
	vmt.CmdTable.CyWork		:= #CyWork();
	typeAction.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF typeAction.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION
// JdK 22-7-2019: multipleTrigger created for Traffiroad/4284

// goal is to write changement of server to 4 clients


FUNCTION VIRTUAL GLOBAL multipleTrigger::CyWork
	VAR_INPUT
		EAX 	: UDINT;
	END_VAR
	VAR_OUTPUT
		state (EAX) 	: UDINT;(* := READY *)
	END_VAR

  input:=input.Read();
  
  IF input <> oldInput & (input=1 | typeAction<> 1) & (input=0 | typeAction<>2) THEN //only on positive/negative trigger
    client1:=client2:=client3:=client4:=input;
    client1.Write (client1);
    client2.Write (client2);
    client3.Write (client3);
    client4.Write (client4);
  END_IF;
  oldInput:= input;
    


END_FUNCTION
