//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "andServerClient"
	Revision           = "0.0"
	GUID               = "{57E6B826-C85A-484B-9F2D-92D6EA7DDE33}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(284,120)">
	<Channels>
		<Server Name="ClassSvr" GUID="{38218615-E34C-4B6F-AA82-67861B2B3163}" Visualized="false" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Client Name="client1" Required="true" Internal="false"/>
		<Client Name="client2" Required="true" Internal="false"/>
		<Client Name="client3" Required="false" Internal="false"/>
		<Client Name="client4" Required="false" Internal="false"/>
	</Channels>
</Class>
*)
andServerClient : CLASS
  //Servers:
	ClassSvr 	: SvrChCmd_DINT;
  //Clients:
	client1 	: CltCh_DINT;
	client2 	: CltCh_DINT;
	client3 	: CltCh_DINT;
	client4 	: CltCh_DINT;
  //Variables:
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL ClassSvr::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

//}}LSL_DECLARATION


FUNCTION GLOBAL TAB andServerClient::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_ANDSERVERCLIENT
0$UINT, 0$UINT, (SIZEOF(::andServerClient))$UINT, 
1$UINT, 4$UINT, 0$UINT, 
TO_UDINT(1356857217), "andServerClient", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::andServerClient.ClassSvr.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(619352855), "ClassSvr", 
//Clients:
(::andServerClient.client1.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(2620510234), "client1", 
(::andServerClient.client2.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(87589280), "client2", 
(::andServerClient.client3.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(1916776758), "client3", 
(::andServerClient.client4.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(3965396117), "client4", 
END_FUNCTION


#define USER_CNT_andServerClient 0

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_andServerClient] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION andServerClient::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT_andServerClient, pCmd := #vmt.CmdTable);
	vmt.CmdTable.Write		:= #Write();
	ClassSvr.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF ClassSvr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION
// JdK 22-7-2019: andServerClient created for Traffiroad/4284

// goal is to write server to 4 clients

FUNCTION VIRTUAL GLOBAL andServerClient::ClassSvr::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	ClassSvr := input;
  client1:= ClassSvr;
  client2:= ClassSvr;
  client3:= ClassSvr;
  client4:= ClassSvr;
  client1.Write(input:=client1);
  client2.Write(input:=client2);
  client3.Write(input:=client3);
  client4.Write(input:=client4);
	result := ClassSvr;

END_FUNCTION
