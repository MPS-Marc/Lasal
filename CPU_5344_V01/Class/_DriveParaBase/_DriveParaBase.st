//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION
#include "..\..\Class\_DriveMngBase\SDDDefinitions.h"

(*!
<Class
	Name               = "_DriveParaBase"
	Revision           = "1.2"
	GUID               = "{6CDF079C-3E38-49BF-9AF9-BCE993A15B65}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "true"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	IconPath           = ".\Class\_DriveMngBase\Drive.ico"
	SharedCommandTable = "true"
	Objectsize         = "(334,120)"
	Comment            = "base class for the connected Drive parameter classes">
	<Channels>
		<Server Name="State" GUID="{C20BD6A0-21DD-4196-9817-0E1A69D719A9}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Actual state of the parameter class&#13;&#10;Following states are possible :&#13;&#10;READY&#13;&#10;BUSY&#13;&#10;ERROR"/>
		<Client Name="DriveAxis" Required="false" Internal="false" Comment="object channel to _DriveAxis"/>
		<Client Name="ErrorCode" Required="false" Internal="false" Comment="Following error codes are possible :&#13;&#10;ErrorCode &#13;&#10;   3 =    object change only in disable state&#13;&#10;   4 =    object value greater max value or smaller min value&#13;&#10;   5 =    object write not possible&#13;&#10;   6 =    object cannot be changed in this mode&#13;&#10;   7 =    object not available&#13;&#10;   8 =    object read not possible&#13;&#10;   9 =    initialisation processed successful&#13;&#10;  10 =    communication not initialised&#13;&#10;  11 =    axle number not available"/>
	</Channels>
	<Dependencies>
		<Files>
			<File Path=".\Class\_DriveMngBase\SDDDefinitions.h" Include="true"/>
		</Files>
	</Dependencies>
	<RevDoku>
		<Owner Company="Sigmatek" Author="HasHan"/>
		<Dokumentation Revision="1.2" Date="08.11.2016" Author="ZoePat" Company="Sigmatek" Description="Client &quot;DriveAxis&quot; is now not required."/>
		<Dokumentation Revision="1.1" Date="16.09.2011" Author="RamAnd" Company="Sigmatek" Description="State-Server is now visualized."/>
		<Dokumentation Revision="1.0" Date="05.08.2009" Author="HasHan" Company="Sigmatek" Description="Creation"/>
	</RevDoku>
</Class>
*)
_DriveParaBase : CLASS
  //Servers:
	State 	: SvrChCmd_iprStates;
  //Clients:
	DriveAxis 	: CltChCmd__DriveAxisBase;
	ErrorCode 	: CltCh_DINT;
  //Variables:
		ErrorParaNr 	: USINT;
		ErrorParaValue 	: DINT;
		AnzASyncPara 	: DINT;
		bNoASync 	: BOOL;
		bCheckedClientConnected 	: BOOL;
		bAxisConnected 	: BOOL;
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL Init;
	
	FUNCTION VIRTUAL GLOBAL GetErrorInfo
		VAR_INPUT
			pParaNr 	: ^USINT;
			pValue 	: ^DINT;
		END_VAR
		VAR_OUTPUT
			dErrorCode 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL SetASyncCmd
		VAR_INPUT
			ParaNr 	: USINT;
			ParaRdWr 	: USINT;
			ParaValue 	: DINT;
			pThis 	: ^void;
		END_VAR
		VAR_OUTPUT
			result 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL RefreshPara
		VAR_INPUT
			usParaNr 	: USINT;
			dValue 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL RefreshAllPara;
	
	FUNCTION IsAxisConnected
		VAR_OUTPUT
			IsConnected 	: BOOL;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL State::NewInst
		VAR_INPUT
			pPara 	: ^CmdStruct;
			pResult 	: ^results;
		END_VAR
		VAR_OUTPUT
			ret_code 	: iprStates;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

#pragma usingLtd _DriveAxisBase


//}}LSL_DECLARATION


FUNCTION GLOBAL TAB _DriveParaBase::@CT_
0$UINT,
2#0100000000000000$UINT, //TY__DRIVEPARABASE
1$UINT, 2$UINT, (SIZEOF(::_DriveParaBase))$UINT, 
1$UINT, 2$UINT, 0$UINT, 
TO_UDINT(3299882984), "_DriveParaBase", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::_DriveParaBase.State.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(1422331979), "State", 
//Clients:
(::_DriveParaBase.DriveAxis.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000000$UINT, TO_UDINT(2080180789), "DriveAxis", TO_UDINT(4124502522), "_DriveAxisBase", 1$UINT, 75$UINT, 
(::_DriveParaBase.ErrorCode.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(224164065), "ErrorCode", 
END_FUNCTION


#define USER_CNT__DriveParaBase 4

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT__DriveParaBase] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION _DriveParaBase::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT__DriveParaBase, pCmd := #vmt.CmdTable);
	vmt.CmdTable.NewInstr		:= #NewInst();
	vmt.CmdTable.Init		:= #Init();
#pragma warning (disable : 74)
	vmt.UserFcts[0]		:= #GetErrorInfo();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[1]		:= #SetASyncCmd();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[2]		:= #RefreshPara();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[3]		:= #RefreshAllPara();

#pragma warning (default : 74)
	State.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF State.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION
FUNCTION VIRTUAL GLOBAL _DriveParaBase::Init

	if _firstscan then
		State := ERROR; 
	end_if;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL _DriveParaBase::GetErrorInfo
	VAR_INPUT
		pParaNr 	: ^USINT;
		pValue 	: ^DINT;
	END_VAR
	VAR_OUTPUT
		dErrorCode 	: DINT;
	END_VAR
  
  if pParaNr <> NIL then
    pParaNr^ := ErrorParaNr;
  end_if;
  
  if pValue <> NIL then
    pValue^ := ErrorParaValue;
  end_if;
  
  dErrorCode := ErrorCode;
  
END_FUNCTION


FUNCTION VIRTUAL GLOBAL _DriveParaBase::State::NewInst
	VAR_INPUT
		pPara 	: ^CmdStruct;
		pResult 	: ^results;
	END_VAR
	VAR_OUTPUT
		ret_code 	: iprStates;
	END_VAR

	ret_code:= READY;

	case pPara^.uiCmd of
	SDD_ASYNC_READY :
		// was the command a read or a write command
		if pPara^.aPara[1] = 0 then
			// read command
			RefreshPara(usParaNr:= to_usint(pPara^.aPara[0]), dValue:= pPara^.aPara[2]);
		end_if;
    
    AnzASyncPara -= 1;
    if (AnzASyncPara = 0) then
      if State <> ERROR then
        State := READY;
      end_if;
      bNoASync := FALSE;
    end_if;
    
  SDD_ASYNC_ERROR :
    ErrorParaNr := to_usint(pPara^.aPara[0]);
    ErrorParaValue := pPara^.aPara[2];
    ErrorCode := pPara^.aPara[1];
    ErrorCode.write(ErrorCode);
    
    AnzASyncPara -= 1;
    if (AnzASyncPara = 0) then
      bNoASync := FALSE;
    end_if;
    
    State := ERROR;
  
  SDD_REFRESH_SETPARA :
    RefreshPara(usParaNr:= to_usint(pPara^.aPara[0]), dValue:= pPara^.aPara[1]);
  
  SDD_ASYNC_BUSY :
    State := BUSY;
    bNoASync := TRUE;
    RefreshAllPara();
  
  SDD_GENERAL_ERROR :
    State     := ERROR;
    DriveAxis := ERROR;
    AnzASyncPara := 0;
    bNoASync  := TRUE;
  
  SDD_GENERAL_READY :
    State     := READY;
    DriveAxis := READY;
    bNoASync  := FALSE;
    
	end_case;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL _DriveParaBase::RefreshPara
#pragma warning(disable:0073)
	VAR_INPUT
		usParaNr 	: USINT;
		dValue 	: DINT;
	END_VAR
#pragma warning(default:0073)
  
END_FUNCTION


FUNCTION VIRTUAL GLOBAL _DriveParaBase::SetASyncCmd
	VAR_INPUT
		ParaNr 	: USINT;
		ParaRdWr 	: USINT;
		ParaValue 	: DINT;
		pThis 	: ^void;
	END_VAR
	VAR_OUTPUT
		result 	: DINT;
	END_VAR
  
  result := ACCESS_DENIED;
  
  if (IsAxisConnected() = TRUE) & (DriveAxis.AxisState.NotOnline = 0) & (DriveAxis.IsOnline() = TRUE) & (DriveAxis.AxisState.NotInitialized = 0) then
    // Add the entry into the ring buffer
    result := DriveAxis.AddASyncEntry(to_usint(ParaNr), to_usint(ParaRdWr), ParaValue, pThis, 0);
    if result = 0 then
      State := BUSY;
      AnzASyncPara += 1;
    end_if;
  end_if;
  
END_FUNCTION


FUNCTION VIRTUAL GLOBAL _DriveParaBase::RefreshAllPara

END_FUNCTION


FUNCTION _DriveParaBase::IsAxisConnected
	VAR_OUTPUT
		IsConnected 	: BOOL;
	END_VAR

  if bCheckedClientConnected then
    IsConnected := bAxisConnected;
  else
    IsConnected := bAxisConnected := IsClientConnected(#DriveAxis)$BOOL;
    bCheckedClientConnected := TRUE;
  end_if;

END_FUNCTION
