//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "Bridge"
	Revision           = "1.0"
	GUID               = "{F609FAAA-9C55-11D5-B925-0010609208D7}"
	RealtimeTask       = "false"
	CyclicTask         = "true"
	BackgroundTask     = "false"
	Sigmatek           = "true"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	IconPath           = ".\Class\Bridge\bridge.ico"
	SharedCommandTable = "true"
	Objectsize         = "(284,120)"
	Comment            = "V1.0&#13;&#10;Claas reads the first Client &#13;&#10;and writes the value on the next.&#13;&#10;To use it turn on the cyclic time">
	<Channels>
		<Server Name="dummy" GUID="{F609FAAB-9C55-11D5-B925-0010609208D7}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="no use"/>
		<Client Name="Client_Read" Required="false" Internal="false" Comment="reading Client"/>
		<Client Name="Client_Write" Required="false" Internal="false" Comment="Client_Write = Client_Read"/>
	</Channels>
</Class>
*)
Bridge : CLASS
  //Servers:
	dummy 	: SvrChCmd_DINT;
  //Clients:
	Client_Read 	: CltCh_DINT;
	Client_Write 	: CltCh_DINT;
  //Variables:
  //Functions:
				//! <Function Comment=" ******************************************************************&#13;&#10;   Klasse liest den ersten Client und schreibt den zweiten Client&#13;&#10; ******************************************************************&#13;&#10;    erstellt    :   BS  :     KW 35/01&#13;&#10; ******************************************************************&#13;&#10;                           CYWORK Funktion&#13;&#10; ******************************************************************&#13;&#10;   getested: BS | 29.11.2001 | Lasal V00.53 | OPS V4.00&#13;&#10; ******************************************************************&#13;&#10; ******************************************************************&#13;&#10;            Class reads the first Client and writes the&#13;&#10;                          next Client&#13;&#10; ******************************************************************&#13;&#10;    created    :   BS  :     KW 35/01&#13;&#10; ******************************************************************&#13;&#10;                    Operation of CyWork Function&#13;&#10; ******************************************************************&#13;&#10;   tested: BS | 29.11.2001 | Lasal V00.53 | OPS V4.00&#13;&#10; ******************************************************************&#13;&#10;" Name="CyWork"/>
	FUNCTION VIRTUAL GLOBAL CyWork
		VAR_INPUT
			EAX 	: UDINT := EAX;
		END_VAR
		VAR_OUTPUT
			state (EAX) 	: UDINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

//}}LSL_DECLARATION


FUNCTION GLOBAL TAB Bridge::@CT_
0$UINT,
2#0100000000000000$UINT, //TY_BRIDGE
1$UINT, 0$UINT, (SIZEOF(::Bridge))$UINT, 
1$UINT, 2$UINT, 0$UINT, 
TO_UDINT(2575353881), "Bridge", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::Bridge.dummy.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(3097505935), "dummy", 
//Clients:
(::Bridge.Client_Read.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(84492265), "Client_Read", 
(::Bridge.Client_Write.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(1285073614), "Client_Write", 
END_FUNCTION


#define USER_CNT_Bridge 0

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_Bridge] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION Bridge::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT_Bridge, pCmd := #vmt.CmdTable);
	vmt.CmdTable.Write		:= #M_WR_DIRECT();
	vmt.CmdTable.CyWork		:= #CyWork();
	dummy.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF dummy.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION


//*********************Inserted from .\code\C_Bridge.st*********************



 



//[#DEUTSCH]
// ******************************************************************
//   Klasse liest den ersten Client und schreibt den zweiten Client
// ******************************************************************
//  		erstellt 		 :		 BS		:   		KW 35/01
// ******************************************************************
//                           CYWORK Funktion
// ******************************************************************
//   getested: BS | 29.11.2001 | Lasal V00.53 | OPS V4.00
// ******************************************************************
//[#ENGLISH]
// ******************************************************************
//            Class reads the first Client and writes the
//                          next Client
// ******************************************************************
//  		created 		 :		 BS		:   		KW 35/01
// ******************************************************************
//                    Operation of CyWork Function
// ******************************************************************
//   tested: BS | 29.11.2001 | Lasal V00.53 | OPS V4.00
// ******************************************************************
FUNCTION VIRTUAL GLOBAL Bridge::CyWork
VAR_INPUT
	EAX		: UDINT;
END_VAR
VAR_OUTPUT
	state		: UDINT;
END_VAR

	Client_Read	:= Client_Read.Read();
	Client_Write:= Client_Read;
	Client_Write.Write(Client_Write);

	state := READY$UDINT;
END_FUNCTION //VIRTUAL GLOBAL Bridge::CyWork

