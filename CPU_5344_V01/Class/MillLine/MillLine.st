//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "MillLine"
	Revision           = "0.0"
	GUID               = "{3E1B3F18-349E-4F49-B6A6-DF489657BC3C}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(390,360)">
	<Channels>
		<Server Name="ClassSvr" GUID="{430B35C4-2703-43EB-8BF6-ED023B60E42D}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="middleX" GUID="{9DF3CC7F-51AF-4FD5-A0B0-CBA86C8108EE}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="middleY" GUID="{3891074C-C546-498C-88D0-945E357E1295}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="millType" GUID="{A2184BC6-1040-486B-9CE1-194E4E76521E}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="radius" GUID="{170DE14D-A589-4244-91FD-5360B21AAC30}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="rnr" GUID="{D52F2DF9-833E-477C-B7EC-31962E101ED1}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="xGoal" GUID="{938406E3-5308-4933-B240-94658C4F9429}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="yGoal" GUID="{2AB94949-9F68-489C-9610-7AB3EA408D5C}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
	</Channels>
</Class>
*)
MillLine : CLASS
  //Servers:
	ClassSvr 	: SvrChCmd_DINT;
	rnr 	: SvrCh_DINT;
	millType 	: SvrCh_eMillType;
	xGoal 	: SvrCh_DINT;
	yGoal 	: SvrCh_DINT;
	radius 	: SvrCh_DINT;
	middleX 	: SvrCh_DINT;
	middleY 	: SvrCh_DINT;
  //Clients:
  //Variables:
		ptr 	: ^strMillLine;
  //Functions:
	
	FUNCTION GLOBAL WritePtr
		VAR_INPUT
			iPtr 	: ^strMillLine;
		END_VAR;
	
	FUNCTION WriteServers;
	
	FUNCTION VIRTUAL GLOBAL millType::Write
		VAR_INPUT
			input (EAX) 	: eMillType;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: eMillType;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL xGoal::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL yGoal::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL radius::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL middleX::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL middleY::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

//}}LSL_DECLARATION


FUNCTION GLOBAL TAB MillLine::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_MILLLINE
0$UINT, 0$UINT, (SIZEOF(::MillLine))$UINT, 
8$UINT, 0$UINT, 0$UINT, 
TO_UDINT(628474366), "MillLine", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::MillLine.ClassSvr.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(619352855), "ClassSvr", 
(::MillLine.rnr.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2078699935), "rnr", 
(::MillLine.millType.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2025792033), "millType", 
(::MillLine.xGoal.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(625781393), "xGoal", 
(::MillLine.yGoal.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(405570337), "yGoal", 
(::MillLine.radius.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3414469084), "radius", 
(::MillLine.middleX.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3101472674), "middleX", 
(::MillLine.middleY.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3487270708), "middleY", 
//Clients:
END_FUNCTION


#define USER_CNT_MillLine 0

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_MillLine] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION MillLine::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT_MillLine, pCmd := #vmt.CmdTable);
	ClassSvr.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF ClassSvr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	rnr.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF rnr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	millType.pMeth			:= StoreMethod( #M_RD_DIRECT(), #millType::Write() );
	IF millType.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	xGoal.pMeth			:= StoreMethod( #M_RD_DIRECT(), #xGoal::Write() );
	IF xGoal.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	yGoal.pMeth			:= StoreMethod( #M_RD_DIRECT(), #yGoal::Write() );
	IF yGoal.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	radius.pMeth			:= StoreMethod( #M_RD_DIRECT(), #radius::Write() );
	IF radius.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	middleX.pMeth			:= StoreMethod( #M_RD_DIRECT(), #middleX::Write() );
	IF middleX.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	middleY.pMeth			:= StoreMethod( #M_RD_DIRECT(), #middleY::Write() );
	IF middleY.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION


FUNCTION VIRTUAL GLOBAL MillLine::millType::Write
	VAR_INPUT
		input (EAX) 	: eMillType;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: eMillType;
	END_VAR

  if ptr <> NIL then
    millType := input;
    ptr^.millType := millType;
    result :=millType;
  else
    result := ACCESS_DENIED$eMillType;
  end_if;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL MillLine::xGoal::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

  
  if ptr <> NIL then
    xGoal := input;
    ptr^.xGoal := xGoal;
    result := xGoal;
  else
    result := ACCESS_DENIED;
  end_if;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL MillLine::yGoal::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

  if ptr <> NIL then
    yGoal := input;
    ptr^.yGoal := yGoal;
    result := yGoal;
  else
    result := ACCESS_DENIED;
  end_if;

END_FUNCTION


FUNCTION GLOBAL MillLine::WritePtr
	VAR_INPUT
		iPtr 	: ^strMillLine;
	END_VAR

  ptr := iPtr;
  WriteServers();


END_FUNCTION


FUNCTION MillLine::WriteServers

  if ptr <> NIL then
    millType := ptr^.millType;
    xGoal := ptr^.xGoal;
    yGoal := ptr^.yGoal;
    radius := ptr^.radius;
    middleX := ptr^.middleX;
    middleY := ptr^.middleY;
  end_if;
  

END_FUNCTION


FUNCTION VIRTUAL GLOBAL MillLine::radius::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

  if ptr <> NIL then
	  radius := input;
    ptr^.radius := radius;
	  result := radius;
  else
    result := ACCESS_DENIED;
  end_if;
  

END_FUNCTION


FUNCTION VIRTUAL GLOBAL MillLine::middleX::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

  if ptr <> NIL then
	  middleX := input;
    ptr^.middleX:=input;
	  result := middleX;  
  else
    result := ACCESS_DENIED;
  end_if;


END_FUNCTION


FUNCTION VIRTUAL GLOBAL MillLine::middleY::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

  if ptr <> NIL then
	  middleY := input;
    ptr^.middleY:=input;
	  result := middleY;  
  else
    result := ACCESS_DENIED;
  end_if;

END_FUNCTION
