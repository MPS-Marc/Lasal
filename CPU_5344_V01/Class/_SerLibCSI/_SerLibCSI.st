//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "_SerLibCSI"
	Revision           = "2.11"
	GUID               = "{8EAFED1D-7378-4542-922F-EEFD10777830}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "true"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	IconPath           = ".\Class\_SerLibCSI\Tools.ICO"
	SharedCommandTable = "true"
	Objectsize         = "(540,120)">
	<Channels>
		<Server
			Name           = "Com"
			Initialize     = "true"
			Visualized     = "false"
			WriteProtected = "true">
		</Server>
		<Server
			Name           = "Command"
			Initialize     = "false"
			Visualized     = "false"
			WriteProtected = "true">
		</Server>
		<Client Name="Com_Baudrate" Required="false" Internal="false" Comment="Inits Com with Init-Value&#13;&#10;&#13;&#10;0......300 Bd&#13;&#10;1......600 Bd&#13;&#10;2.....1200 Bd&#13;&#10;3.....2400 Bd&#13;&#10;4.....4800 Bd&#13;&#10;5.....9600 Bd&#13;&#10;6....14400 Bd&#13;&#10;7....19200 Bd&#13;&#10;8....38400 Bd&#13;&#10;9....56000 Bd&#13;&#10;10..115200 Bd&#13;&#10;&#13;&#10;-1..Com not initialized&#13;&#10;"/>
		<Client Name="Com_FifoControl" Required="false" Internal="false" Comment="Inits Com with Init-Value&#13;&#10;&#13;&#10;0..Fifo Off&#13;&#10;1..Fifo On&#13;&#10;&#13;&#10;-1..Com not initialized&#13;&#10;"/>
		<Client Name="Com_Parity" Required="false" Internal="false" Comment="Inits Com with Init-Value&#13;&#10;&#13;&#10;0..No Parity&#13;&#10;1..Odd Parity&#13;&#10;2..Even Parity&#13;&#10;3..Mark&#13;&#10;4..Space&#13;&#10;&#13;&#10;-1..Com not initialized&#13;&#10;"/>
		<Client Name="Com_RSMode" Required="false" Internal="false" Comment="Inits Com with Init-Value&#13;&#10;&#13;&#10;0..232&#13;&#10;1..422&#13;&#10;2..485&#13;&#10;3..TTY&#13;&#10;4..IBIS&#13;&#10;&#13;&#10;-1..Com not initialized&#13;&#10;"/>
		<Client Name="Com_StopBit" Required="false" Internal="false" Comment="Inits Com with Init-Value&#13;&#10;&#13;&#10;1..One StopBit&#13;&#10;2..Two StopBits&#13;&#10;&#13;&#10;-1..Com not initialized"/>
		<Client Name="Com_WordLength" Required="false" Internal="false" Comment="Inits Com with Init-Value&#13;&#10;&#13;&#10;WordLength 5..8&#13;&#10;&#13;&#10;-1..Com not initialized"/>
		<Client Name="ToCSI022_Base" Required="true" Internal="false"/>
	</Channels>
	<RevDoku>
		<Owner Company="Sigmatek" Author="ObeChr"/>
		<Dokumentation Revision="2.11" Date="10.07.2014" Author="ZoePat" Company="Sigmatek" Description="Corrected value of GetInterfaceType().&#13;&#10;Added GetRSMode()."/>
		<Dokumentation Revision="2.10" Date="12.02.2014" Author="PieSte" Company="Sigmatek" Description="Add read Client Com_Baudrate, Com_WordLength, Com_Parity, Com_StopBit, Com_FifoControl and Com_RSMode in Init to set value with connected server."/>
		<Dokumentation Revision="2.0" Date="02.12.2009" Author="ObeChr" Company="Sigmatek" Description="New Class =&gt; Correction of 485 Mode"/>
	</RevDoku>
	<Network Name="_SerLibCSI">
		<!-- List of Components in this network -->
		<Components>
			<Object
				Name       = "_base"
				GUID       = "{D8D06607-5C07-47E4-81D0-C11647ADDC75}"
				Class      = "_SerLib"
				Position   = "(240,180)"
				Visualized = "true">
				<Channels>
					<Server Name="Com"/>
					<Server Name="Command"/>
				</Channels>
			</Object>
		</Components>
		<Comments>
		</Comments>
		<!-- List of Connections in this network -->
		<Connections>
			<Connection Source="this.Command" Destination="_base.Command" Vertices="(712,210),(540,270),"/>
			<Connection Source="this.Com" Destination="_base.Com" Vertices="(712,270),(540,330),"/>
		</Connections>
		<!-- Headerfiles -->
		<Options>
		</Options>
	</Network>
</Class>
*)
#pragma using _SerLib

_SerLibCSI : CLASS
: _SerLib
  //Servers:
  //Clients:
	ToCSI022_Base 	: CltChCmd_CSI022_Base;
	Com_Baudrate 	: CltCh_DINT;
	Com_WordLength 	: CltCh_DINT;
	Com_Parity 	: CltCh_DINT;
	Com_StopBit 	: CltCh_DINT;
	Com_FifoControl 	: CltCh_DINT;
	Com_RSMode 	: CltCh_UDINT;
  //Variables:
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL Init;
				//! <Function Comment="Closes an initialized Com if initialized and initializes a new One" Name="StartUser"/>
	FUNCTION VIRTUAL GLOBAL StartUser
		VAR_INPUT
			Baud 	: DINT;			//! <Variable Comment="0..SERUSERBAUD_300, 1..600, 2..1200, 3..2400, 4..4800, 5..9600, 6..14400, 7..19200, 8..38400, 9..56000, 10..115200" Name="StartUser.Baud"/>
			wordl 	: DINT;			//! <Variable Comment="&quot;Wortlänge&quot;  5, 6, 7 oder 8 Bit" Name="StartUser.wordl"/>
			Parity 	: DINT;			//! <Variable Comment="0..SERUSERPARITY_NONE / 1..SERUSERPARITY_ODD / 2..SERUSERPARITY_EVEN / 3..SERUSERPARITY_MARK / 4..SERUSERPARITY_SPACE" Name="StartUser.Parity"/>
			StopB 	: DINT;			//! <Variable Comment="1=ein Stop Bit, 2=2 Stop Bits für Wortlänge von 6,7 oder 8 Bits oder 1.5 stop Bits für eine Wortlänge von 5 Bits. " Name="StartUser.StopB"/>
			FifoOnOff 	: DINT := 1;
		END_VAR
		VAR_OUTPUT
			ErrorCode 	: DINT;			//! <Variable Comment="0=OK; -1:Com&lt;&gt;1-4; -2=Fehler Baud Tabelle; -3=Baudrate&lt;&gt;0-10; -4=Parity&lt;&gt;0-4; - 5=Stoppbits&lt;&gt;1-2; -6=ErrorWORDLEN; -10=COM wird bereits verwendet; -11=Com wird bereits vom OS verwendet; -12=CPU hat keine COM mit der Nr.; -13=OS Error;-14=Kein Initialisierung; -15=falsche Übergabe; -16=Empfangsbuffer zu klein, muss &gt;= 128 Byte&apos;s sein; -17=Übergabe war NIL; -19=keine Daten im Empfangsbuffer; -20=Sendeprozess konnte nicht abgeschlossen werden " Name="StartUser.ErrorCode"/>
		END_VAR;
				//! <Function Comment="Closes an initialized Com and enables the Lasal Online-Communication" Name="StopUser"/>
	FUNCTION VIRTUAL GLOBAL StopUser
		VAR_OUTPUT
			ErrorCode 	: DINT;			//! <Variable Comment="0=OK; -1:Com&lt;&gt;1-4; -2=Error baudtable; -3=baudrate&lt;&gt;0-10; -4=parity&lt;&gt;0-4; - 5=stopbits&lt;&gt;1-2; -6=ErrorWORDLEN; -10=Com allready in use; -11=Com allready in use of OS; -12=CPU has no COM of this No.;-13=OS Error;-14=NoInitialization; -15=WRONG INPUT; -16=receiving buffer too low, has to be bigger then &gt;= 128 Byte&apos;s; -17=INPUT was NIL; -19=no DATA in receiving buffer; -20=sending process couldn&apos;t be ended (disturbance., sendbuffer overflow, ...)" Name="StopUser.ErrorCode"/>
		END_VAR;
				//! <Function Comment="Sends Data over the initialized Com&#13;&#10;" Name="SerSend"/>
	FUNCTION VIRTUAL GLOBAL SerSend
		VAR_INPUT
			Buffer 	: pVoid;			//! <Variable Comment="Zeiger auf Empfangsbuffer" Name="SerSend.Buffer"/>
			Bufferlength 	: UDINT;
			WrLen 	: ^UDINT;
		END_VAR
		VAR_OUTPUT
			ErrorCode 	: DINT;
		END_VAR;
				//! <Function Comment="This Function clears an initialized Com, Receiving Buffer also will be cleared" Name="SerClose"/>
	FUNCTION VIRTUAL GLOBAL SerClose;
	
	FUNCTION VIRTUAL GLOBAL SetOnline
		VAR_INPUT
			state 	: UDINT;			//! <Variable Comment="0=low, 1=high (standard)" Name="SetOnline.state"/>
		END_VAR
		VAR_OUTPUT
			ErrorCode 	: DINT;
		END_VAR;
				//! <Function Comment="reads a Area of Character of the Receiving Buffer" Name="RecvBlock"/>
	FUNCTION VIRTUAL GLOBAL RecvBlock
		VAR_INPUT
			Buffer 	: pVoid;			//! <Variable Comment="Pointer to receivbuffer" Name="RecvBlock.Buffer"/>
			rdlength 	: UDINT;			//! <Variable Comment="Anzahl der zu lesenden Bytes" Name="RecvBlock.rdlength"/>
			rdlen 	: ^UDINT;			//! <Variable Comment="Anzahl der richtig gelesenen Bytes" Name="RecvBlock.rdlen"/>
		END_VAR
		VAR_OUTPUT
			ErrorCode 	: DINT;
		END_VAR;
				//! <Function Comment="Function reads one Byte from the serial Drivers Receive Buffer&#13;&#10;" Name="RecvChar"/>
	FUNCTION VIRTUAL GLOBAL RecvChar
		VAR_INPUT
			Buffer 	: pVoid;
		END_VAR
		VAR_OUTPUT
			ErrorCode 	: DINT;
		END_VAR;
				//! <Function Comment="returns the Number of Characters in the Receive Buffer &#13;&#10;if return value &lt; 0 --&gt; return value = Error Code&#13;&#10;" Name="GetRecvState"/>
	FUNCTION VIRTUAL GLOBAL GetRecvState
		VAR_OUTPUT
			length 	: UDINT;			//! <Variable Comment="Anzahl der Bytes, die neu empfangen wurden" Name="GetRecvState.length"/>
		END_VAR;
				//! <Function Comment="returns, how many Bytes are in the Sendbuffer&#13;&#10;if return value &lt; 0 --&gt; return value = Error Code&#13;&#10;" Name="GetSendState"/>
	FUNCTION VIRTUAL GLOBAL GetSendState
		VAR_OUTPUT
			to_send 	: UDINT;			//! <Variable Comment="If the function succeeds, the return value is the number of characters in the send buffer, otherwise a negative error code value is returned." Name="GetSendState.to_send"/>
		END_VAR;
				//! <Function Comment="returns actual error state&#13;&#10;&#13;&#10;    0 .. SERERROR_NONE&#13;&#10;  - 1 .. SERERROR_COMNUM     -&gt; Com &lt;&gt; 1-4&#13;&#10;  - 2 .. SERERROR_BAUDTABLE  -&gt; Error baudtable&#13;&#10;  - 3 .. SERERROR_BAUDRATE   -&gt; baudrate &lt;&gt; 0-10&#13;&#10;  - 4 .. SERERROR_PARITY     -&gt; parity &lt;&gt; 0-4&#13;&#10;  - 5 .. SERERROR_STOPBIT    -&gt; Stopbits &lt;&gt; 1-2&#13;&#10;  - 6 .. SERERROR_WORDLEN    -&gt; wrong wordlength&#13;&#10;  -10 .. SERERROR_INUSE      -&gt; Com allready in use&#13;&#10;  -11 .. SERERROR_OSINUSE    -&gt; Com allready in use of OS&#13;&#10;  -12 .. SERERROR_NOTAVAIL   -&gt; CPU has no COM of this NR&#13;&#10;  -13 .. SERERROR_NOMEM      -&gt; OS Error&#13;&#10;  -14 .. SERERROR_NOHANDLE   -&gt; Com not initialized&#13;&#10;  -15 .. SERERROR_PARAMETER  -&gt; WRONG INPUT&#13;&#10;  -16 .. SERERROR_RECVBUF    -&gt; Receiving Buffer too low, has to bigger then &gt;= 128 Byte&apos;s**&#13;&#10;  -17 .. SERERROR_SENDBUF    -&gt; INPUT was NIL&#13;&#10;  -18 .. SERERROR_TOOLONG&#13;&#10;  -19 .. SERERROR_RECVERROR  -&gt; No DATA in Receiving Buffe&#13;&#10;  -20 .. SERERROR_SENDERROR  -&gt; sending process couldn&apos;t be ended (disturbance., sendbuffer overflow, ...)&#13;&#10;&#13;&#10;" Name="GetError"/>
	FUNCTION VIRTUAL GLOBAL GetError
		VAR_OUTPUT
			ErrorCode 	: DINT;
		END_VAR;
				//! <Function Comment="Checks, if Com is inialized&#13;&#10;0 = No Initialization&#13;&#10;1 = is initialized&#13;&#10;&#13;&#10;" Name="IsInitialized"/>
	FUNCTION VIRTUAL GLOBAL IsInitialized
		VAR_OUTPUT
			Initialization 	: UDINT;			//! <Variable Comment="Initialisiert 0=NEIN/1=JA" Name="IsInitialized.Initialization"/>
		END_VAR;
				//! <Function Comment="returns Info of Com&#13;&#10;Info: Pointer of Struct LSLAPI_SERIALINFO" Name="GetInfo"/>
	FUNCTION VIRTUAL GLOBAL GetInfo
		VAR_INPUT
			Info 	: ^LSLAPI_SERIALINFO;			//! <Variable Comment="initialized : USINT; comportnum : USINT; IRQNum : USINT; IOPort : UINT; Baudrate : UINT; Ptr_RecvBuffer : pVoid; Ptr_SendBuffer : pVoid;" Name="GetInfo.Info"/>
		END_VAR
		VAR_OUTPUT
			ErrorCode 	: DINT;
		END_VAR;
				//! <Function Comment="Function specifies a new Receive Buffer of a recommended Size, in Bytes of the Driver&apos;s internal Receive Buffer, &#13;&#10;minimumsize 128 Byte, if no receivingbuffer is initialized, a Defaultbuffer (255 Byte) will be used&#13;&#10;" Name="SetBufferRecv"/>
	FUNCTION VIRTUAL GLOBAL SetBufferRecv
		VAR_INPUT
			RecvBuffer 	: pVoid;			//! <Variable Comment="Pointer des Empfangsbuffers " Name="SetBufferRecv.RecvBuffer"/>
			BufferLength 	: UDINT;			//! <Variable Comment="Größe des Buffers (min. 128 byte)" Name="SetBufferRecv.BufferLength"/>
		END_VAR
		VAR_OUTPUT
			ErrorCode 	: DINT;
		END_VAR;
				//! <Function Comment="clears the Receiving Buffer&#13;&#10;" Name="ClearRecvBuffer"/>
	FUNCTION VIRTUAL GLOBAL ClearRecvBuffer
		VAR_OUTPUT
			ErrorCode 	: DINT;
		END_VAR;
				//! <Function Comment="Functin set&apos;s or clear&apos;s RTS on the Com&#13;&#10;RTS = PIN 2&#13;&#10;" Name="RtsOnOff"/>
	FUNCTION VIRTUAL GLOBAL RtsOnOff
		VAR_INPUT
			state 	: BOOL;			//! <Variable Comment="0=low, 1=high (normally)" Name="RtsOnOff.state"/>
		END_VAR
		VAR_OUTPUT
			ErrorCode 	: DINT;
		END_VAR;
				//! <Function Comment="Functin read&apos;s RTS on the Com&#13;&#10;RTS = PIN 2&#13;&#10;" Name="rdRts"/>
	FUNCTION VIRTUAL GLOBAL rdRts
		VAR_OUTPUT
			state 	: BOOL;			//! <Variable Comment="0=LOW, 1=HIGH" Name="rdRts.state"/>
		END_VAR;
				//! <Function Comment="Functin read&apos;s CTS on the Com&#13;&#10;CTS = PIN 4" Name="rdCts"/>
	FUNCTION VIRTUAL GLOBAL rdCts
		VAR_OUTPUT
			state 	: BOOL;			//! <Variable Comment="0=LOW, 1=HIGH" Name="rdCts.state"/>
		END_VAR;
				//! <Function Comment="Functin set&apos;s or clear&apos;s DTR on the Com&#13;&#10;RTS = PIN 5&#13;&#10;" Name="DtrOnOff"/>
	FUNCTION VIRTUAL GLOBAL DtrOnOff
		VAR_INPUT
			state 	: BOOL;
		END_VAR
		VAR_OUTPUT
			ErrorCode 	: DINT;
		END_VAR;
				//! <Function Comment="Functin read&apos;s DTR on the Com&#13;&#10;CTS = PIN 5" Name="rdDtr"/>
	FUNCTION VIRTUAL GLOBAL rdDtr
		VAR_OUTPUT
			state 	: BOOL;
		END_VAR;
				//! <Function Comment="For RS232 = 232 | RS485 = 485 | RS422 = 422" Name="SetRSMode"/>
	FUNCTION VIRTUAL GLOBAL SetRSMode
		VAR_INPUT
			Mode 	: UDINT;			//! <Variable Comment="For RS232 = 232 | RS485 = 485 | RS422 = 422" Name="SetRSMode.Mode"/>
		END_VAR
		VAR_OUTPUT
			ErrorCode 	: DINT;
		END_VAR;
				//! <Function Comment="For RS232 = 232 | RS485 = 485 | RS422 = 422" Name="GetRSMode"/>
	FUNCTION VIRTUAL GLOBAL GetRSMode
		VAR_OUTPUT
			Mode 	: DINT;			//! <Variable Comment="232 = RS232&#13;&#10;422 = RS422&#13;&#10;" Name="GetRSMode.Mode"/>
		END_VAR;
				//! <Function Comment="Overwrite this method if you need a user defined interface!" Name="GetInterfaceType"/>
	FUNCTION VIRTUAL GLOBAL GetInterfaceType
		VAR_OUTPUT
			Retcode 	: DINT;			//! <Variable Comment="Contains the interface type.&#13;&#10;0..(default) the interface is the standard &#13;&#10;&lt;&gt;0..user defined" Name="GetInterfaceType.Retcode"/>
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

#pragma usingLtd CSI022_Base


//}}LSL_DECLARATION


FUNCTION GLOBAL TAB _SerLibCSI::@CT_
0$UINT,
2#0100000000000000$UINT, //TY__SERLIBCSI
2$UINT, 11$UINT, (SIZEOF(::_SerLibCSI))$UINT, 
0$UINT, 7$UINT, 0$UINT, 
TO_UDINT(3310573748), "_SerLibCSI", //Class
TO_UDINT(4078275645), "_SerLib", 1$UINT, 34$UINT, //Baseclass
//Servers:
//Clients:
(::_SerLibCSI.ToCSI022_Base.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(1974276462), "ToCSI022_Base", TO_UDINT(2593821542), "CSI022_Base", 2$UINT, 46$UINT, 
(::_SerLibCSI.Com_Baudrate.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(268344816), "Com_Baudrate", 
(::_SerLibCSI.Com_WordLength.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(2398583854), "Com_WordLength", 
(::_SerLibCSI.Com_Parity.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(1260072713), "Com_Parity", 
(::_SerLibCSI.Com_StopBit.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(1114167019), "Com_StopBit", 
(::_SerLibCSI.Com_FifoControl.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(3785571689), "Com_FifoControl", 
(::_SerLibCSI.Com_RSMode.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(1321680773), "Com_RSMode", 
END_FUNCTION


#define USER_CNT__SerLibCSI 29

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT__SerLibCSI] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION _SerLibCSI::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
		nCmdSize	: UINT;
	END_VAR

	ret_code	:= _SerLib::@STD();
	IF ret_code <> C_OK THEN
		RETURN;
	END_IF;
	nCmdSize		:= _SerLib::Command.pMeth^.nCmds$UINT*SIZEOF(pVoid) + CMDMETH.Init;

	_memcpy((#vmt.CmdTable)$^USINT, _SerLib::Command.pMeth, nCmdSize);
	vmt.CmdTable.nCmds		:= nSTDCMD + USER_CNT__SerLibCSI;
	vmt.CmdTable.Init		:= #Init();
#pragma warning (disable : 74)
	vmt.UserFcts[0]		:= #StartUser();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[1]		:= #StopUser();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[2]		:= #SerSend();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[3]		:= #SerClose();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[4]		:= #SetOnline();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[5]		:= #RecvBlock();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[6]		:= #RecvChar();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[7]		:= #GetRecvState();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[8]		:= #GetSendState();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[9]		:= #GetError();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[10]		:= #IsInitialized();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[11]		:= #GetInfo();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[12]		:= #SetBufferRecv();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[13]		:= #ClearRecvBuffer();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[14]		:= #RtsOnOff();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[15]		:= #rdRts();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[16]		:= #rdCts();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[17]		:= #DtrOnOff();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[18]		:= #rdDtr();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[22]		:= #SetRSMode();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[23]		:= #GetRSMode();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[28]		:= #GetInterfaceType();

#pragma warning (default : 74)
	_SerLib::Command.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF _SerLib::Command.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION
FUNCTION VIRTUAL GLOBAL _SerLibCSI::GetError
VAR_OUTPUT
	ErrorCode		: DINT;
END_VAR

	ErrorCode :=  ToCSI022_Base.GetLastError(com$USINT);

END_FUNCTION


FUNCTION VIRTUAL GLOBAL _SerLibCSI::IsInitialized
VAR_OUTPUT
	Initialization	: UDINT;
END_VAR	

	Initialization := (ToCSI022_Base.IsInitialized(Com))$UDINT;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL _SerLibCSI::GetInfo
VAR_INPUT
	Info		: ^LSLAPI_SERIALINFO;
END_VAR
VAR_OUTPUT
	ErrorCode	: DINT;
END_VAR

	ErrorCode := ToCSI022_Base.GetInfo(com$USINT, Info);

END_FUNCTION


FUNCTION VIRTUAL GLOBAL _SerLibCSI::SetBufferRecv
VAR_INPUT
	RecvBuffer		: pVoid;
	BufferLength	: UDINT;
END_VAR
VAR_OUTPUT
	ErrorCode		: DINT;
END_VAR

	ErrorCode := ToCSI022_Base.SetRcvBuffer(Com$USINT,RecvBuffer, BufferLength);

END_FUNCTION


FUNCTION VIRTUAL GLOBAL _SerLibCSI::SerSend
VAR_INPUT
	Buffer			:pVoid;
	bufferlength: UDINT;
	wrlen				:^UDINT;
END_VAR										
VAR_OUTPUT
	ErrorCode	: DINT;	
END_VAR

	ErrorCode := ToCSI022_Base.Ser_Send(com$USINT, Buffer, Bufferlength, WrLen);;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL _SerLibCSI::RecvChar
VAR_INPUT
	Buffer		: pVoid;
END_VAR
VAR_OUTPUT
	ErrorCode		: DINT;
END_VAR

	ErrorCode := ToCSI022_Base.RecvChar(com$USINT, buffer);

END_FUNCTION


FUNCTION VIRTUAL GLOBAL _SerLibCSI::RecvBlock			
VAR_INPUT
	Buffer		:pVoid;
	rdlength	: UDINT;
	rdlen		:^UDINT; 
END_VAR
VAR_OUTPUT
	ErrorCode	: DINT;			
END_VAR

	ErrorCode := ToCSI022_Base.RecvBlock(com$USINT, Buffer, rdlength, rdlen);

END_FUNCTION


FUNCTION VIRTUAL GLOBAL _SerLibCSI::GetSendState
VAR_OUTPUT
	to_send		: UDINT;
END_VAR
	
	to_send := 	ToCSI022_Base.GetSendStatus(com$USINT);

END_FUNCTION


FUNCTION VIRTUAL GLOBAL _SerLibCSI::GetRecvState
VAR_OUTPUT
	length		: UDINT;
END_VAR
	
	length := ToCSI022_Base.GetRecvStatus(com$USINT);

END_FUNCTION


FUNCTION VIRTUAL GLOBAL _SerLibCSI::ClearRecvBuffer
VAR_OUTPUT
	ErrorCode		: DINT;
END_VAR

	ErrorCode := ToCSI022_Base.ClearRecvBuffer(com$USINT);

END_FUNCTION


FUNCTION VIRTUAL GLOBAL _SerLibCSI::Serclose

	StopUser(); 

END_FUNCTION


FUNCTION VIRTUAL GLOBAL _SerLibCSI::RtsOnOff
VAR_INPUT
	state		: BOOL;
END_VAR
VAR_Output
	ErrorCode	: DINT;
END_VAR

	ErrorCode := 	ToCSI022_Base.RtsOnOff(com$USINT, state);

END_FUNCTION


FUNCTION VIRTUAL GLOBAL _SerLibCSI::rdRts
VAR_OUTPUT
	state		: BOOL;
END_VAR

	state := ToCSI022_Base.rdRts(com$USINT);

END_FUNCTION


FUNCTION VIRTUAL GLOBAL _SerLibCSI::rdCts
VAR_OUTPUT
	state		: BOOL;
END_VAR

	state := ToCSI022_Base.rdCts(com$USINT);

END_FUNCTION


FUNCTION VIRTUAL GLOBAL _SerLibCSI::StartUser
VAR_INPUT
	Baud      : DINT;
	wordl     : DINT;
	Parity    : DINT;
	StopB     : DINT;
	FifoOnOff : DINT;
END_VAR
VAR_OUTPUT
	ErrorCode	: DINT;
END_VAR

  // according to hw documentation, TTY only works up to 5kbaud
  if ((Com_RSMode = 3) & (Baud > 4)) 
  // according to hw documentation, IBIS only works up to 2400 baud //BLEERN 02 16.12.09
     | ((Com_RSMode = 4) & (Baud > 3)) //BLEERN 02 16.12.09
  then 
    Baud := -1;
  end_if;

	ErrorCode := ToCSI022_Base.StartUser(com$USINT, Baud, wordl, Parity, StopB, FifoOnOff);

  //write values to clients
  Com_Baudrate    := Baud;
  Com_WordLength  := wordl;
  Com_Parity      := Parity;
  Com_StopBit     := StopB;
  Com_FifoControl := FifoOnOff;


END_FUNCTION

#pragma warning(disable:73)
FUNCTION VIRTUAL GLOBAL _SerLibCSI::SetOnline
VAR_INPUT
	state			: UDINT;
END_VAR
VAR_OUTPUT
	ErrorCode	:  DINT;
END_VAR

	ErrorCode := -13;
#pragma warning(default:73)

END_FUNCTION


FUNCTION VIRTUAL GLOBAL _SerLibCSI::StopUser
VAR_OUTPUT
	ErrorCode	: DINT;
END_VAR

  if ToCSI022_Base.IsInitialized(Com := Com) then
    ToCSI022_Base.CloseCom(Com := Com);
    ErrorCode := 0;
  else
    ErrorCode := SERERROR_NOHANDLE;
  end_if;

END_FUNCTION 


FUNCTION VIRTUAL GLOBAL _SerLibCSI::DtrOnOff
VAR_INPUT
	state		: BOOL;
END_VAR
VAR_OUTPUT
	ErrorCode	: DINT;
END_VAR

	ToCSI022_Base.DtrOnOff(com$USINT, state);
	ErrorCode := 0;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL _SerLibCSI::rdDtr
VAR_OUTPUT
	state		: BOOL;
END_VAR

	state := ToCSI022_Base.rdDtr(com$USINT);

END_FUNCTION


FUNCTION VIRTUAL GLOBAL _SerLibCSI::SetRSMode
VAR_INPUT
	Mode		: UDINT;
END_VAR
VAR_OUTPUT
	ErrorCode		: DINT;
END_VAR


  //If we are in TTY-Mode or IBIS-Mode we cannot set RSMode! //BLEERN 01 16.12.09
  IF Com_RSMode = 3 | Com_RSMode = 4 THEN//BLEERN 01 16.12.09
    ErrorCode := SERERROR_NOTAVAIL;//BLEERN 01 16.12.09
  ELSE//BLEERN 01 16.12.09
    ErrorCode := ToCSI022_Base.SetMode(com$USINT, mode$DINT);
    Com_RSMode := Mode;
  END_IF;//BLEERN 01 16.12.09

END_FUNCTION

FUNCTION VIRTUAL GLOBAL _SerLibCSI::Init
VAR
	ErrorCode : DINT;
END_VAR

  Errorcode := 1;

  if _firstscan then
  
    //get client values
    Com_Baudrate    := Com_Baudrate.Read();
    Com_WordLength  := Com_WordLength.Read();
    Com_Parity      := Com_Parity.Read();
    Com_StopBit     := Com_StopBit.Read();
    Com_FifoControl := Com_FifoControl.Read();
    Com_RSMode      := Com_RSMode.Read();

    if Com_Baudrate >= 0 & Com_Baudrate <= 10 then
      if Com_WordLength >= 5 & Com_WordLength <= 8 then
        if Com_Parity >= 0 & Com_Parity <= 4 then
          if Com_StopBit = 1 | Com_StopBit = 2 then
            if Com_FifoControl = 0 | Com_FifoControl = 1 then
              
              case Com_RSMode of
                0: 
                  ErrorCode := StartUser( Baud      := Com_Baudrate, 
                                          wordl     := Com_WordLength, 
                                          Parity    := Com_Parity, 
                                          StopB     := Com_StopBit, 
                                          FifoOnOff := Com_FifoControl);
         
                  if ErrorCode = 0 then
                    ErrorCode -= SetRSMode(Mode := 232);
                  end_if;
                  
                1: 
                  ErrorCode := StartUser( Baud      := Com_Baudrate, 
                                          wordl     := Com_WordLength, 
                                          Parity    := Com_Parity, 
                                          StopB     := Com_StopBit, 
                                          FifoOnOff := Com_FifoControl);
         
                  if ErrorCode = 0 then
                    ErrorCode -= SetRSMode(Mode := 422);
                  end_if;
                  
                2: 
                  ErrorCode := StartUser( Baud      := Com_Baudrate, 
                                          wordl     := Com_WordLength, 
                                          Parity    := Com_Parity, 
                                          StopB     := Com_StopBit, 
                                          FifoOnOff := Com_FifoControl);
         
                  if ErrorCode = 0 then
                    ErrorCode -= SetRSMode(Mode := 485);
                  end_if;
                
                3, 4: // TTY, IBIS
                  
                  // according to hw documentation, TTY only works up to 5kbaud //BLEERN 04 17.12.09
                  //if Com_Baudrate <= 4 then//BLEERN 04 17.12.09
                    ErrorCode := StartUser( Baud      := Com_Baudrate, 
                                            wordl     := Com_WordLength, 
                                            Parity    := Com_Parity, 
                                            StopB     := Com_StopBit, 
                                            FifoOnOff := Com_FifoControl);
                  //end_if;//BLEERN 04 17.12.09
                  
              end_case;      
              
            end_if;
          end_if;
        end_if;
      end_if; 
    end_if;
  
    if ErrorCode <> 0 then
      Com_Baudrate    := -1;
      Com_WordLength  := -1;
      Com_Parity      := -1;
      Com_StopBit     := -1;
      Com_FifoControl := -1;
    end_if;
    
  end_if;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL _SerLibCSI::GetInterfaceType
	VAR_OUTPUT
		Retcode 	: DINT;
	END_VAR

  // bit 0: 0 = OS; 1 = HW-Class
  // bit 1: 1 = Modbus-RTU
  // bit 2: 0 = echo off possible; 1 = echo can not turned off
  Retcode := 2#101;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL _SerLibCSI::GetRSMode
	VAR_OUTPUT
		Mode 	: DINT;
	END_VAR

  Mode := Com_RSMode$DINT;
  
END_FUNCTION
