//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)

//{{LSL_DEFINES
#define DEVICE_ID_VI022 1233
//}}LSL_DEFINES

//{{LSL_DECLARATION

(*!
<Class
	Name               = "VI021"
	Revision           = "1.93"
	GUID               = "{63AA481B-589D-4AF6-BD49-8D07DD14E91F}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "true"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	IconPath           = ".\Class\s-dias.ico"
	SharedCommandTable = "true"
	Objectsize         = "(554,120)"
	Comment            = "class for VI021 hardware module (SDIAS Power Supply and connection interface to VARAN)">
	<Channels>
		<Server Name="FirmwareVersion" GUID="{FAF6143D-5B39-429B-B146-3B5340256DA9}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Server shows the actual FW Version of the Module in the format xx.yy&#13;&#10;&#13;&#10;e.g. 16#0130 means v01.30"/>
		<Server Name="IsoRdTaskDuration" GUID="{28B4D23D-7BC2-4271-9E26-EAFF7C4916A1}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="time measurement of last iso read task at SDIAS in [탎]"/>
		<Server Name="IsoRdTaskMaxDuration" GUID="{418D8699-A5A5-4DA7-9EC6-B80D98712F41}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="maximal time measurement of iso read task at SDIAS in [탎]"/>
		<Server Name="IsoWrTaskDuration" GUID="{8CC2E7F5-1175-44F2-AECE-DD2E19D4D0A8}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="time measurement of last iso write task at SDIAS in [탎]"/>
		<Server Name="IsoWrTaskMaxDuration" GUID="{B8501506-960C-479E-9CB3-B7696E346462}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="maximal time measurement of iso write task at SDIAS in [탎]"/>
		<Server Name="ManagerOptionBits" GUID="{C62FA2D2-22AD-4879-B5E0-46958DC5F276}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Option Bits:&#13;&#10;Bit 1: Interrupts supported&#13;&#10;Bit 2: Half duplex (SDIAS S2), bus scan required&#13;&#10;Bit 3: Far Memory access supported&#13;&#10;Bit 4: Status wait supported (to differ TimeSliceError and TimeSliceErrorIRQ)&#13;&#10;Bit 5: Execution time selection supported 1&#13;&#10;Bit 6: Task interruption detection supported&#13;&#10;Bit 7: Execution time selection supported 2&#13;&#10;"/>
		<Server Name="ManagerProtocolVersion" GUID="{46972AE0-A58A-41DC-BBD3-7581A51436DA}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false" Comment="Server shows the SDIAS Manager Protocol Version of the Module in the format xx.y.z&#13;&#10;e.g. 16#0130 means v01.3.0"/>
		<Server Name="SdiasOut_1" GUID="{35802848-E320-4328-8E35-9321F964E7E8}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Connect a SDIAS Client Class"/>
		<Server Name="SdiasRetryCounter" GUID="{3DD55758-40BE-4B2D-A0BF-F35940CB0D29}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Actual Number of Retries on SDIAS-Bus."/>
		<Server Name="SdiasState" GUID="{73D702EB-4832-4592-9D8E-011779142609}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Shows the state of the SDIAS Manager."/>
		<Server Name="VaranOut_1" GUID="{49FCA411-9414-4F70-9323-7AA42A533B03}" Class="Hub_Base" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Connect a Varan Client Class"/>
		<Client Name="Hub_Base1" Required="true" Internal="true"/>
		<Client Name="SdiasHubBase" Required="true" Internal="true"/>
		<Client Name="SdiasManager" Required="true" Internal="true"/>
	</Channels>
	<RevDoku>
		<Owner Company="Sigmatek" Author="RamAnd"/>
		<Dokumentation Revision="1.93" Date="06.02.2020" Author="PieSte" Company="Sigmatek" Description="(SA 54165) Since v1.82 the new asynchronous access at initialisation is not unlocked. Due to this the SDO&apos;s at AddAccess() methode failed for modules behind varan (DC06x, SR01x, ..) with VI02x fpga version &gt; 1.6 &amp; &lt; 2.0. Due to this the &quot;Execution Time Selection Supported&quot; Flag at the ManagerOptionBits has moved to Bit 7."/>
		<Dokumentation Revision="1.92" Date="09.12.2019" Author="LanSte" Company="Sigmatek" Description="Added Server ProtocolVersion. InterframeGap is included in the resource calculation.&#13;&#10;Suppressed redundant warning in combination with _BUS_IF_GET_DEACTIVATED_STATE."/>
		<Dokumentation Revision="1.91" Date="12.08.2019" Author="LazJos" Company="Sigmatek" Description="Added support for HWAlarms."/>
		<Dokumentation Revision="1.90" Date="14.11.2018" Author="PieSte" Company="Sigmatek" Description="Add retry timeout calculation for the TaskInfoDO at SdiasManager. Now, when the module is reconnected, the retry timeout is also recalculated (TaskInfoDO, IsoReadDO, IsoWriteDO)."/>
		<Dokumentation Revision="1.89" Date="08.06.2018" Author="RamAnd" Company="Sigmatek" Description="LASAL Hardware Description (.lhd) file has been updated.&#13;&#10;Corrected logging function which could have led to an incorrect log message because of an uninitialized string."/>
		<Dokumentation Revision="1.88" Date="27.04.2018" Author="PieSte" Company="Sigmatek" Description="The behavior of Local SDIAS and SDIAS behind Varan was adjusted in the initialization phase. For local SDIAS the bus cycle time is passed to the SDIAS clients before the method AddAccesses() and for SDIAS after VARAN after the method. Now the bus cycle time is available in both variants in the method AddAccesses()."/>
		<Dokumentation Revision="1.87" Date="06.04.2018" Author="LanSte" Company="Sigmatek" Description="Added Server ManagerProtocolVersion"/>
		<Dokumentation Revision="1.86" Date="13.03.2018" Author="LanSte" Company="Sigmatek" Description="Added Broadcast commands with HWTimestamp + ISO Startpoint."/>
		<Dokumentation Revision="1.85" Date="23.01.2018" Author="RamAnd" Company="Sigmatek" Description="Log messages have been standardized for easier maintenance, easier use in any class and to allow spam filtering. Code for the logging functions is now only located in HwControl."/>
		<Dokumentation Revision="1.84" Date="19.12.2017" Author="EisMic" Company="Sigmatek" Description="Since v1.86 the SDIAS Bus of the CP212 wasn&apos;t working anymore. (SyncOut ID was not found)"/>
		<Dokumentation Revision="1.83" Date="12.12.2017" Author="PieSte&#13;&#10;EisMic" Company="Sigmatek" Description="Added support for far memory access at SdiasManager. &#13;&#10;Added support for IPC321 (improved search of SyncOut-ID for Sdiasmanager)"/>
		<Dokumentation Revision="1.82" Date="20.04.2017" Author="PieSte&#13;&#10;EisMic" Company="Sigmatek" Description="Added sdias time calculation at hardware description file.&#13;&#10;Added manager options bit and steps in initialisation for execution time selection.&#13;&#10;TimeSliceErrorIRQ is now supported if feature is available in FPGA."/>
		<Dokumentation Revision="1.81" Date="06.02.2017" Author="PieSte&#13;&#10;ZoePat" Company="Sigmatek" Description="Changed &quot;Online&quot; server behavior to set online first if cyclic data is valid due to SA35740.&#13;&#10;SdiasModules can now request to increase the PostInit timeout."/>
		<Dokumentation Revision="1.80" Date="10.01.2017" Author="PieSte" Company="Sigmatek" Description="Corrected handover value for length at &quot;ChangeDOLengthOffset()&quot; methode in &quot;UpdateDO()&quot; methode call of payload path, at internal BusInterfaceVARAN class. Only changed read/write objects with payload activated are concerned by this."/>
		<Dokumentation Revision="1.79" Date="14.11.2016" Author="EisMic" Company="Sigmatek" Description="Removed check for TimeSliceErrorIRQ if write task is interrupted by read task. The check could have led to a SDIAS-Error if SDIAS Safety modules were used or only a small amount of SDIAS modules were used."/>
		<Dokumentation Revision="1.78" Date="11.10.2016" Author="EisMic" Company="Sigmatek" Description="Added support that modules can access the Default-Access-Info in the AddAccesses Method."/>
		<Dokumentation Revision="1.77" Date="08.09.2016" Author="ZoePat" Company="Sigmatek" Description="TimeSliceError and TimeSliceErrorIRQ are now differentiated."/>
		<Dokumentation Revision="1.76" Date="12.07.2016" Author="SeiChr" Company="Sigmatek" Description="Added Values for the total Current calculation. SA 31571"/>
		<Dokumentation Revision="1.75" Date="10.05.2016" Author="RamAnd" Company="Sigmatek" Description="Suppressed warning that would occur with target ARM on compiler version 30 or higher."/>
		<Dokumentation Revision="1.74" Date="22.04.2016" Author="ZoePat" Company="Sigmatek" Description="Since V1.68 the RT-Postscan of the modules was called 1 rt-cycle to early. This led to a SDIAS-Error if a ICA011/111 was used on a Simple-Master CPU (e.g.: CP101/102)."/>
		<Dokumentation Revision="1.73" Date="17.02.2016" Author="EisMic" Company="Sigmatek" Description="Prescalersettings were not set correctly when Payload is active."/>
		<Dokumentation Revision="1.72" Date="17.02.2016" Author="RamAnd" Company="Sigmatek" Description="Calculation of pointers for move DOs and access info has been corrected. If the original pointer is NIL now the resulting pointer also is NIL."/>
		<Dokumentation Revision="1.71" Date="29.01.2016" Author="EisMic" Company="Sigmatek" Description="Added servers for maximal IsoRd/IsoWrTaskDuration."/>
		<Dokumentation Revision="1.70" Date="26.01.2016" Author="EisMic" Company="Sigmatek" Description="Corrected handling of transparent client in internal class BusInterfaceVaran to prevent a possible access exception."/>
		<Dokumentation Revision="1.69" Date="22.01.2016" Author="PieSte" Company="Sigmatek" Description="Add support for read/write userflash commando at sdiasmanager.h file."/>
		<Dokumentation Revision="1.68" Date="10.12.2015" Author="EisMic" Company="Sigmatek" Description="It is now ensured that the SDIAS-hardwareclasses displays valid server values after Plug&amp;Play, if the classstate is _ClassOk."/>
		<Dokumentation Revision="1.67" Date="27.08.2015" Author="EisMic" Company="Sigmatek" Description="Corrected handling of valid DeviceIds due to a timeout when a wrong module was connected."/>
		<Dokumentation Revision="1.66" Date="26.05.2015" Author="EisMic" Company="Sigmatek" Description="Corrected step CMD_GET_HARDWARE_TREE_ENTRY in NewInst due to problems with the Typelabel SCL."/>
		<Dokumentation Revision="1.65" Date="11.05.2015" Author="RamAnd" Company="Sigmatek" Description="Corrected initialisation: It could have happened that a partial read list has been executed during startup, which could cause problems on SDIAS modules with FIFO-Buffers."/>
		<Dokumentation Revision="1.64" Date="13.04.2015" Author="RamAnd" Company="Sigmatek" Description="Added support for Edge2 cpu."/>
		<Dokumentation Revision="1.63" Date="16.04.2015" Author="PieSte&#13;&#10;LanSte" Company="Sigmatek" Description="Added support for visualisation in graphical hardware editor.&#13;&#10;Added support for calculating resources for graphical hardware editor."/>
		<Dokumentation Revision="1.62" Date="17.03.2015" Author="RamAnd" Company="Sigmatek" Description="Added HW Version for sdias clients."/>
		<Dokumentation Revision="1.61" Date="15.04.2015" Author="EisMic" Company="Sigmatek" Description="Added support for VaranMux."/>
		<Dokumentation Revision="1.60" Date="24.03.2015" Author="EisMic" Company="Sigmatek" Description="Check pointer p_NodeInfo for validity in method GetRetryTimeout due to access exception error if method Varan_HWDisconnect is called and no hardware was available."/>
		<Dokumentation Revision="1.59" Date="10.02.2015" Author="PieSte" Company="Sigmatek" Description="Avoid error on local sdias if there is no or wrong hardware at module initialization."/>
		<Dokumentation Revision="1.58" Date="24.01.2015" Author="RamAnd" Company="Sigmatek" Description="Increased the size of the SDO buffer from 30 to 64 (1 SDO for every module).&#13;&#10;Added a timeout for the firmware handshake.&#13;&#10;After getting the firmware handshake the read task is triggered every 40ms to prevent a timeout in the firmware (3 seconds) during initialisation.&#13;&#10;If there are errors on single modules which are not required, other modules now work properly.&#13;&#10;The cyclic-method of SDIAS objects is now only called if the correct module hardware is available.&#13;&#10;The class waits now in the initialisation until the OS has enumerated the SDIAS modules (e.g. needed for communication with safety modules)."/>
		<Dokumentation Revision="1.57" Date="09.12.2014" Author="RamAnd" Company="Sigmatek" Description="It has been possible that a SDIAS error has been triggered caused by issues which were corrected by the following retries."/>
		<Dokumentation Revision="1.56" Date="06.11.2014" Author="LanSte" Company="Sigmatek" Description="Added support for reading the ManagerInfoblock when the Classstate is _ModuleFoundButManagerIsOff."/>
		<Dokumentation Revision="1.55" Date="13.11.2014" Author="RamAnd" Company="Sigmatek" Description="Refresh Retrycounters before crashing with a required or SDIAS error.&#13;&#10;Removed call in interrupt method to save time and stack size."/>
		<Dokumentation Revision="1.54" Date="13.10.2014" Author="RamAnd" Company="Sigmatek" Description="If an error occurs and the project should not crash with SDIAS error, the bus is turned off now."/>
		<Dokumentation Revision="1.53" Date="30.09.2014" Author="EisMic" Company="Sigmatek" Description="Added Support for VI022."/>
		<Dokumentation Revision="1.52" Date="30.09.2014" Author="RamAnd" Company="Sigmatek" Description="Added possibility to create a SDIAS control access.&#13;&#10;Improved startup and error handling."/>
		<Dokumentation Revision="1.51" Date="09.07.2014" Author="EisMic" Company="Sigmatek" Description="Added support for reading hardware diagnosis and hardwaretree entry."/>
		<Dokumentation Revision="1.50" Date="21.07.2014" Author="RamAnd" Company="Sigmatek" Description="Corrected handling of SDO channel usage, because a problem could have lead to a timeout in the SDO communication."/>
		<Dokumentation Revision="1.49" Date="24.06.2014" Author="PieSte" Company="Sigmatek" Description="Add request of UserAction Client in BusInterfaceVARAN to avoid crash if it returns zero."/>
		<Dokumentation Revision="1.48" Date="17.06.2014" Author="RamAnd" Company="Sigmatek" Description="The class no longer crashes if there are no required modules connected or no modules projected."/>
		<Dokumentation Revision="1.47" Date="07.05.2014" Author="LanSte" Company="Sigmatek" Description="Improved Transparent property description in HW-Tree and activated greying out of the object in the HW-Tree.&#13;&#10;Minimized the interface request via CILGET by useing private pointers to reduce time in init."/>
		<Dokumentation Revision="1.46" Date="28.04.2014" Author="ZoePat" Company="Sigmatek" Description="Added support for CP112 (Before a SDIAS error occured at startup)."/>
		<Dokumentation Revision="1.45" Date="24.04.2014" Author="RamAnd" Company="Sigmatek" Description="SDIAS Errors now only occur if the SDIAS manager (or any connected module) is required."/>
		<Dokumentation Revision="1.44" Date="14.04.2014" Author="RamAnd" Company="Sigmatek" Description="If the module is connected during runtime, the ISO DOs are now created in realtime instead of cyclic task priority."/>
		<Dokumentation Revision="1.43" Date="14.04.2014" Author="RamAnd" Company="Sigmatek" Description="Added new interface which waits until the OS is ready for the SDIAS requests to safety components."/>
		<Dokumentation Revision="1.42" Date="10.04.2014" Author="RamAnd" Company="Sigmatek" Description="Added dynamic read and write access, which can change it&apos;s size and offset during runtime."/>
		<Dokumentation Revision="1.41" Date="07.04.2014" Author="RamAnd" Company="Sigmatek" Description="Init start time wasn&apos;t set correctly for the timeout detection during initialization."/>
		<Dokumentation Revision="1.40" Date="22.01.2014" Author="RamAnd&#13;&#10;RamAnd" Company="Sigmatek" Description="Initialisation of VaranManager and SdiasManager has been reworked for cases where multiple Safety cpus are connected via VI021.&#13;&#10;Added parameter for Post Init login to define if DOs via VARAN are necessary."/>
		<Dokumentation Revision="1.30" Date="04.12.2013" Author="ZoePat" Company="Sigmatek" Description="Updated .lhd-file to show more information in the HW-Editor."/>
		<Dokumentation Revision="1.20" Date="30.08.2013" Author="LoeHan" Company="Sigmatek" Description="Added dynamic DO creation."/>
		<Dokumentation Revision="1.10" Date="01.08.2013" Author="ObeChr&#13;&#10;RamAnd" Company="Sigmatek" Description="Added Comments for Clients / Server / Methods&#13;&#10;In the first realtime cycles the classes showed _ClassOk, but there was no actual IO information. Now the ClassState of SDIAS Clients is stored temporary during init and shown at the server after init."/>
		<Dokumentation Revision="1.0" Date="18.07.2013" Author="RamAnd" Company="Sigmatek" Description="First library version"/>
	</RevDoku>
	<Network Name="VI021">
		<!-- List of Components in this network -->
		<Components>
			<Object
				Name       = "_base"
				GUID       = "{FA524782-F27C-4655-A025-FB8E3E3BA04C}"
				Class      = "BusInterfaceVARAN"
				Position   = "(218,120)"
				Visualized = "true">
				<Channels>
					<Server Name="CallCommand"/>
					<Server Name="ConnectCounter"/>
					<Server Name="DeviceAddress"/>
					<Server Name="DeviceID"/>
					<Server Name="DiagControl"/>
					<Server Name="FaultCounter"/>
					<Server Name="Online"/>
					<Server Name="ProtocolVersion"/>
					<Server Name="Release"/>
					<Server Name="RetryCounter"/>
					<Server Name="RXLost"/>
					<Server Name="SerialNo"/>
					<Server Name="State"/>
					<Server Name="TXLost"/>
					<Server Name="ValidateSerNo"/>
					<Server Name="VendorID"/>
					<Client Name="Required" Value="1"/>
					<Client Name="SerNoValidation"/>
					<Client Name="ToOSKernel"/>
					<Client Name="Transparent" Value="0"/>
					<Client Name="UserAction"/>
					<Client Name="VaranIn"/>
				</Channels>
			</Object>
			<Object
				Name       = "Hub_Base1"
				GUID       = "{A23A5171-D8BC-41D0-AE65-75CDE46C7654}"
				Class      = "Hub_Base"
				Position   = "(1950,1620)"
				Visualized = "true">
				<Channels>
					<Server Name="Control"/>
					<Client Name="Splitter_Place" Value="0"/>
					<Client Name="VaranIn"/>
				</Channels>
			</Object>
			<Object
				Name       = "SdiasHubBase"
				GUID       = "{A474867B-97C8-4F38-A9AF-3DD678A863FA}"
				Class      = "SdiasHubBase"
				Position   = "(1950,1410)"
				Visualized = "false">
				<Channels>
					<Server Name="ClassSvr"/>
					<Client Name="SplitterPlace" Value="0"/>
					<Client Name="ToNextSDIAS"/>
				</Channels>
			</Object>
			<Object
				Name       = "SdiasManager"
				GUID       = "{97FD8C10-163B-461C-B036-815EE5B0F159}"
				Class      = "SdiasManager"
				Position   = "(1170,750)"
				Visualized = "false">
				<Channels>
					<Server Name="ClassState"/>
					<Server Name="FirmwareVersion"/>
					<Server Name="IsoRdTaskDuration"/>
					<Server Name="IsoRdTaskMaxDuration"/>
					<Server Name="IsoTaskErrorCount"/>
					<Server Name="IsoWrTaskDuration"/>
					<Server Name="IsoWrTaskMaxDuration"/>
					<Server Name="ManagerOptionBits"/>
					<Server Name="ManagerProtocolVersion"/>
					<Server Name="RetryCounter"/>
					<Client Name="DeviceID" Value="1187"/>
					<Client Name="ToBusInterface"/>
					<Client Name="ToMultiTask"/>
					<Client Name="ToStdLib"/>
				</Channels>
			</Object>
		</Components>
		<Comments>
		</Comments>
		<!-- List of Connections in this network -->
		<Connections>
			<Connection Source="this.State" Destination="_base.State" Vertices="(2548,210),(718,210),"/>
			<Connection Source="this.Online" Destination="_base.Online" Vertices="(2548,270),(718,270),"/>
			<Connection Source="this.Release" Destination="_base.Release" Vertices="(2548,330),(718,330),"/>
			<Connection Source="this.DeviceAddress" Destination="_base.DeviceAddress" Vertices="(2548,390),(718,390),"/>
			<Connection Source="this.VendorID" Destination="_base.VendorID" Vertices="(2548,450),(718,450),"/>
			<Connection Source="this.DeviceID" Destination="_base.DeviceID" Vertices="(2548,510),(718,510),"/>
			<Connection Source="this.SerialNo" Destination="_base.SerialNo" Vertices="(2548,570),(718,570),"/>
			<Connection Source="this.RetryCounter" Destination="_base.RetryCounter" Vertices="(2548,630),(718,630),"/>
			<Connection Source="this.ValidateSerNo" Destination="_base.ValidateSerNo" Vertices="(2548,690),(718,690),"/>
			<Connection Source="_base.VaranIn" Destination="this.VaranIn" Vertices="(218,210),(38,210),"/>
			<Connection Source="_base.Required" Destination="this.Required" Vertices="(218,270),(38,270),"/>
			<Connection Source="_base.UserAction" Destination="this.UserAction" Vertices="(218,330),(38,330),"/>
			<Connection Source="_base.SerNoValidation" Destination="this.SerNoValidation" Vertices="(218,390),(38,390),"/>
			<Connection Source="_base.Transparent" Destination="this.Transparent" Vertices="(218,450),(38,450),"/>
			<Connection Source="this.SdiasHubBase" Destination="SdiasHubBase.ClassSvr"/>
			<Connection Source="this.SdiasManager" Destination="SdiasManager.ClassState"/>
			<Connection Source="SdiasHubBase.ToNextSDIAS" Destination="SdiasManager.ClassState" Vertices="(1950,1500),(1754,840),"/>
			<Connection Source="this.SdiasOut_1" Destination="SdiasHubBase.ClassSvr" Vertices="(2548,1350),(2376,1500),"/>
			<Connection Source="this.Hub_Base1" Destination="Hub_Base1.Control"/>
			<Connection Source="Hub_Base1.VaranIn" Destination="_base.State" Vertices="(1950,1710),(718,210),"/>
			<Connection Source="this.VaranOut_1" Destination="Hub_Base1.Control" Vertices="(2548,1410),(2376,1710),"/>
			<Connection Source="this.SdiasState" Destination="SdiasManager.ClassState" Vertices="(2548,870),(1754,840),"/>
			<Connection Source="SdiasManager.ToBusInterface" Destination="_base.CallCommand" Vertices="(1170,840),(718,1110),"/>
			<Connection Source="this.SdiasRetryCounter" Destination="SdiasManager.RetryCounter" Vertices="(2548,930),(1754,900),"/>
			<Connection Source="this.FirmwareVersion" Destination="SdiasManager.FirmwareVersion" Vertices="(2548,810),(1754,960),"/>
			<Connection Source="this.IsoWrTaskDuration" Destination="SdiasManager.IsoWrTaskDuration" Vertices="(2548,990),(1754,1020),"/>
			<Connection Source="this.IsoWrTaskMaxDuration" Destination="SdiasManager.IsoWrTaskMaxDuration" Vertices="(2548,1050),(1754,1080),"/>
			<Connection Source="this.IsoRdTaskDuration" Destination="SdiasManager.IsoRdTaskDuration" Vertices="(2548,1110),(1754,1140),"/>
			<Connection Source="this.IsoRdTaskMaxDuration" Destination="SdiasManager.IsoRdTaskMaxDuration" Vertices="(2548,1170),(1754,1200),"/>
			<Connection Source="this.ManagerOptionBits" Destination="SdiasManager.ManagerOptionBits" Vertices="(2548,1230),(1754,1320),"/>
			<Connection Source="this.ManagerProtocolVersion" Destination="SdiasManager.ManagerProtocolVersion" Vertices="(2548,1290),(1754,1380),"/>
			<Connection Source="this.ProtocolVersion" Destination="_base.ProtocolVersion" Vertices="(2548,750),(718,1050),"/>
		</Connections>
		<!-- Headerfiles -->
		<Options>
		</Options>
	</Network>
</Class>
*)
#pragma using BusInterfaceVARAN

VI021 : CLASS
: BusInterfaceVARAN
  //Servers:
	FirmwareVersion 	: SvrCh_HDINT;
	SdiasState 	: SvrCh_t_e_VaranErrors;
	SdiasRetryCounter 	: SvrCh_UDINT;
	IsoWrTaskDuration 	: SvrCh_UDINT;
	IsoWrTaskMaxDuration 	: SvrCh_UDINT;
	IsoRdTaskDuration 	: SvrCh_UDINT;
	IsoRdTaskMaxDuration 	: SvrCh_UDINT;
	ManagerOptionBits 	: SvrCh_DINT;
	ManagerProtocolVersion 	: SvrCh_HDINT;
	SdiasOut_1 	: SvrChCmd_DINT;
	VaranOut_1 	: SvrChCmd_DINT;
  //Clients:
	Hub_Base1 	: CltChCmd_Hub_Base;
	SdiasManager 	: CltChCmd_SdiasManager;
	SdiasHubBase 	: CltChCmd_SdiasHubBase;
  //Variables:
		us_InitCounter 	: USINT;
  //Functions:
				//! <Function Comment="Init for Varan Client" Name="Init"/>
	FUNCTION VIRTUAL GLOBAL Init;
				//! <Function Comment="Check if DeviceID is supported by class" Name="CheckDeviceID"/>
	FUNCTION VIRTUAL GLOBAL CheckDeviceID
		VAR_INPUT
			ID2Check 	: UDINT;			//! <Variable Comment="VARAN DeviceID, which should be checked" Name="CheckDeviceID.ID2Check"/>
		END_VAR
		VAR_OUTPUT
			IsOK 	: BOOL;			//! <Variable Comment="TRUE...DeviceID is ok with this class&#13;&#10;FALSE..DeviceID is not ok with this class" Name="CheckDeviceID.IsOK"/>
		END_VAR;
	
	FUNCTION VIRTUAL GetDeviceID
		VAR_OUTPUT
			output 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GetFWVersion
		VAR_INPUT
			pData 	: ^CHAR;
			length 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL FirmwareVersion::Read
		VAR_OUTPUT
			output (EAX) 	: HDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL SdiasState::Read
		VAR_OUTPUT
			output (EAX) 	: t_e_VaranErrors;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL SdiasRetryCounter::Read
		VAR_OUTPUT
			output (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL SdiasRetryCounter::Write
		VAR_INPUT
			input (EAX) 	: UDINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL IsoWrTaskDuration::Read
		VAR_OUTPUT
			output (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL IsoWrTaskMaxDuration::Read
		VAR_OUTPUT
			output (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL IsoWrTaskMaxDuration::Write
		VAR_INPUT
			input (EAX) 	: UDINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL IsoRdTaskDuration::Read
		VAR_OUTPUT
			output (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL IsoRdTaskMaxDuration::Read
		VAR_OUTPUT
			output (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL IsoRdTaskMaxDuration::Write
		VAR_INPUT
			input (EAX) 	: UDINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL ManagerOptionBits::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL ManagerProtocolVersion::Read
		VAR_OUTPUT
			output (EAX) 	: HDINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

#pragma using Hub_Base
#pragma using SdiasHubBase
#pragma using SdiasManager


//}}LSL_DECLARATION


FUNCTION GLOBAL TAB VI021::@CT_
0$UINT,
2#0100000000000000$UINT, //TY_VI021
1$UINT, 93$UINT, (SIZEOF(::VI021))$UINT, 
11$UINT, 3$UINT, 0$UINT, 
TO_UDINT(262695706), "VI021", //Class
TO_UDINT(24783181), "BusInterfaceVARAN", 1$UINT, 67$UINT, //Baseclass
//Servers:
(::VI021.FirmwareVersion.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(389440282), "FirmwareVersion", 
(::VI021.SdiasState.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(4270210354), "SdiasState", 
(::VI021.SdiasRetryCounter.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1278521066), "SdiasRetryCounter", 
(::VI021.IsoWrTaskDuration.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2734486445), "IsoWrTaskDuration", 
(::VI021.IsoWrTaskMaxDuration.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(4219599171), "IsoWrTaskMaxDuration", 
(::VI021.IsoRdTaskDuration.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(851305671), "IsoRdTaskDuration", 
(::VI021.IsoRdTaskMaxDuration.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3130606261), "IsoRdTaskMaxDuration", 
(::VI021.ManagerOptionBits.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3554748146), "ManagerOptionBits", 
(::VI021.ManagerProtocolVersion.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1336107588), "ManagerProtocolVersion", 
(::VI021.SdiasOut_1.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(1297821089), "SdiasOut_1", 
(::VI021.VaranOut_1.pMeth)$UINT, _CH_SVR_OBJ$UINT, 2#0000000000000000$UINT, TO_UDINT(2138873746), "VaranOut_1", 
//Clients:
(::VI021.Hub_Base1.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(58231171), "Hub_Base1", TO_UDINT(3238133653), "Hub_Base", 1$UINT, 21$UINT, 
(::VI021.SdiasManager.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(2118381352), "SdiasManager", TO_UDINT(2118381352), "SdiasManager", 1$UINT, 94$UINT, 
(::VI021.SdiasHubBase.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(4173303375), "SdiasHubBase", TO_UDINT(4173303375), "SdiasHubBase", 1$UINT, 10$UINT, 
END_FUNCTION


#define USER_CNT_VI021 49

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_VI021] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION VI021::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
		nCmdSize	: UINT;
	END_VAR

	ret_code	:= BusInterfaceVARAN::@STD();
	IF ret_code <> C_OK THEN
		RETURN;
	END_IF;
	nCmdSize		:= Varan_Base::State.pMeth^.nCmds$UINT*SIZEOF(pVoid) + CMDMETH.Init;

	_memcpy((#vmt.CmdTable)$^USINT, Varan_Base::State.pMeth, nCmdSize);
	vmt.CmdTable.nCmds		:= nSTDCMD + USER_CNT_VI021;
	vmt.CmdTable.Init		:= #Init();
#pragma warning (disable : 74)
	vmt.UserFcts[27]		:= #CheckDeviceID();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[43]		:= #GetDeviceID();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[44]		:= #GetFWVersion();

#pragma warning (default : 74)
	Varan_Base::State.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF Varan_Base::State.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	FirmwareVersion.pMeth			:= StoreMethod( #FirmwareVersion::Read(), #M_NO_F() );
	IF FirmwareVersion.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	SdiasState.pMeth			:= StoreMethod( #SdiasState::Read(), #M_NO_F() );
	IF SdiasState.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	SdiasRetryCounter.pMeth			:= StoreMethod( #SdiasRetryCounter::Read(), #M_NO_F() );
	IF SdiasRetryCounter.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	IsoWrTaskDuration.pMeth			:= StoreMethod( #IsoWrTaskDuration::Read(), #M_NO_F() );
	IF IsoWrTaskDuration.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	IsoWrTaskMaxDuration.pMeth			:= StoreMethod( #IsoWrTaskMaxDuration::Read(), #IsoWrTaskMaxDuration::Write() );
	IF IsoWrTaskMaxDuration.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	IsoRdTaskDuration.pMeth			:= StoreMethod( #IsoRdTaskDuration::Read(), #M_NO_F() );
	IF IsoRdTaskDuration.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	IsoRdTaskMaxDuration.pMeth			:= StoreMethod( #IsoRdTaskMaxDuration::Read(), #IsoRdTaskMaxDuration::Write() );
	IF IsoRdTaskMaxDuration.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	ManagerOptionBits.pMeth			:= StoreMethod( #ManagerOptionBits::Read(), #M_NO_F() );
	IF ManagerOptionBits.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	ManagerProtocolVersion.pMeth			:= StoreMethod( #ManagerProtocolVersion::Read(), #M_NO_F() );
	IF ManagerProtocolVersion.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	_memcpy((#vmt.CmdTable)$^USINT, SdiasOut_1.pMeth, SIZEOF(CMDMETH));
	vmt.CmdTable.nCmds		:= nSTDCMD;
	SdiasOut_1.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF SdiasOut_1.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	_memcpy((#vmt.CmdTable)$^USINT, VaranOut_1.pMeth, SIZEOF(CMDMETH));
	vmt.CmdTable.nCmds		:= nSTDCMD;
	VaranOut_1.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF VaranOut_1.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION
FUNCTION VIRTUAL GLOBAL VI021::Init
  VAR
  	tempCmd    : CmdStruct;
    _result     : results;
  END_VAR
  
  us_InitCounter += 1;

  if us_InitCounter = 1 then
    // Add Device ID from valid ids
    tempCmd.uiCmd := SDIAS_CMD_ADD_DEVICE_ID;  
    tempCmd.aPara[0] := DEVICE_ID_VI022;
    //Call NewInst
    SdiasManager.ClassState.NewInst(pPara:=#tempCmd, pResult:=#_result);
  end_if;

  BusInterfaceVARAN::Init();
  
END_FUNCTION

FUNCTION VIRTUAL GLOBAL VI021::SdiasState::Read
	VAR_OUTPUT
		output (EAX) 	: t_e_VaranErrors;
	END_VAR

	SdiasState := SdiasManager.ClassState.Read();
	output := SdiasState;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL VI021::SdiasRetryCounter::Read
	VAR_OUTPUT
		output (EAX) 	: UDINT;
	END_VAR

	SdiasRetryCounter := SdiasManager.RetryCounter.Read();
	output := SdiasRetryCounter;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL VI021::SdiasRetryCounter::Write
	VAR_INPUT
		input (EAX) 	: UDINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: UDINT;
	END_VAR

	SdiasRetryCounter := input;
 	result := (SdiasManager.RetryCounter.Write(SdiasRetryCounter))$UDINT;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL VI021::FirmwareVersion::Read
	VAR_OUTPUT
		output (EAX) 	: HDINT;
	END_VAR

	FirmwareVersion := SdiasManager.FirmwareVersion.Read();
	output := FirmwareVersion;

END_FUNCTION


FUNCTION VIRTUAL VI021::GetDeviceID
	VAR_OUTPUT
		output 	: UDINT;
	END_VAR

  output := SdiasManager.DeviceID;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL VI021::CheckDeviceID
	VAR_INPUT
		ID2Check 	: UDINT;
	END_VAR
	VAR_OUTPUT
		IsOK 	: BOOL;
	END_VAR

  if p_UserCalls.p_Callback = NIL then
    SdiasManager.BusIFLogIn();
  end_if;

  IsOK := BusInterfaceVARAN::CheckDeviceID(ID2Check);

END_FUNCTION


FUNCTION VIRTUAL VI021::GetFWVersion
	VAR_INPUT
		pData 	: ^CHAR;
		length 	: UDINT;
	END_VAR
  
  //Check pointer
  if pData then
    //Length of Firmwareversion (HDINT) -> 8Byte +1 byte zero termination
    if Length >= 9 then
      _itoa(udNumber:=SdiasManager.FirmwareVersion, pString:=pData);  
    else
      pData^ := 0;
    end_if; 
  end_if;  

END_FUNCTION


FUNCTION VIRTUAL GLOBAL VI021::IsoWrTaskDuration::Read
	VAR_OUTPUT
		output (EAX) 	: UDINT;
	END_VAR

	IsoWrTaskDuration := SdiasManager.IsoWrTaskDuration.Read();
	output := IsoWrTaskDuration;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL VI021::IsoWrTaskMaxDuration::Read
	VAR_OUTPUT
		output (EAX) 	: UDINT;
	END_VAR

	IsoWrTaskMaxDuration := SdiasManager.IsoWrTaskMaxDuration.Read();
	output := IsoWrTaskMaxDuration;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL VI021::IsoWrTaskMaxDuration::Write
	VAR_INPUT
		input (EAX) 	: UDINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: UDINT;
	END_VAR

	IsoWrTaskMaxDuration := input;
	result := (SdiasManager.IsoWrTaskMaxDuration.Write(IsoWrTaskMaxDuration))$UDINT;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL VI021::IsoRdTaskDuration::Read
	VAR_OUTPUT
		output (EAX) 	: UDINT;
	END_VAR

	IsoRdTaskDuration := SdiasManager.IsoRdTaskDuration.Read();
	output := IsoRdTaskDuration;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL VI021::IsoRdTaskMaxDuration::Read
	VAR_OUTPUT
		output (EAX) 	: UDINT;
	END_VAR

	IsoRdTaskMaxDuration := SdiasManager.IsoRdTaskMaxDuration.Read();
	output := IsoRdTaskMaxDuration;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL VI021::IsoRdTaskMaxDuration::Write
	VAR_INPUT
		input (EAX) 	: UDINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: UDINT;
	END_VAR

	IsoRdTaskMaxDuration := input;
	result := (SdiasManager.IsoRdTaskMaxDuration.Write(IsoRdTaskMaxDuration))$UDINT;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL VI021::ManagerOptionBits::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

	ManagerOptionBits := SdiasManager.ManagerOptionBits.Read();
	output := ManagerOptionBits;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL VI021::ManagerProtocolVersion::Read
	VAR_OUTPUT
		output (EAX) 	: HDINT;
	END_VAR

	ManagerProtocolVersion := SdiasManager.ManagerProtocolVersion.Read();
	output := ManagerProtocolVersion;

END_FUNCTION
