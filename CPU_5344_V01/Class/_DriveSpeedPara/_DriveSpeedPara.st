//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "_DriveSpeedPara"
	Revision           = "1.2"
	GUID               = "{206811B5-BF64-40F6-8D47-EC187846FF72}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "true"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	IconPath           = ".\Class\_DriveMngBase\Drive.ico"
	SharedCommandTable = "true"
	Objectsize         = "(358,120)"
	Comment            = "displays the speed parameter of the connected Drive">
	<Channels>
		<Server Name="V_FILT" GUID="{4FD1A451-3B4E-4225-B4C0-2771E65384F3}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="Para-Nr : 064&#13;&#10;Unit  : [%]&#13;&#10;Description : Filtered Part of the Torque Reference. See also [V-T2]"/>
		<Server Name="V_KP" GUID="{4816693B-3ED5-48BF-AE3F-9142BFF27D87}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="Para-Nr : 060&#13;&#10;Unit  : [mA/1000rpm]&#13;&#10;Description : Proportional gain of the speed controller.&#13;&#10;A speed difference between set point and actual speed of 1000 rpm gives a current set point of V-KP mA.&#13;&#10;&#13;&#10;Important: V-KP is limited to 500 * IRANGE by the drive. V-KP above this value is limited and not active.&#13;&#10;IRANGE=max([M-INULL],[M-IPEAK],[I-ICONT],[I-IPEAK],[I-IPEAKN])&#13;&#10;Possible values of IRANGE: 5000mA/10000mA/20000mA/30000mA/40000mA"/>
		<Server Name="V_KPREL" GUID="{911EC794-43B8-418B-8885-6079186D1883}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="Para-Nr : 066&#13;&#10;Unit  : [%]&#13;&#10;Description : Speed Dependend Gain Reduction of the Speed Controller&#13;&#10;Dependend on [I-NFILT] the proportional gain of the speed controller [V-KP] is reduced:&#13;&#10;[I-NFILT] =        0 upm ... proportional gain = [V-KP]&#13;&#10;[I-NFILT] = [V-NMAX] upm ... proportional gain = [V-KP]*V-KPREL"/>
		<Server Name="V_NMAX" GUID="{338A2EEA-4060-4D13-82BA-9B8B054A8F9F}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="Para-Nr : 065&#13;&#10;Unit  : [rpm]&#13;&#10;Description : Maximum application speed of the motor&#13;&#10;The speed set point of the speed controller is limited to the minimum of V-NMAX and [M-NMAX]."/>
		<Server Name="V_T" GUID="{831CEB58-4FA8-4F3F-A33F-76FEF4AD380C}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="Para-Nr : 062&#13;&#10;Unit  : [µs]&#13;&#10;Description : Time constant of the feedback filter"/>
		<Server Name="V_T2" GUID="{EA815ABB-2187-48C6-9638-3A9241957979}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="Para-Nr : 063&#13;&#10;Unit  : [µs]&#13;&#10;Description : Time Constant of the Torque Reference Filter. See also [V-FILT]"/>
		<Server Name="V_TN" GUID="{8CC877C7-ED69-4E9E-A537-5F8901463B1B}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="Para-Nr : 061&#13;&#10;Unit  : [µs]&#13;&#10;Description : Integral action time of the speed controller.&#13;&#10;A speed difference between set point and actual speed of 1000 rpm  &#13;&#10;gives a current set point of [V-KP] mA after the time V-TN.&#13;&#10;V-TN=0 disables the integral part of the speed controller."/>
	</Channels>
	<RevDoku>
		<Owner Company="Sigmatek" Author="HasHan"/>
		<Dokumentation Revision="1.2" Date="08.11.2016" Author="ZoePat" Company="Sigmatek" Description="Client &quot;DriveAxis&quot; is now not required."/>
		<Dokumentation Revision="1.1" Date="10.08.2010" Author="Ramand" Company="Sigmatek" Description="For the number of parameters in this group now a constant is used instead of the numerical value for easier change in the future"/>
		<Dokumentation Revision="1.0" Date="05.08.2009" Author="HasHan" Company="Sigmatek" Description="Creation"/>
	</RevDoku>
	<Network Name="_DriveSpeedPara">
		<!-- List of Components in this network -->
		<Components>
			<Object
				Name       = "_base"
				GUID       = "{5C9295C8-7063-428F-9C58-5D970F449E5F}"
				Class      = "_DriveParaBase"
				Position   = "(218,120)"
				Visualized = "false">
				<Channels>
					<Server Name="State"/>
					<Client Name="DriveAxis"/>
					<Client Name="ErrorCode"/>
				</Channels>
			</Object>
		</Components>
		<Comments>
		</Comments>
		<!-- List of Connections in this network -->
		<Connections>
			<Connection Source="this.State" Destination="_base.State" Vertices="(740,210),(568,210),"/>
			<Connection Source="_base.DriveAxis" Destination="this.DriveAxis" Vertices="(218,210),(38,210),"/>
			<Connection Source="_base.ErrorCode" Destination="this.ErrorCode" Vertices="(218,270),(38,270),"/>
		</Connections>
		<!-- Headerfiles -->
		<Options>
		</Options>
	</Network>
</Class>
*)
#pragma using _DriveParaBase

_DriveSpeedPara : CLASS
: _DriveParaBase
  //Servers:
	V_KP 	: SvrCh_DINT;
	V_TN 	: SvrCh_DINT;
	V_T 	: SvrCh_DINT;
	V_T2 	: SvrCh_DINT;
	V_FILT 	: SvrCh_DINT;
	V_NMAX 	: SvrCh_DINT;
	V_KPREL 	: SvrCh_DINT;
  //Clients:
  //Variables:
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL Init;
	
	FUNCTION VIRTUAL GLOBAL RefreshPara
		VAR_INPUT
			usParaNr 	: USINT;
			dValue 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL RefreshAllPara;
	
	FUNCTION VIRTUAL GLOBAL V_KP::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL V_TN::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL V_T::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL V_T2::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL V_FILT::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL V_NMAX::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL V_KPREL::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

//}}LSL_DECLARATION


FUNCTION GLOBAL TAB _DriveSpeedPara::@CT_
0$UINT,
2#0100000000000000$UINT, //TY__DRIVESPEEDPARA
1$UINT, 2$UINT, (SIZEOF(::_DriveSpeedPara))$UINT, 
7$UINT, 0$UINT, 0$UINT, 
TO_UDINT(2960957186), "_DriveSpeedPara", //Class
TO_UDINT(3299882984), "_DriveParaBase", 1$UINT, 2$UINT, //Baseclass
//Servers:
(::_DriveSpeedPara.V_KP.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3492028885), "V_KP", 
(::_DriveSpeedPara.V_TN.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3882947112), "V_TN", 
(::_DriveSpeedPara.V_T.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3327483750), "V_T", 
(::_DriveSpeedPara.V_T2.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3200397119), "V_T2", 
(::_DriveSpeedPara.V_FILT.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(547894809), "V_FILT", 
(::_DriveSpeedPara.V_NMAX.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1577944140), "V_NMAX", 
(::_DriveSpeedPara.V_KPREL.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1505989390), "V_KPREL", 
//Clients:
END_FUNCTION


#define USER_CNT__DriveSpeedPara 4

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT__DriveSpeedPara] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION _DriveSpeedPara::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
		nCmdSize	: UINT;
	END_VAR

	ret_code	:= _DriveParaBase::@STD();
	IF ret_code <> C_OK THEN
		RETURN;
	END_IF;
	nCmdSize		:= _DriveParaBase::State.pMeth^.nCmds$UINT*SIZEOF(pVoid) + CMDMETH.Init;

	_memcpy((#vmt.CmdTable)$^USINT, _DriveParaBase::State.pMeth, nCmdSize);
	vmt.CmdTable.nCmds		:= nSTDCMD + USER_CNT__DriveSpeedPara;
	vmt.CmdTable.Init		:= #Init();
#pragma warning (disable : 74)
	vmt.UserFcts[2]		:= #RefreshPara();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[3]		:= #RefreshAllPara();

#pragma warning (default : 74)
	_DriveParaBase::State.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF _DriveParaBase::State.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	V_KP.pMeth			:= StoreMethod( #M_RD_DIRECT(), #V_KP::Write() );
	IF V_KP.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	V_TN.pMeth			:= StoreMethod( #M_RD_DIRECT(), #V_TN::Write() );
	IF V_TN.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	V_T.pMeth			:= StoreMethod( #M_RD_DIRECT(), #V_T::Write() );
	IF V_T.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	V_T2.pMeth			:= StoreMethod( #M_RD_DIRECT(), #V_T2::Write() );
	IF V_T2.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	V_FILT.pMeth			:= StoreMethod( #M_RD_DIRECT(), #V_FILT::Write() );
	IF V_FILT.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	V_NMAX.pMeth			:= StoreMethod( #M_RD_DIRECT(), #V_NMAX::Write() );
	IF V_NMAX.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	V_KPREL.pMeth			:= StoreMethod( #M_RD_DIRECT(), #V_KPREL::Write() );
	IF V_KPREL.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION
FUNCTION VIRTUAL GLOBAL _DriveSpeedPara::Init

  if _firstscan then
    if (IsAxisConnected() = TRUE) then
      DriveAxis.AddParaObjects(Index:=IDX_VEL_PARA, pThis:=this); // add the object in the list of the axis
    end_if;
  end_if;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL _DriveSpeedPara::V_KP::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	if (input <> V_KP) & (bNoASync = FALSE) then
    result := SetASyncCmd(ParaNr:= SDD_V_KP, ParaRdWr:= 1, ParaValue:= input, pThis:= this);
  end_if;
  
  V_KP := input;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL _DriveSpeedPara::V_TN::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	if (input <> V_TN) & (bNoASync = FALSE) then
    result := SetASyncCmd(ParaNr:= SDD_V_TN, ParaRdWr:= 1, ParaValue:= input, pThis:= this);
  end_if;
  
  V_TN := input;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL _DriveSpeedPara::V_T::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	if (input <> V_T) & (bNoASync = FALSE) then
    result := SetASyncCmd(ParaNr:= SDD_V_T, ParaRdWr:= 1, ParaValue:= input, pThis:= this);
  end_if;
  
  V_T := input;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL _DriveSpeedPara::V_T2::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	if (input <> V_T2) & (bNoASync = FALSE) then
    result := SetASyncCmd(ParaNr:= SDD_V_T2, ParaRdWr:= 1, ParaValue:= input, pThis:= this);
  end_if;
  
  V_T2 := input;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL _DriveSpeedPara::V_FILT::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	if (input <> V_FILT) & (bNoASync = FALSE) then
    result := SetASyncCmd(ParaNr:= SDD_V_FILT, ParaRdWr:= 1, ParaValue:= input, pThis:= this);
  end_if;
  
  V_FILT := input;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL _DriveSpeedPara::V_NMAX::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	if (input <> V_NMAX) & (bNoASync = FALSE) then
    result := SetASyncCmd(ParaNr:= SDD_V_NMAX, ParaRdWr:= 1, ParaValue:= input, pThis:= this);
  end_if;
  
  V_NMAX := input;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL _DriveSpeedPara::V_KPREL::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	if (input <> V_KPREL) & (bNoASync = FALSE) then
    result := SetASyncCmd(ParaNr:= SDD_V_KPREL, ParaRdWr:= 1, ParaValue:= input, pThis:= this);
  end_if;
  
  V_KPREL := input;

END_FUNCTION




FUNCTION VIRTUAL GLOBAL _DriveSpeedPara::RefreshPara
	VAR_INPUT
		usParaNr 	: USINT;
		dValue 	: DINT;
	END_VAR
  
  case usParaNr of
  SDD_V_KP :
    V_KP := dValue;
  
  SDD_V_TN :
    V_TN := dValue;
  
  SDD_V_T :
    V_T := dValue;
  
  SDD_V_T2 :
    V_T2 := dValue;
  
  SDD_V_FILT :
    V_FILT := dValue;
  
  SDD_V_NMAX :
    V_NMAX := dValue;
  
  SDD_V_KPREL :
    V_KPREL := dValue;
  
  end_case;
  
END_FUNCTION


FUNCTION VIRTUAL GLOBAL _DriveSpeedPara::RefreshAllPara

  // number of Parameters in this group
  AnzASyncPara += NBR_VEL_PARA;

END_FUNCTION
