//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "ScalePotMeter"
	Revision           = "0.0"
	GUID               = "{896D99C7-79B7-4436-9269-FC4C239E8469}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(420,240)">
	<Channels>
		<Server Name="ClassSvr" GUID="{2BFA5235-233B-451E-82FD-F18513B4B01A}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="Offset" GUID="{18291501-8C0A-42DC-B952-F406C29C6091}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="SRam"/>
		<Client Name="Dif" Required="true" Internal="false"/>
		<Client Name="Mul" Required="true" Internal="false"/>
		<Client Name="Raw" Required="true" Internal="false"/>
	</Channels>
</Class>
*)
ScalePotMeter : CLASS
  //Servers:
	ClassSvr 	: SvrChCmd_DINT;
	Offset 	: SvrCh_DINT;
  //Clients:
	Mul 	: CltCh_DINT;
	Dif 	: CltCh_DINT;
	Raw 	: CltCh_DINT;
  //Variables:
		var1 	: DINT;
		var2 	: DINT;
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL ClassSvr::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

//}}LSL_DECLARATION


FUNCTION GLOBAL TAB ScalePotMeter::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_SCALEPOTMETER
0$UINT, 0$UINT, (SIZEOF(::ScalePotMeter))$UINT, 
2$UINT, 3$UINT, 0$UINT, 
TO_UDINT(3833699008), "ScalePotMeter", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::ScalePotMeter.ClassSvr.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(619352855), "ClassSvr", 
(::ScalePotMeter.Offset.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000001000$UINT, TO_UDINT(2851212630), "Offset", 
//Clients:
(::ScalePotMeter.Mul.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(1067803435), "Mul", 
(::ScalePotMeter.Dif.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(920055015), "Dif", 
(::ScalePotMeter.Raw.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(2350160351), "Raw", 
END_FUNCTION


#define USER_CNT_ScalePotMeter 0

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_ScalePotMeter] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION ScalePotMeter::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT_ScalePotMeter, pCmd := #vmt.CmdTable);
	vmt.CmdTable.Read		:= #Read();
	ClassSvr.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF ClassSvr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Offset.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF Offset.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION

FUNCTION VIRTUAL GLOBAL ScalePotMeter::ClassSvr::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR


  Mul := Mul.Read();
  Dif := Dif.Read();
  Offset := Offset.Read();
  Raw := Raw.Read();
  if dif <> 0 then
    var1 :=raw *mul;
    var2 :=var1/dif;
    ClassSvr :=var2 +Offset;
    //ClassSvr := (raw *(mul/dif)) + offset;
  else
    ClassSvr := -99999999;
  end_if;
	output := ClassSvr;

END_FUNCTION
