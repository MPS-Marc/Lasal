//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "Lees10Ingangenin"
	Revision           = "0.0"
	GUID               = "{D8D218D0-1922-4359-9BF0-9AC79B7455AF}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(284,120)">
	<Channels>
		<Server Name="ClassSVR" GUID="{BD40D8EA-8F2F-47E0-97D1-AFA7952B080D}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Client Name="ingang1" Required="false" Internal="false"/>
		<Client Name="ingang10" Required="false" Internal="false"/>
		<Client Name="ingang2" Required="false" Internal="false"/>
		<Client Name="ingang3" Required="false" Internal="false"/>
		<Client Name="ingang4" Required="false" Internal="false"/>
		<Client Name="ingang5" Required="false" Internal="false"/>
		<Client Name="ingang6" Required="false" Internal="false"/>
		<Client Name="ingang7" Required="false" Internal="false"/>
		<Client Name="ingang8" Required="false" Internal="false"/>
		<Client Name="ingang9" Required="false" Internal="false"/>
		<Client Name="Invert" Required="false" Internal="false"/>
	</Channels>
</Class>
*)
Lees10Ingangenin : CLASS
  //Servers:
	ClassSVR 	: SvrChCmd_DINT;
  //Clients:
	ingang1 	: CltCh_DINT;
	ingang2 	: CltCh_DINT;
	ingang3 	: CltCh_DINT;
	ingang4 	: CltCh_DINT;
	ingang5 	: CltCh_DINT;
	ingang6 	: CltCh_DINT;
	ingang7 	: CltCh_DINT;
	ingang8 	: CltCh_DINT;
	ingang9 	: CltCh_DINT;
	ingang10 	: CltCh_DINT;
	Invert 	: CltCh_DINT;
  //Variables:
		gang1 	: DINT;
		gang2 	: DINT;
		gang3 	: DINT;
		gang4 	: DINT;
		gang5 	: DINT;
		gang6 	: DINT;
		gang7 	: DINT;
		gang8 	: DINT;
		gang9 	: DINT;
		gang10 	: DINT;
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL ClassSVR::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

//}}LSL_DECLARATION


FUNCTION GLOBAL TAB Lees10Ingangenin::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_LEES10INGANGENIN
0$UINT, 0$UINT, (SIZEOF(::Lees10Ingangenin))$UINT, 
1$UINT, 11$UINT, 0$UINT, 
TO_UDINT(1181509208), "Lees10Ingangenin", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::Lees10Ingangenin.ClassSVR.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(619352855), "ClassSVR", 
//Clients:
(::Lees10Ingangenin.ingang1.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(607405819), "ingang1", 
(::Lees10Ingangenin.ingang2.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(3174897473), "ingang2", 
(::Lees10Ingangenin.ingang3.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(3392808919), "ingang3", 
(::Lees10Ingangenin.ingang4.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(1415492212), "ingang4", 
(::Lees10Ingangenin.ingang5.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(593068770), "ingang5", 
(::Lees10Ingangenin.ingang6.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(3125859160), "ingang6", 
(::Lees10Ingangenin.ingang7.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(3445089230), "ingang7", 
(::Lees10Ingangenin.ingang8.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(1575550559), "ingang8", 
(::Lees10Ingangenin.ingang9.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(720359113), "ingang9", 
(::Lees10Ingangenin.ingang10.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(3734028531), "ingang10", 
(::Lees10Ingangenin.Invert.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(48933185), "Invert", 
END_FUNCTION


#define USER_CNT_Lees10Ingangenin 0

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_Lees10Ingangenin] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION Lees10Ingangenin::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT_Lees10Ingangenin, pCmd := #vmt.CmdTable);
	vmt.CmdTable.Read		:= #Read();
	ClassSVR.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF ClassSVR.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION
// JdK 22-7-2019 Lees10IngangenIn, copied from 4090 to 4284
// needs to be translated to English some time


FUNCTION VIRTUAL GLOBAL Lees10Ingangenin::ClassSVR::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

  ClassSVR := 0;
  ingang1 := ingang1.Read();
  ingang2 := ingang2.Read();
  ingang3 := ingang3.Read();
  ingang4 := ingang4.Read();
  ingang5 := ingang5.Read();
  ingang6 := ingang6.Read();
  ingang7 := ingang7.Read();
  ingang8 := ingang8.Read();
  ingang9 := ingang9.Read();
  ingang10 := ingang10.Read();
  //alle tweetjes zijn cilinders die niet retour zijn, deze nul maken
  if ingang1 = 2 then ingang1 := 0; end_if;
  if ingang2 = 2 then ingang2 := 0; end_if;
  if ingang3 = 2 then ingang3 := 0; end_if;
  if ingang4 = 2 then ingang4 := 0; end_if;
  if ingang5 = 2 then ingang5 := 0; end_if;
  if ingang6 = 2 then ingang6 := 0; end_if;
  if ingang7 = 2 then ingang7 := 0; end_if;
  if ingang8 = 2 then ingang8 := 0; end_if;
  if ingang9 = 2 then ingang9 := 0; end_if;
  if ingang10 = 2 then ingang10 := 0; end_if;

  Invert := Invert.Read();
  if Invert = 1 then
    gang1 := ingang1=0;
    gang2 := ingang2=0;
    gang3 := ingang3=0;
    gang4 := ingang4=0;
    gang5 := ingang5=0;
    gang6 := ingang6=0;
    gang7 := ingang7=0;
    gang8 := ingang8=0;
    gang9 := ingang9=0;
    gang10 := ingang10=0;
  else
    gang1 := ingang1;
    gang2 := ingang2;
    gang3 := ingang3;
    gang4 := ingang4;
    gang5 := ingang5;
    gang6 := ingang6;
    gang7 := ingang7;
    gang8 := ingang8;
    gang9 := ingang9;
    gang10 := ingang10;  
  end_if;
  ClassSVR += gang1 * 1;
  ClassSVR += gang2 * 10;
  ClassSVR += gang3 * 100;
  ClassSVR += gang4 * 1000;
  ClassSVR += gang5 * 10000;
  ClassSVR += gang6 * 100000;
  ClassSVR += gang7 * 1000000;
  ClassSVR += gang8 * 10000000;
  ClassSVR += gang9 * 100000000;
  ClassSVR += gang10 * 1000000000;
	output := ClassSVR;

END_FUNCTION
