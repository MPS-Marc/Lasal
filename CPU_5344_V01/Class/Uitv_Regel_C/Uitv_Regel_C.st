//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "Uitv_Regel_C"
	Revision           = "0.0"
	GUID               = "{12CC36AE-5E1A-47B7-95D4-81944ED83745}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(330,840)">
	<Channels>
		<Server Name="actione" GUID="{86229B3A-256A-4DC5-B1CD-2A473CFEA9AD}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="ClassSvr" GUID="{2C4F9EB1-B1B7-48B6-89FE-0830454D9E33}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="ClassSvr0" GUID="{A2F4FBA1-185E-4B8B-9690-422A703D42A5}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="Cmd" GUID="{09C543D0-12D3-47E5-B1CF-453018C96C06}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="outputRule" GUID="{368CA1A9-C6F5-4000-9F04-19DEF80EA539}" Visualized="false" Initialize="true" WriteProtected="false" Retentive="false"/>
		<Server Name="Rnr" GUID="{9F098EC0-CCEB-4BE9-9D45-89C7BA8AA97B}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="speed" GUID="{9446A75C-E8A1-4A31-88F4-E60DF7617B1C}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="UnitData" GUID="{46047DC5-5AF4-4F30-AAEF-881EE5BA7F5D}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="volgorde" GUID="{279F0B96-19E9-4F95-A0E4-F73152DA118E}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="x1pos" GUID="{36C8B221-4AFE-4F9D-9CE0-A470154DAD3F}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="xy1Angle" GUID="{807D0058-DED4-494A-89A3-7D2C1079A9AC}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="xz1Angle" GUID="{F1F512A6-2A7D-47B5-A2ED-92FBBE223150}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="y1pos" GUID="{A9F0799E-FC45-4CEA-BA47-FDAAC11391B0}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="z1pos" GUID="{69EFC51A-6652-48FC-B74B-5213A98CBC87}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="zy1Angle" GUID="{44225C47-B636-4B13-8406-DB4548A38240}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Client Name="list" Required="true" Internal="false"/>
		<Client Name="nextRegel" Required="false" Internal="false"/>
		<Client Name="RegelContent" Required="true" Internal="true"/>
		<Client Name="tMyBDintTODint1" Required="true" Internal="true"/>
	</Channels>
	<Network Name="Uitv_Regel_C">
		<!-- List of Components in this network -->
		<Components>
			<Object
				Name       = "RegelContent"
				GUID       = "{F208192D-3AB4-42F6-AC90-AB6DDA33CB0A}"
				Class      = "Uitv_Regel"
				Position   = "(420,150)"
				Visualized = "true">
				<Channels>
					<Server Name="actione"/>
					<Server Name="ClassSvr"/>
					<Server Name="Cmd"/>
					<Server Name="outputRule"/>
					<Server Name="Rnr"/>
					<Server Name="speed"/>
					<Server Name="Units"/>
					<Server Name="volgorde"/>
					<Server Name="x1pos"/>
					<Server Name="xy1Angle"/>
					<Server Name="xz1Angle"/>
					<Server Name="y1pos"/>
					<Server Name="z1pos"/>
					<Server Name="zy1Angle"/>
					<Client Name="list"/>
					<Client Name="nextRegel"/>
				</Channels>
			</Object>
			<Object
				Name       = "tMyBDintTODint1"
				GUID       = "{5C45C772-DD18-43DF-BE99-EE916DA39F24}"
				Class      = "tMyBDintTODint"
				Position   = "(420,1140)"
				Visualized = "true">
				<Channels>
					<Server Name="ClassSvr"/>
					<Server Name="Data"/>
					<Client Name="cOutput"/>
				</Channels>
			</Object>
		</Components>
		<Comments>
		</Comments>
		<!-- List of Connections in this network -->
		<Connections>
			<Connection Source="this.RegelContent" Destination="RegelContent.ClassSvr"/>
			<Connection Source="RegelContent.nextRegel" Destination="this.nextRegel" Vertices="(420,240),(38,210),"/>
			<Connection Source="this.ClassSvr0" Destination="RegelContent.ClassSvr" Vertices="(908,270),(736,240),"/>
			<Connection Source="this.tMyBDintTODint1" Destination="tMyBDintTODint1.ClassSvr"/>
			<Connection Source="tMyBDintTODint1.cOutput" Destination="RegelContent.Units" Vertices="(420,1230),(330,1230),(330,1110),(840,1110),(840,420),(736,420),"/>
			<Connection Source="this.Rnr" Destination="RegelContent.Rnr" Vertices="(908,330),(736,300),"/>
			<Connection Source="this.Cmd" Destination="RegelContent.Cmd" Vertices="(908,390),(736,360),"/>
			<Connection Source="this.x1pos" Destination="RegelContent.x1pos" Vertices="(908,450),(736,480),"/>
			<Connection Source="this.y1pos" Destination="RegelContent.y1pos" Vertices="(908,510),(736,540),"/>
			<Connection Source="this.z1pos" Destination="RegelContent.z1pos" Vertices="(908,570),(736,600),"/>
			<Connection Source="this.zy1Angle" Destination="RegelContent.zy1Angle" Vertices="(908,630),(736,660),"/>
			<Connection Source="this.xz1Angle" Destination="RegelContent.xz1Angle" Vertices="(908,690),(736,720),"/>
			<Connection Source="this.xy1Angle" Destination="RegelContent.xy1Angle" Vertices="(908,750),(736,780),"/>
			<Connection Source="this.actione" Destination="RegelContent.actione" Vertices="(908,810),(736,840),"/>
			<Connection Source="this.speed" Destination="RegelContent.speed" Vertices="(908,870),(736,900),"/>
			<Connection Source="this.UnitData" Destination="tMyBDintTODint1.Data" Vertices="(908,930),(720,1290),"/>
			<Connection Source="this.volgorde" Destination="RegelContent.volgorde" Vertices="(908,990),(736,960),"/>
			<Connection Source="RegelContent.list" Destination="this.list" Vertices="(420,300),(38,270),"/>
			<Connection Source="this.outputRule" Destination="RegelContent.outputRule" Vertices="(908,1050),(736,1020),"/>
		</Connections>
		<!-- Headerfiles -->
		<Options>
		</Options>
	</Network>
</Class>
*)
Uitv_Regel_C : CLASS
  //Servers:
	ClassSvr 	: SvrChCmd_DINT;
	ClassSvr0 	: SvrCh_DINT;
	Rnr 	: SvrCh_DINT;
	Cmd 	: SvrCh_DINT;
	x1pos 	: SvrCh_DINT;
	y1pos 	: SvrCh_DINT;
	z1pos 	: SvrCh_DINT;
	zy1Angle 	: SvrCh_DINT;
	xz1Angle 	: SvrCh_DINT;
	xy1Angle 	: SvrCh_DINT;
	actione 	: SvrCh_DINT;
	speed 	: SvrCh_DINT;
	UnitData 	: SvrCh_tMyBDint;
	volgorde 	: SvrCh_DINT;
	outputRule 	: SvrCh_DINT;
  //Clients:
	nextRegel 	: CltCh_DINT;
	tMyBDintTODint1 	: CltChCmd_tMyBDintTODint;
	RegelContent 	: CltChCmd_Uitv_Regel;
	list 	: CltChCmd_GlobalList;
  //Variables:
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL ClassSvr0::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL ClassSvr0::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Rnr::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Rnr::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Cmd::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Cmd::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL x1pos::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL x1pos::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL y1pos::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL y1pos::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL z1pos::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL z1pos::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL zy1Angle::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL zy1Angle::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL xz1Angle::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL xz1Angle::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL xy1Angle::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL xy1Angle::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL actione::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL actione::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL speed::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL speed::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL UnitData::Read
		VAR_OUTPUT
			output (EAX) 	: tMyBDint;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL UnitData::Write
		VAR_INPUT
			input (EAX) 	: tMyBDint;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: tMyBDint;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL volgorde::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL volgorde::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL outputRule::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL outputRule::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

#pragma using tMyBDintTODint
#pragma using Uitv_Regel
#pragma usingLtd GlobalList


//}}LSL_DECLARATION


FUNCTION GLOBAL TAB Uitv_Regel_C::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_UITV_REGEL_C
0$UINT, 0$UINT, (SIZEOF(::Uitv_Regel_C))$UINT, 
15$UINT, 4$UINT, 0$UINT, 
TO_UDINT(1225349567), "Uitv_Regel_C", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::Uitv_Regel_C.ClassSvr.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(619352855), "ClassSvr", 
(::Uitv_Regel_C.ClassSvr0.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1999417461), "ClassSvr0", 
(::Uitv_Regel_C.Rnr.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2078699935), "Rnr", 
(::Uitv_Regel_C.Cmd.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3120258634), "Cmd", 
(::Uitv_Regel_C.x1pos.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1877578215), "x1pos", 
(::Uitv_Regel_C.y1pos.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1384757335), "y1pos", 
(::Uitv_Regel_C.z1pos.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(355058311), "z1pos", 
(::Uitv_Regel_C.zy1Angle.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3914873007), "zy1Angle", 
(::Uitv_Regel_C.xz1Angle.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2593465679), "xz1Angle", 
(::Uitv_Regel_C.xy1Angle.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2877112274), "xy1Angle", 
(::Uitv_Regel_C.actione.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3470375588), "actione", 
(::Uitv_Regel_C.speed.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(4168236102), "speed", 
(::Uitv_Regel_C.UnitData.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(859234187), "UnitData", 
(::Uitv_Regel_C.volgorde.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3901612893), "volgorde", 
(::Uitv_Regel_C.outputRule.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2258520770), "outputRule", 
//Clients:
(::Uitv_Regel_C.nextRegel.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000100$UINT, TO_UDINT(2141844633), "nextRegel", 
(::Uitv_Regel_C.tMyBDintTODint1.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(600233671), "tMyBDintTODint1", TO_UDINT(282790112), "tMyBDintTODint", 0$UINT, 0$UINT, 
(::Uitv_Regel_C.RegelContent.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(3325504431), "RegelContent", TO_UDINT(3416199855), "Uitv_Regel", 0$UINT, 0$UINT, 
(::Uitv_Regel_C.list.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000110$UINT, TO_UDINT(1918703020), "list", TO_UDINT(2390595228), "GlobalList", 0$UINT, 0$UINT, 
END_FUNCTION


#define USER_CNT_Uitv_Regel_C 0

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_Uitv_Regel_C] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION Uitv_Regel_C::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT_Uitv_Regel_C, pCmd := #vmt.CmdTable);
	ClassSvr.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF ClassSvr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	ClassSvr0.pMeth			:= StoreMethod( #ClassSvr0::Read(), #ClassSvr0::Write() );
	IF ClassSvr0.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Rnr.pMeth			:= StoreMethod( #Rnr::Read(), #M_NO_F() );
	IF Rnr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Cmd.pMeth			:= StoreMethod( #Cmd::Read(), #M_NO_F() );
	IF Cmd.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	x1pos.pMeth			:= StoreMethod( #x1pos::Read(), #M_NO_F() );
	IF x1pos.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	y1pos.pMeth			:= StoreMethod( #y1pos::Read(), #M_NO_F() );
	IF y1pos.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	z1pos.pMeth			:= StoreMethod( #z1pos::Read(), #M_NO_F() );
	IF z1pos.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	zy1Angle.pMeth			:= StoreMethod( #zy1Angle::Read(), #M_NO_F() );
	IF zy1Angle.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	xz1Angle.pMeth			:= StoreMethod( #xz1Angle::Read(), #M_NO_F() );
	IF xz1Angle.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	xy1Angle.pMeth			:= StoreMethod( #xy1Angle::Read(), #M_NO_F() );
	IF xy1Angle.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	actione.pMeth			:= StoreMethod( #actione::Read(), #M_NO_F() );
	IF actione.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	speed.pMeth			:= StoreMethod( #speed::Read(), #M_NO_F() );
	IF speed.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	UnitData.pMeth			:= StoreMethod( #UnitData::Read(), #M_NO_F() );
	IF UnitData.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	volgorde.pMeth			:= StoreMethod( #volgorde::Read(), #M_NO_F() );
	IF volgorde.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	outputRule.pMeth			:= StoreMethod( #outputRule::Read(), #outputRule::Write() );
	IF outputRule.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION


FUNCTION VIRTUAL GLOBAL Uitv_Regel_C::ClassSvr0::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

	ClassSvr0 := RegelContent.ClassSvr.Read();
	output := ClassSvr0;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Uitv_Regel_C::ClassSvr0::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	ClassSvr0 := input;
	result := (RegelContent.ClassSvr.Write(ClassSvr0))$DINT;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Uitv_Regel_C::Rnr::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

	Rnr := RegelContent.Rnr.Read();
	output := Rnr;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Uitv_Regel_C::Rnr::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	Rnr := input;
	result := (RegelContent.Rnr.Write(Rnr))$DINT;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Uitv_Regel_C::Cmd::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

	Cmd := RegelContent.Cmd.Read();
	output := Cmd;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Uitv_Regel_C::Cmd::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	Cmd := input;
	result := (RegelContent.Cmd.Write(Cmd))$DINT;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Uitv_Regel_C::x1pos::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

	x1pos := RegelContent.x1pos.Read();
	output := x1pos;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Uitv_Regel_C::x1pos::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	x1pos := input;
	result := (RegelContent.x1pos.Write(x1pos))$DINT;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Uitv_Regel_C::y1pos::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

	y1pos := RegelContent.y1pos.Read();
	output := y1pos;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Uitv_Regel_C::y1pos::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	y1pos := input;
	result := (RegelContent.y1pos.Write(y1pos))$DINT;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Uitv_Regel_C::z1pos::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

	z1pos := RegelContent.z1pos.Read();
	output := z1pos;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Uitv_Regel_C::z1pos::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	z1pos := input;
	result := (RegelContent.z1pos.Write(z1pos))$DINT;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Uitv_Regel_C::zy1Angle::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

	zy1Angle := RegelContent.zy1Angle.Read();
	output := zy1Angle;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Uitv_Regel_C::zy1Angle::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	zy1Angle := input;
	result := (RegelContent.zy1Angle.Write(zy1Angle))$DINT;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Uitv_Regel_C::xz1Angle::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

	xz1Angle := RegelContent.xz1Angle.Read();
	output := xz1Angle;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Uitv_Regel_C::xz1Angle::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	xz1Angle := input;
	result := (RegelContent.xz1Angle.Write(xz1Angle))$DINT;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Uitv_Regel_C::xy1Angle::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

	xy1Angle := RegelContent.xy1Angle.Read();
	output := xy1Angle;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Uitv_Regel_C::xy1Angle::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	xy1Angle := input;
	result := (RegelContent.xy1Angle.Write(xy1Angle))$DINT;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Uitv_Regel_C::actione::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

	actione := RegelContent.actione.Read();
	output := actione;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Uitv_Regel_C::actione::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	actione := input;
	result := (RegelContent.actione.Write(actione))$DINT;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Uitv_Regel_C::speed::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

	speed := RegelContent.speed.Read();
	output := speed;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Uitv_Regel_C::speed::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	speed := input;
	result := (RegelContent.speed.Write(speed))$DINT;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Uitv_Regel_C::UnitData::Read
	VAR_OUTPUT
		output (EAX) 	: tMyBDint;
	END_VAR

	UnitData := tMyBDintTODint1.Data.Read();
	output := UnitData;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Uitv_Regel_C::UnitData::Write
	VAR_INPUT
		input (EAX) 	: tMyBDint;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: tMyBDint;
	END_VAR

	UnitData := input;
	result := (tMyBDintTODint1.Data.Write(UnitData))$tMyBDint;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Uitv_Regel_C::volgorde::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

	volgorde := RegelContent.volgorde.Read();
	output := volgorde;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Uitv_Regel_C::volgorde::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	volgorde := input;
	result := (RegelContent.volgorde.Write(volgorde))$DINT;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Uitv_Regel_C::outputRule::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

	outputRule := RegelContent.outputRule.Read();
	output := outputRule;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Uitv_Regel_C::outputRule::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	outputRule := input;
	result := (RegelContent.outputRule.Write(outputRule))$DINT;

END_FUNCTION
