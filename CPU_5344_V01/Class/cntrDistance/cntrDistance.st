//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "cntrDistance"
	Revision           = "0.0"
	GUID               = "{53B83484-3B6C-4F2E-98A9-613E835B5206}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "true"
	DefBackground      = "100 ms"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(284,120)">
	<Channels>
		<Server Name="actPos" GUID="{16ECADBB-EAD4-43C6-97CC-FF395BC91A1E}" Visualized="false" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="ClassSvr" GUID="{2BE6E7D7-1300-4D34-994E-5E47A9231B09}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="resetSoftCounter" GUID="{4F5FB19C-6142-4496-B0CF-F49810BFE02A}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="softCounter" GUID="{9B35E0E5-BD8A-482C-AD94-F113569F07AB}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="SRam"/>
		<Server Name="totalCounter" GUID="{2311DA0C-00BA-4ED9-BC29-8BEA7FE8E671}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="SRam"/>
	</Channels>
</Class>
*)
cntrDistance : CLASS
  //Servers:
	ClassSvr 	: SvrChCmd_DINT;
	actPos 	: SvrCh_DINT;
	softCounter 	: SvrCh_DINT;
	totalCounter 	: SvrCh_DINT;
	resetSoftCounter 	: SvrCh_DINT;
  //Clients:
  //Variables:
		tmpCounter 	: DINT;
		timeWritten 	: UDINT;
		oldActPos 	: DINT;
		tmpDistance 	: DINT;
		tmpPos 	: DINT;
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL Init;
	
	FUNCTION VIRTUAL GLOBAL Background
		VAR_INPUT
			EAX 	: UDINT;
		END_VAR
		VAR_OUTPUT
			state (EAX) 	: UDINT := READY;
		END_VAR;
	
	FUNCTION storeIt;
	
	FUNCTION VIRTUAL GLOBAL resetSoftCounter::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

//}}LSL_DECLARATION


FUNCTION GLOBAL TAB cntrDistance::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_CNTRDISTANCE
0$UINT, 0$UINT, (SIZEOF(::cntrDistance))$UINT, 
5$UINT, 0$UINT, 0$UINT, 
TO_UDINT(3956148192), "cntrDistance", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::cntrDistance.ClassSvr.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(619352855), "ClassSvr", 
(::cntrDistance.actPos.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3351625522), "actPos", 
(::cntrDistance.softCounter.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000001000$UINT, TO_UDINT(4203045961), "softCounter", 
(::cntrDistance.totalCounter.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000001000$UINT, TO_UDINT(1698109949), "totalCounter", 
(::cntrDistance.resetSoftCounter.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(260643724), "resetSoftCounter", 
//Clients:
END_FUNCTION


#define USER_CNT_cntrDistance 1

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_cntrDistance] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION cntrDistance::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT_cntrDistance, pCmd := #vmt.CmdTable);
	vmt.CmdTable.Init		:= #Init();
#pragma warning (disable : 74)
	vmt.UserFcts[0]		:= #Background();

#pragma warning (default : 74)
	ClassSvr.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF ClassSvr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	actPos.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF actPos.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	softCounter.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF softCounter.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	totalCounter.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF totalCounter.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	resetSoftCounter.pMeth			:= StoreMethod( #M_RD_DIRECT(), #resetSoftCounter::Write() );
	IF resetSoftCounter.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION
// JdK 21-11-2019: class to count distance, they are stored in ram servers, don't write them to often
// every 1/10 mm change is handled, every 1 meter is counted, every 10m is stored, or every 5 minutes


FUNCTION VIRTUAL GLOBAL cntrDistance::Init

  tmpCounter:= totalCounter;
  timeWritten:= ops.tAbsolute;

END_FUNCTION

FUNCTION VIRTUAL GLOBAL cntrDistance::Background
	VAR_INPUT
		EAX 	: UDINT;
	END_VAR
	VAR_OUTPUT
		state (EAX) 	: UDINT;(* := READY *)
	END_VAR

  tmpPos:= abs(oldActPos-actPos);
  IF tmpPos > 10 THEN //don't handle the very small changes
    IF tmpPos < 10000 THEN //else, to big change, just ignore
      tmpDistance+= abs(oldActPos- actPos);
      IF tmpDistance > 10000 THEN //one meter
        totalCounter+= 1;
        softCounter+= 1;
        tmpDistance-= 10000;
        IF totalCounter-tmpCounter > 10 THEN
          storeIt();
        END_IF;
      END_IF;
    END_IF;
    oldActPos:= actPos;
  END_IF;
  

  IF totalCounter= tmpCounter THEN
    timeWritten:= ops.tAbsolute; //no need to write again
  ELSIF ops.tAbsolute-timeWritten > 300000 THEN //after 5 minutes
    storeIt();
  END_IF;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL cntrDistance::resetSoftCounter::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	resetSoftCounter := input;
  softCounter:= 0;
  softCounter.Write(input:=softCounter);
	result := resetSoftCounter;

END_FUNCTION




FUNCTION cntrDistance::storeIt

  tmpCounter:=totalCounter;
  softCounter-= 1; //we can only store a new value
  totalCounter-= 1;
  softCounter.Write(input:=softCounter+1); //write action to store value
  totalCounter.Write(input:=totalCounter+1);
  
END_FUNCTION
