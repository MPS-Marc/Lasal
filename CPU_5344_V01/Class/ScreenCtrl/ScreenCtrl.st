//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "ScreenCtrl"
	Revision           = "0.0"
	GUID               = "{430CBC97-6076-4E94-AE5B-E641588381A6}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "true"
	DefBackground      = "1000 ms"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(450,360)">
	<Channels>
		<Server Name="ActScreen" GUID="{80313E78-E831-4E20-B1B8-3824179358F7}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="ActWindow" GUID="{7CC8113B-BBB2-4558-88D8-131FB127714F}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="ClassSvr" GUID="{5F028133-4995-485D-BC8B-02C835FEA1FD}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="CloseWindow" GUID="{D3C1D5C5-10DD-4745-9A74-D6B432BB96C9}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="dateValue" GUID="{CC11B275-B091-4E2F-B921-3E5DEE941B78}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="NrAlarms" GUID="{4D3C116F-C7F9-48F2-AA37-CCBA9AE267C6}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="ProgChangeAllowed" GUID="{4E1EB6E1-9D06-4476-911E-C851D76E4834}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="ReqScreen" GUID="{4E3A1512-0476-4F46-9988-2817C0B65C7F}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="ReqWindow" GUID="{6090AA11-AA16-41CD-9F72-4B81F4BC059F}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="syncTime" GUID="{7C9324E6-B7E7-4FA4-80C8-799ACFF07610}" Visualized="false" Initialize="true" DefValue="1" WriteProtected="false" Retentive="false"/>
		<Server Name="timeValue" GUID="{E1505CAE-1198-44AF-8359-EF891AAB6F7A}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="UserLevel" GUID="{B9079BF8-609B-4825-8CE3-0DA463B916A9}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Client Name="ctrlDateTime" Required="true" Internal="false"/>
		<Client Name="updateDate" Required="true" Internal="false"/>
		<Client Name="updateTime" Required="true" Internal="false"/>
	</Channels>
</Class>
*)
ScreenCtrl : CLASS
  //Servers:
	ClassSvr 	: SvrChCmd_DINT;
	ActScreen 	: SvrCh_DINT;
	ActWindow 	: SvrCh_DINT;
	ReqScreen 	: SvrCh_DINT;
	ReqWindow 	: SvrCh_DINT;
	CloseWindow 	: SvrCh_DINT;
	NrAlarms 	: SvrCh_DINT;
	UserLevel 	: SvrCh_DINT;
	ProgChangeAllowed 	: SvrCh_DINT;
	timeValue 	: SvrCh_HDINT;
	dateValue 	: SvrCh_HDINT;
	syncTime 	: SvrCh_DINT;
  //Clients:
	ctrlDateTime 	: CltChCmd__SysDateTime2;
	updateTime 	: CltCh_HDINT;
	updateDate 	: CltCh_HDINT;
  //Variables:
		oldTimeValue 	: HDINT;
		oldDateValue 	: HDINT;
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL Init;
	
	FUNCTION VIRTUAL GLOBAL Background
		VAR_INPUT
			EAX 	: UDINT;
		END_VAR
		VAR_OUTPUT
			state (EAX) 	: UDINT := READY;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

#pragma usingLtd _SysDateTime2


//}}LSL_DECLARATION


FUNCTION GLOBAL TAB ScreenCtrl::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_SCREENCTRL
0$UINT, 0$UINT, (SIZEOF(::ScreenCtrl))$UINT, 
12$UINT, 3$UINT, 0$UINT, 
TO_UDINT(4196661951), "ScreenCtrl", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::ScreenCtrl.ClassSvr.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(619352855), "ClassSvr", 
(::ScreenCtrl.ActScreen.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3239971925), "ActScreen", 
(::ScreenCtrl.ActWindow.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2511770808), "ActWindow", 
(::ScreenCtrl.ReqScreen.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3221509313), "ReqScreen", 
(::ScreenCtrl.ReqWindow.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2494352428), "ReqWindow", 
(::ScreenCtrl.CloseWindow.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2797917433), "CloseWindow", 
(::ScreenCtrl.NrAlarms.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1331523369), "NrAlarms", 
(::ScreenCtrl.UserLevel.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(4186762798), "UserLevel", 
(::ScreenCtrl.ProgChangeAllowed.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1573594615), "ProgChangeAllowed", 
(::ScreenCtrl.timeValue.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2838314989), "timeValue", 
(::ScreenCtrl.dateValue.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(609140532), "dateValue", 
(::ScreenCtrl.syncTime.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1518494784), "syncTime", 
//Clients:
(::ScreenCtrl.ctrlDateTime.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(1105866304), "ctrlDateTime", TO_UDINT(3286875708), "_SysDateTime2", 0$UINT, 0$UINT, 
(::ScreenCtrl.updateTime.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(4261929443), "updateTime", 
(::ScreenCtrl.updateDate.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(990727900), "updateDate", 
END_FUNCTION


#define USER_CNT_ScreenCtrl 1

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_ScreenCtrl] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION ScreenCtrl::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT_ScreenCtrl, pCmd := #vmt.CmdTable);
	vmt.CmdTable.Init		:= #Init();
#pragma warning (disable : 74)
	vmt.UserFcts[0]		:= #Background();

#pragma warning (default : 74)
	ClassSvr.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF ClassSvr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	ActScreen.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF ActScreen.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	ActWindow.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF ActWindow.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	ReqScreen.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF ReqScreen.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	ReqWindow.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF ReqWindow.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	CloseWindow.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF CloseWindow.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	NrAlarms.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF NrAlarms.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	UserLevel.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF UserLevel.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	ProgChangeAllowed.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF ProgChangeAllowed.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	timeValue.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF timeValue.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	dateValue.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF dateValue.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	syncTime.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF syncTime.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION
// JdK 27-11-2019: ScreenCtrl class to copy values from kernel project to cpu project and other way around
// added function to sync time with time of screen project


FUNCTION VIRTUAL GLOBAL ScreenCtrl::Init

  ReqScreen := ReqWindow :=UserLevel := -1;
  timeValue:= 0;
  dateValue:= 0;
  
END_FUNCTION


FUNCTION VIRTUAL GLOBAL ScreenCtrl::Background
	VAR_INPUT
		EAX 	: UDINT;
	END_VAR
	VAR_OUTPUT
		state (EAX) 	: UDINT;(* := READY *)
	END_VAR

  //sync date and time with visualisation
  IF syncTime THEN
    IF dateValue<> 0 & timeValue <> 0 & (oldTimeValue<> timeValue | oldDateValue<> dateValue) THEN //time and date value are written from kernel project
      IF timeValue <> ctrlDateTime.SysTime THEN //only write update if they are not the same
        updateTime.Write(input:=timeValue);
      END_IF;
      IF dateValue <> ctrlDateTime.SysDate THEN
        updateDate.Write(input:=dateValue);
      END_IF;
      oldTimeValue:= timeValue; 
      oldDateValue:= dateValue;
    END_IF;
  END_IF;

END_FUNCTION
