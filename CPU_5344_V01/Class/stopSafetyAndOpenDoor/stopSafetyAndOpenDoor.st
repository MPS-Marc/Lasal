//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "stopSafetyAndOpenDoor"
	Revision           = "0.0"
	GUID               = "{31812824-2757-42DA-B61F-6EC4A3BC096B}"
	RealtimeTask       = "false"
	CyclicTask         = "true"
	DefCyclictime      = "10 ms"
	BackgroundTask     = "false"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(284,120)">
	<Channels>
		<Server Name="ClassSvr" GUID="{0E1A51AF-D375-44DB-BE06-2AC247A6B4F2}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="openSawDoor" GUID="{6B8EBEFC-65FA-40D0-A4A4-14CDB56E2CD3}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="readOpenSawDoor" GUID="{D3A6CAE3-3E26-42E8-9B68-0462B2C13E95}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="resetSafety" GUID="{33A35583-E4A9-4A05-A48B-6E198632DC0B}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="sparMaxButtonTime" GUID="{2C316C8B-6DDB-4D8A-B8EC-67346505C1F7}" Visualized="false" Initialize="true" DefValue="240000" WriteProtected="false" Retentive="File"/>
		<Server Name="stopSafety" GUID="{87E19F39-8AC2-4832-9858-98078FCE9236}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Client Name="iPBresetSafety" Required="true" Internal="false"/>
		<Client Name="iSafetyState" Required="true" Internal="false"/>
		<Client Name="iStopSafetyAllowed" Required="true" Internal="false"/>
	</Channels>
</Class>
*)
stopSafetyAndOpenDoor : CLASS
  //Servers:
	ClassSvr 	: SvrChCmd_DINT;
	resetSafety 	: SvrCh_DINT;
	openSawDoor 	: SvrCh_DINT;
	stopSafety 	: SvrCh_DINT;
	sparMaxButtonTime 	: SvrCh_UDINT;
	readOpenSawDoor 	: SvrCh_DINT;
  //Clients:
	iPBresetSafety 	: CltCh_DINT;
	iStopSafetyAllowed 	: CltCh_DINT;
	iSafetyState 	: CltCh_DINT;
  //Variables:
		tmpButtonTime 	: UDINT;
		oldPBresetSafety 	: DINT;
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL CyWork
		VAR_INPUT
			EAX 	: UDINT;
		END_VAR
		VAR_OUTPUT
			state (EAX) 	: UDINT := READY;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL openSawDoor::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL readOpenSawDoor::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

//}}LSL_DECLARATION


FUNCTION GLOBAL TAB stopSafetyAndOpenDoor::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_STOPSAFETYANDOPENDOOR
0$UINT, 0$UINT, (SIZEOF(::stopSafetyAndOpenDoor))$UINT, 
6$UINT, 3$UINT, 0$UINT, 
TO_UDINT(3134579773), "stopSafetyAndOpenDoor", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::stopSafetyAndOpenDoor.ClassSvr.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(619352855), "ClassSvr", 
(::stopSafetyAndOpenDoor.resetSafety.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(624514841), "resetSafety", 
(::stopSafetyAndOpenDoor.openSawDoor.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(4262400935), "openSawDoor", 
(::stopSafetyAndOpenDoor.stopSafety.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2797096667), "stopSafety", 
(::stopSafetyAndOpenDoor.sparMaxButtonTime.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000011000$UINT, TO_UDINT(4222619674), "sparMaxButtonTime", 
(::stopSafetyAndOpenDoor.readOpenSawDoor.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(4062226738), "readOpenSawDoor", 
//Clients:
(::stopSafetyAndOpenDoor.iPBresetSafety.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(2771945885), "iPBresetSafety", 
(::stopSafetyAndOpenDoor.iStopSafetyAllowed.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(4108976041), "iStopSafetyAllowed", 
(::stopSafetyAndOpenDoor.iSafetyState.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(3828373884), "iSafetyState", 
END_FUNCTION


#define USER_CNT_stopSafetyAndOpenDoor 0

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_stopSafetyAndOpenDoor] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION stopSafetyAndOpenDoor::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT_stopSafetyAndOpenDoor, pCmd := #vmt.CmdTable);
	vmt.CmdTable.CyWork		:= #CyWork();
	ClassSvr.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF ClassSvr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	openSawDoor.pMeth			:= StoreMethod( #M_RD_DIRECT(), #openSawDoor::Write() );
	IF openSawDoor.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	sparMaxButtonTime.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF sparMaxButtonTime.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	readOpenSawDoor.pMeth			:= StoreMethod( #readOpenSawDoor::Read(), #M_NO_F() );
	IF readOpenSawDoor.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION


FUNCTION VIRTUAL GLOBAL stopSafetyAndOpenDoor::CyWork
	VAR_INPUT
		EAX 	: UDINT;
	END_VAR
	VAR_OUTPUT
		state (EAX) 	: UDINT;(* := READY *)
	END_VAR

  iPBresetSafety := iPBresetSafety.Read();
  iStopSafetyAllowed := iStopSafetyAllowed.Read();
  iSafetyState:= iSafetyState.Read();
  
  IF iPBresetSafety & iStopSafetyAllowed & oldPBresetSafety=0 THEN
    StopSafety:= 0; //means stop it
  END_IF;
  IF iStopSafetyAllowed=0 | iSafetyState=0 THEN
    StopSafety:= 1; //means just go on
  END_IF;
  
  IF stopSafety= 1 THEN
    resetSafety:= iPBresetSafety;
  END_IF;
  
  
  
  IF iSafetyState= 1 | (ops.tAbsolute-tmpButtonTime> sparMaxButtonTime) THEN
    openSawDoor:= 0; //in screen this one can be enabled for one minute
  END_IF;

  oldPBresetSafety:= iPBresetSafety;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL stopSafetyAndOpenDoor::openSawDoor::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

  IF iSafetyState= 0 THEN
    openSawDoor := input;
    tmpButtonTime:= ops.tAbsolute;
  END_IF;
	result := openSawDoor;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL stopSafetyAndOpenDoor::readOpenSawDoor::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

  readOpenSawDoor:= openSawDoor;
	output := readOpenSawDoor;

END_FUNCTION
