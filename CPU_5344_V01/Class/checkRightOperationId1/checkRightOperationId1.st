//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "checkRightOperationId1"
	Revision           = "0.0"
	GUID               = "{D24FF6D3-C0E7-4D4C-AE52-3B7518B3FBE4}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(284,120)">
	<Channels>
		<Server Name="ClassSvr" GUID="{E5A60B4B-04F4-4E59-8E29-84C2548A2000}" Visualized="false" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="maxLengthForWasteBin" GUID="{CF242561-9F84-4602-BD7A-5E9CE49A1D6C}" Visualized="false" Initialize="true" DefValue="3000" WriteProtected="true" Retentive="false"/>
		<Server Name="minLengthForRollers" GUID="{EB8ADF95-94E2-43D9-8187-FE6B2A15990B}" Visualized="false" Initialize="true" DefValue="5000" WriteProtected="true" Retentive="false"/>
	</Channels>
</Class>
*)
checkRightOperationId1 : CLASS
  //Servers:
	ClassSvr 	: SvrChCmd_DINT;
	minLengthForRollers 	: SvrCh_DINT;
	maxLengthForWasteBin 	: SvrCh_DINT;
  //Clients:
  //Variables:
  //Functions:
	
	FUNCTION GLOBAL checkMagazin
		VAR_INPUT
			iProductLength 	: DINT;
			ioOperationID1 	: DINT;
		END_VAR
		VAR_OUTPUT
			newMagazinValue 	: DINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

//}}LSL_DECLARATION


FUNCTION GLOBAL TAB checkRightOperationId1::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_CHECKRIGHTOPERATIONID1
0$UINT, 0$UINT, (SIZEOF(::checkRightOperationId1))$UINT, 
3$UINT, 0$UINT, 0$UINT, 
TO_UDINT(2769415787), "checkRightOperationId1", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::checkRightOperationId1.ClassSvr.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(619352855), "ClassSvr", 
(::checkRightOperationId1.minLengthForRollers.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(410657243), "minLengthForRollers", 
(::checkRightOperationId1.maxLengthForWasteBin.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1841647584), "maxLengthForWasteBin", 
//Clients:
END_FUNCTION


#define USER_CNT_checkRightOperationId1 0

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_checkRightOperationId1] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION checkRightOperationId1::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT_checkRightOperationId1, pCmd := #vmt.CmdTable);
	vmt.CmdTable.Write		:= #M_WR_DIRECT();
	ClassSvr.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF ClassSvr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION


FUNCTION GLOBAL checkRightOperationId1::checkMagazin
	VAR_INPUT
		iProductLength 	: DINT;
		ioOperationID1 	: DINT;
	END_VAR
	VAR_OUTPUT
		newMagazinValue 	: DINT;
	END_VAR

  newMagazinValue:=0;

  CASE ioOperationId1 OF
    
  1, 2, 3: //belt magazins
    IF iProductLength < maxLengthForWasteBin THEN //it fits in waste bin, so its to small for the rollers
      newMagazinValue:=10; //waste bin
    ELSIF iProductLength < minLengthForRollers THEN //to small for rollers to big for waste bin, take out manually
      newMagazinValue:=11; //take out manually
    END_IF; 
    
  10: //waste bin
    IF iProductLength > maxLengthForWasteBin THEN //to big for waste bin
      IF iProductLength <= minLengthForRollers THEN //to small for rollers to big for waste bin, take out manually
        newMagazinValue:=11; //take out manually
      ELSE //fits in rollers
        newMagazinValue:=3; //let machine choose roller
      END_IF;
    END_IF;
    
  11: //always ok
  
  ELSE //no proper choice made

    IF iProductLength <= maxLengthForWasteBin THEN //it fits in waste bin, so its to small for the rollers
      newMagazinValue:=10; //waste bin
    ELSIF iProductLength <= minLengthForRollers THEN //to small for rollers to big for waste bin, take out manually
      newMagazinValue:=11; //take out manually
    ELSE //fits in rollers
      newMagazinValue:=3; //let machine choose roller
    END_IF;   
    
  END_CASE;


END_FUNCTION
