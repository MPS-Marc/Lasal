//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
#define OBJECTS_CONFIG

//Define part of class _DriveAxisBase
// Device ID for the Drive Cards 
#define DRIVEMNG_AXISDEVICEID_SDD_OFFSET         0
#define DRIVEMNG_AXISEVICEID_MDD_OFFSET   16#10000
#define DRIVEMNG_AXISEVICEID_SDIAS_OFFSET 16#20000


#define DRIVEAXIS_SPEED_SFFLIMITATION_USERINFO_0   32767
#define DRIVEAXIS_SPEED_SFFLIMITATION_USERINFO_1    1000
#define DRIVEAXIS_TORQUE_LIMITATION_VALUE           1000
#include "..\..\Class\_DriveMngBase\SDDDefinitions.h"
#include "..\..\Class\HwControl\HwControl.h"
//Define part of class _DriveMngBase
#ifndef _T_DRIVEMNGBASE_H
#define _T_DRIVEMNGBASE_H

// DiasDrive Constants
#DEFINE SDDMAXENTRIES   32        // maximale Anzahl an Achsen
#DEFINE SDDMAXPLACE     3         // maximale Anzahl an Achsen pro Steckplatz 

// Device ID for the Drive IF Cards 
#define DRIVEMNG_BUSDEVICEID_VAC011    11
#define DRIVEMNG_BUSDEVICEID_VAC012  1061
#define DRIVEMNG_BUSDEVICEID_VAC013  1075

#define DRIVEMNG_BUSDEVICEID_MDD     1071

// Device ID for the Drive Cards 
#define DRIVEMNG_DRVDEVICEID_SDD_OFFSET 0

#define DRIVEMNG_DRVDEVICEID_SDD305 DRIVEMNG_DRVDEVICEID_SDD_OFFSET + 16
#define DRIVEMNG_DRVDEVICEID_SDD310 DRIVEMNG_DRVDEVICEID_SDD_OFFSET +  3
#define DRIVEMNG_DRVDEVICEID_SDD315 DRIVEMNG_DRVDEVICEID_SDD_OFFSET +  1
#define DRIVEMNG_DRVDEVICEID_SDD335 DRIVEMNG_DRVDEVICEID_SDD_OFFSET + 12

#define DRIVEMNG_DRVDEVICEID_SDD205 DRIVEMNG_DRVDEVICEID_SDD_OFFSET + 22 
#define DRIVEMNG_DRVDEVICEID_SDD210 DRIVEMNG_DRVDEVICEID_SDD_OFFSET +  9
#define DRIVEMNG_DRVDEVICEID_SDD215 DRIVEMNG_DRVDEVICEID_SDD_OFFSET +  5

#define DRIVEMNG_DRVDEVICEID_SDD105 DRIVEMNG_DRVDEVICEID_SDD_OFFSET + 21
#define DRIVEMNG_DRVDEVICEID_SDD115 DRIVEMNG_DRVDEVICEID_SDD_OFFSET + 10
#define DRIVEMNG_DRVDEVICEID_SDD120 DRIVEMNG_DRVDEVICEID_SDD_OFFSET +  7

#define DRIVEMNG_DRVDEVICEID_MDD_OFFSET 16#10000

#define DRIVEMNG_DRVDEVICEID_MDD111 DRIVEMNG_DRVDEVICEID_MDD_OFFSET + 1
#define DRIVEMNG_DRVDEVICEID_MDD121 DRIVEMNG_DRVDEVICEID_MDD_OFFSET + 2

#define DRIVEMNG_DRVDEVICEID_SDIAS_OFFSET 16#20000

#define DRIVEMNG_DRVDEVICEID_DC061 DRIVEMNG_DRVDEVICEID_SDIAS_OFFSET + 16#180 // 1 = 1 Achse 80 SDIAS


#define DRIVEMNG_DRIVESCOPE_GETALL_PARAM    16#2080
#define DRIVEMNG_DRIVESCOPE_SCOPE_BIT       16#60000000
#define DRIVEMNG_DRIVESCOPE_SINDEX_RANGE    511


#endif // _T_DRIVEMNGBASE_H
#include "..\..\class\_drivemngbase\drivemngbase.h"
//Define part of class Varan_Base
#ifndef _T_VARANBASE_H
#define _T_VARANBASE_H

#define	VARAN_PLL_OFFSET		16#0140
#define VARAN_MULTIPLE_OFFSET	16#01AC

// version of serial number validation (16#10 = 1.0)
#define SERNO_VALIDATION_VERSION 16#10

#define IsTransparent_IS_AVAILABLE

// Defines for Mutex Generation
#define VARAN_STR_MUTEX_NAME_SEPERATOR ".."
#define VARAN_MUTEX_NAME_END_LENGTH 5
#define VARAN_MUTEX_NAME_MAX_LENGTH 32


#define VARAN_SPI_IDENT_LICENCENO_OFFSET    16#14
#define VARAN_SPI_IDENT_HARDWAREVER_OFFSET  16#18


#endif // _T_VARANBASE_H
#include "..\..\Source\interfaces\lsl_st_hardwaretree.h"
//Define part of class _VaranDriveBase
#ifndef _T_VARANDRIVEBASE_H
#define _T_VARANDRIVEBASE_H

#define VAC011_DEVICE_ID		              1005					// device id of VAC011
#define VAC012_DEVICE_ID		              1061					// device id of VAC012
#define VAC013_DEVICE_ID		              1075					// device id of VAC012

#define DIASDRIVE_MAXI_DEVICE_ID          1070          // device id of Dias Drive Maxi
#define DIASDRIVE_MINI_DEVICE_ID          1071          // device id of Dias Drive Mini


//#define DIASDRIVE_WaitTime_ns		            1ms * 1000 * 1000	//time in ns to send next DO in async mode

#define DIASDRIVE_OFFSET_Axis		            16#40							// memory for every axis (offset for axis 1 is 0, for axis 2 is 16#40..)
#define DIASDRIVE_OFFSET_AxisRead	          16#20							//Offset to read data of one axis
#define DIASDRIVE_OFFSET_FAST_AXIS_WRITE    16#C0
#define DIASDRIVE_OFFSET_FAST_AXIS_READ     DIASDRIVE_OFFSET_FAST_AXIS_WRITE + 16#22

#define DIASDRIVE_QUIT_ERROR_WAIT_TIME    50  // in ms

// drive address mapping
#define DIASDRIVE_ADR_ALT_BUF             16#0000  // memory offset for alternating buffer of drive
#define DIASDRIVE_ADR_SERVICE             16#1000  // memory offset for service data of drive
#define DIASDRIVE_ADR_PLL                 16#2000  // memory offset for PLL of drive
#define DIASDRIVE_ADR_LVDS_BUS            16#3000  // memory offset for lvds bus interface of drive
#define DIASDRIVE_ADR_LVDS_DIAG           16#4000  // memory offset for lvds diagnostic of drive

#define DIASDRIVE_ADR_INPUTS              16#4900  // memory offset of digital inputs


#define DIASDRIVE_ADR_OFFSET_CHANNEL      16#0800  // memory for every channel
#define DIASDRIVE_ADR_OFFSET_AXIS         16#0200  // memory for every axis

#define DIASDRIVE_ADR_AXIS_WR_OFFSET      16#0000  // offset to access write data
#define DIASDRIVE_ADR_AXIS_RD_OFFSET      16#0100  // offset to access read data

#define DIASDRIVE_ADR_ALT_BUF_RD_OFFSET   16#0400
#define DIASDRIVE_ADR_ALT_BUF_WR_OFFSET   16#0000

#define DIASDRIVE_ADR_SERVICE_READ        16#0030
#define DIASDRIVE_ADR_SERVICE_WRITE       16#0000

#define DIASDRIVE_MAX_AXIS                8
#define DIASDRIVE_MAX_AXIS_PER_MODULE     3
#define DIASDRIVE_MAX_AXIS_300            3 // with dias drive 300 only up to 3 axis possible

#define WRITETIME_TO_DPRAM                1000 // time in ns to write data to manager dpram

#endif // _T_VARANDRIVEBASE_H
//Define part of class BusInterfaceSDIASInternal
#define BUSIF_INTERNAL_MAX_NR_DO 100

// Defines for Mutex Generation
#define INTERNAL_STR_MUTEX_NAME_SEPERATOR ".."
#define INTERNAL_MUTEX_NAME_END_LENGTH 5
#define INTERNAL_MUTEX_NAME_MAX_LENGTH 32
#include "..\..\Source\BusInterface.h"
#include "..\..\Source\interfaces\lsl_st_mt.h"
#include "..\..\Class\HwControl\watchdog.h"
#include "..\..\Source\interfaces\lsl_st_sysinfo.h"
#include "..\..\Source\interfaces\lsl_st_systrace.h"
#include "..\..\Class\HwControl\_HWKScope.h"
#include <.\lsl_st_mt.h>
//Define part of class SafetyUDP
#define SAFETY_UDP_MAX_SOCKETS                6     // Max number of socket

#define SAFETY_UDP_CLT_SEND_OK                0    // Send ok
#define SAFETY_UDP_CLT_INVALID_HANDLE        -1    // Invalid handle
#define SAFETY_UDP_CLT_NOT_OPEN              -2    // Socket is not open
#define SAFETY_UDP_CLT_SEND_FAILED           -3    // Send failed
#define SAFETY_UDP_CLT_SEND_BUFFER_FULL      -4    // Send buffer is full
#define SAFETY_UDP_CLT_DATA_TO_BIG           -5    // Data to big

#define SAFETY_UDP_MAXIMUM_SEGMENT_SIZE    1452    // Maximum of user data

#define SAFETY_UDP_TIMEOUT_OPENSOCKET    (1000)    //timeout for opening socket

#define SAFETY_UDP_RECEIVE_TIMEOUT          800

#define SAFETY_UDP_TX_BUFFER_SIZE          1024
//Define part of class SafetyManager
#define LogBufferSize 1000
#include "..\..\Class\SafetyManager\SafetyManager.h"
#include "..\..\Source\interfaces\lsl_st_safetydll.h"
//Define part of class SdiasManager
#define SDIAS_SDO_MAX_LENGTH              128
#define SDIAS_SDO_RINGBUFFER_NO            64
#define SDIAS_SDO_CHANNEL_NO                3   // fixed in the VI hardware to be 3

// watchdog trigger interval (after 130ms of no trigger the SDIAS HW goes into reset again and takes at least another 10ms to be ready again)
#define SDIAS_WATCHDOG_TRIGGER_TIME        40

// time needed by sdias modules to start up after the watchdog is triggered the first time in ms
#define SDIAS_HARDWARE_STARTUP_TIME        15

// sdias manager needs 2 ticks to handle event for read task (measure sync time)
#define SDIAS_SYNC_MEASURE_TICKS            2

// after activating the PLL SyncOut it takes 3 cycles until the SDIAS sync can be injected
#define SDIAS_CYCLES_WAIT_AFTER_SYNC_ENABLE 3

// wait 1 bus cycle at start to get valid numbers in the task info
#define SDIAS_TASKINFO_READY_TICKS          1

// time to wait (in ms) until other tasks in the same or lower priority than post init have done their stuff
#define SDIAS_WAIT_TIME_IN_POST_INIT        1

#define SIZE_PER_SDIAS_CLIENT               16#0400

// for far memory accesses: 1 module can hold maximum 256 1K blocks (0-255)
#define SDIAS_1K_BLOCK_NO                       256

// far memory accesses maximum length in bytes
#define SDIAS_MAX_SIZE_FAR_MEM_ACCESS           127


#define SDIAS_OFFSET_HW_CONFIG              16#FF00
#define SDIAS_OFFSET_TASK_EVENT_IDS         16#FF10
#define SDIAS_OFFSET_FEATURE_INFO           16#FF18
#define SDIAS_OFFSET_APPLI_LED_STATES       16#FF20
#define SDIAS_OFFSET_SYNC_INJECTION_CFG     16#FF3D
#define SDIAS_OFFSET_TRIGGER_UNIT_SETUP_0   16#FF41
#define SDIAS_OFFSET_TRIGGER_UNIT_SETUP_1   16#FF45
#define SDIAS_OFFSET_TASK_START_CFG_0       16#FF60
#define SDIAS_OFFSET_TASK_CONFIG_0          16#FF86
#define SDIAS_OFFSET_TASK_CONFIG_1          16#FF96
#define SDIAS_OFFSET_TASK_INFO_1            16#FF94
#define SDIAS_OFFSET_TASK_HANDSHAKE_1       16#FF9B
#define SDIAS_OFFSET_TASK_DURATION_TIME_1   16#FF9C
#define SDIAS_OFFSET_TASK_DURATION_TIME_2   16#FFAC
#define SDIAS_OFFSET_TASK_CONFIG_2          16#FFA6

#define SDIAS_RETRIES_ALLOWED         2

// mask to get global error flag out of message counter byte of SDO responses
#define SDIAS_MASK_GLOBAL_ERROR_FLAG        16#80

// mask to get message counter out of message counter byte of SDO responses
#define SDIAS_MASK_MESSAGE_COUNTER          16#3F


#define SDIAS_EVENT_MASK_ID_SYNC_OUT0       16#10
#define SDIAS_EVENT_MASK_ID_SYNC_OUT1       16#11
#define SDIAS_EVENT_MASK_ID_SYNC_OUT2       16#12
#define SDIAS_EVENT_MASK_ID_SYNC_OUT3       16#13

#define SDIAS_MANAGER_SYNC_SYNCOUT_ID       16#85
#define SDIAS_TASK_START_EVENT_SYNCOUT_ID   16#86


#define SDIAS_PLACE_NO_MODULE_ADDED_SO_FAR  16#80000000

#define SDIAS_TRIGGER_UNIT_BYTE_SIZE        2

#define SDIAS_WAIT_TIME_FIRMWARE_HANDSHAKE  5 * 1000

// if the firmware version is below this, there might be problems with SCP111 and other modules => print warning at startup
#define SDIAS_FW_VERSION_SDO_ERROR_FIXED    16#120

// if the protocol version ist below this, Control Read/Broadcast Write Command is not supported by sdiasmanager
#define SDIAS_PROTOCOLVERSION_BROADCAST     16#120

// if the cil version ist below this, Control Read/Broadcast Write Command is not supported by OS for local SDIAS.
#define SDIAS_CILVERSION_BROADCAST         16#5001 

// timeout for blocking the init during initialisation (in ms)
#define SDIAS_INIT_BLOCK_TIMEOUT            20 * 1000

#define SDIAS_MUTEX_NAME_END_LENGTH 3
#define SDIAS_MUTEX_NAME_MAX_LENGTH 32
#define SDIAS_MUTEX_STR_SEPERATOR   ".."

//#define SDIAS_RT_TIME_MEASUREMENT
#ifdef SDIAS_RT_TIME_MEASUREMENT
  #pragma message("ATTENTION: SDIAS real time measurement is active and needs additional ressources in the realtime task")
#endif

(* SDIAS data object commands  *)
#define	 SDIAS_CMD_END							  0x00			(* End command										          *)
#define	 SDIAS_CMD_ACC_MEMORY				  0x01			(* Access dpram memory								      *)
#define	 SDIAS_CMD_ACC_CONTROL				0x02			(* Access dpram control memory						  *)
#define	 SDIAS_CMD_GLOBAL						  0x03			(* SDIAS global command								      *)
#define	 SDIAS_CMD_COPY_LOCAL					0x04			(* DPRAM copy command in local dpram				*)
#define	 SDIAS_CMD_JMP_LOCAL					0x05			(* DPRAM jump command in local dpram 				*)
#define  SDIAS_CMD_ACC_MEMORY_FAR     0x07      (* SDIAS Far Memory Access                  *)

(* SDIAS defines for data object handling *)
// Write data oject list
#define	 SDIAS_DOL_WRITE_USAGE_DOL_EMPTY	  0x20			(* Usage of empty write dol list (wachtdog trigger + end command)   *)
#define	 SDIAS_DOL_WRITE_USAGE_DTA_EMPTY	  0x03			(* Usage of empty write dol data (DO ctrl of 2x copy command for task information + DO ctrl of watchdog trigger      *)
#define	 SDIAS_DOL_WRITE_OFFSET_END_CMD			0x10			(* One data object in list - offset = 1 DO size = 0x10						  *)
#define	 SDIAS_DOL_WRITE_OFFSET_FIRST_DTA		0x02			(* Offset of first data byte of second copy command = 2 (DO ctrl)   *)
#define	 SDIAS_DOL_WRITE_OFFSET_LAST_DTA		0x02			(* Offset of last data byte of second copy command = 2 (DO ctrl )   *)

// Read data oject list
#define	 SDIAS_DOL_READ_USAGE_DOL_EMPTY	    0x30			(* Usage of empty read dol list (2x task info copy command + end command)   *)
#define	 SDIAS_DOL_READ_USAGE_DTA_EMPTY	    0x0D			(* Usage of empty write dol data (DO ctrl of 2x copy command for task information + DO ctrl of watchdog trigger      *)
#define	 SDIAS_DOL_READ_OFFSET_END_CMD			0x20			(* One data object in list - offset = 1 DO size = 0x10						          *)
#define	 SDIAS_DOL_READ_OFFSET_FIRST_DTA		0x07			(* Offset of first data byte of second copy command = 7 = DO state          *)
#define	 SDIAS_DOL_READ_OFFSET_LAST_DTA		  0x0C			(* Offset of last data byte of second copy command = 12 (last byte of task information)       *)

//Versionsnumber where SDIAS SPI Read Accesses are available
#define  SDIAS_SDO_SPI_FIRMWARE_VERSION_AVAILABLE 16#0120

//error info mask
#define  SDIAS_ERROR_INFO_MASK    2#1000011000011111

// Broadcast DO Info
#define SDIAS_OFFSET_CLIENT_CTRLTIMESTAMP   16#0190
#define SDIAS_NR_TIMEBROADCAST_DOS 2
#define SDIAS_TIMEBROADCAST_SUBCMD 16#B0
#include "..\..\Class\SdiasManager\SdiasManager.h"
#include "..\..\Source\interfaces\lsl_st_pll.h"
//Define part of class SdiasPLC
#define SDIASM_OBJECT_PATH            16#88000002   // Object Path for VSDIASmanager Length = 2 (First 2byte), Domain = 0 (3rd byte), Escape Sequence SDIAS (4th byte)
//Define part of class VaranManager
#define SIZE_PAYLOAD_FRAME_HEADER_DO      16#38  // Const because datasize is in the Payload DOs
#define SIZE_PAYLOAD_IRQ_FRAME_HEADER_DO  16#40  // Const because datasize is in the Payload DOs

#define VM_MAX_POST_INIT_MODULES  1000

#define VM_OBJECT_PATH            16#81000002   // Object Path for Varanmanager Length = 2 (First 2byte), Domain = 0 (3rd byte), Escape Sequence Varan (4th byte)
#include "..\..\Class\VaranManager\VaranManager.h"
#include "..\..\Source\interfaces\lsl_st_kernel.h"


FUNCTION GLOBAL TAB ONE_Varan
-1$UINT, 0$UINT, 
0$UINT, 0$UINT,

30$UDINT,
TO_UDINT(912370472), "_DriveAxis", 1$UINT, 67$UINT, 1$UINT,
TO_UDINT(4124502522), "_DriveAxisBase", 1$UINT, 75$UINT, 0$UINT,
TO_UDINT(833307860), "_DriveAxisSet", 1$UINT, 21$UINT, 1$UINT,
TO_UDINT(1066369953), "_DriveMng_MDD100", 1$UINT, 62$UINT, 1$UINT,
TO_UDINT(496739206), "_DriveMngBase", 1$UINT, 45$UINT, 0$UINT,
TO_UDINT(766164962), "_VaranDriveBase", 1$UINT, 67$UINT, 1$UINT,
TO_UDINT(2897291062), "ASCII_BIN", 1$UINT, 21$UINT, 1$UINT,
TO_UDINT(3882880897), "BusInterfaceSDIASInternal", 2$UINT, 0$UINT, 0$UINT,
TO_UDINT(794617671), "CriticalSection", 0$UINT, 4$UINT, 2$UINT,
TO_UDINT(3238133653), "Hub_Base", 1$UINT, 21$UINT, 1$UINT,
TO_UDINT(1770276445), "Hub_Base_Root", 2$UINT, 11$UINT, 1$UINT,
TO_UDINT(3078259981), "HwcLogging", 1$UINT, 0$UINT, 1$UINT,
TO_UDINT(2471641665), "HwControl", 5$UINT, 15$UINT, 1$UINT,
TO_UDINT(1193052171), "HwControlBase", 1$UINT, 10$UINT, 0$UINT,
TO_UDINT(4260294091), "HWRtPostScan", 1$UINT, 0$UINT, 1$UINT,
TO_UDINT(2225119864), "MerkerEx", 1$UINT, 22$UINT, 4$UINT,
TO_UDINT(933570811), "RAMex", 1$UINT, 17$UINT, 1$UINT,
TO_UDINT(3591333481), "RamFile", 1$UINT, 9$UINT, 1$UINT,
TO_UDINT(1799751072), "SafetyManager", 2$UINT, 18$UINT, 1$UINT,
TO_UDINT(3727715967), "SafetyUDP", 1$UINT, 4$UINT, 0$UINT,
TO_UDINT(4173303375), "SdiasHubBase", 1$UINT, 10$UINT, 1$UINT,
TO_UDINT(2118381352), "SdiasManager", 1$UINT, 94$UINT, 1$UINT,
TO_UDINT(1159122596), "SdiasPLC", 2$UINT, 3$UINT, 1$UINT,
TO_UDINT(1850111279), "String", 1$UINT, 11$UINT, 3$UINT,
TO_UDINT(2898603620), "StringInternal", 1$UINT, 85$UINT, 0$UINT,
TO_UDINT(862125188), "Varan_Base", 2$UINT, 18$UINT, 0$UINT,
TO_UDINT(2940693151), "VaranManager", 3$UINT, 4$UINT, 0$UINT,
TO_UDINT(1989862026), "VaranManager_1", 2$UINT, 4$UINT, 1$UINT,
TO_UDINT(4035182347), "VaranManager_Base", 1$UINT, 25$UINT, 0$UINT,
TO_UDINT(3232495061), "VirtualBaseInit", 1$UINT, 3$UINT, 0$UINT,

_NO_ATTR, TO_UDINT(4132320414), "_DRIVEX1", 


1$UINT, TO_UDINT(1836003848), "_DRIVEX1\SDDAXSET1", 

_NO_ATTR, TO_UDINT(573764426), "_DRIVEMNG_MDD1001", 


1$UINT, TO_UDINT(393328527), "_DRIVEMNG_MDD1001\VARANDRIVEBASE", 

1$UINT, TO_UDINT(3603645853), "VARANMANAGER_11\_BASE\ASCII_BIN1", 


1$UINT, TO_UDINT(2972590922), "HWCONTROL1\SAFETYMANAGER\UDPRECEIVEDATA", 
1$UINT, TO_UDINT(1868223583), "HWCONTROL1\SAFETYMANAGER\UDPSENDDATA", 

1$UINT, TO_UDINT(727478173), "_DRIVEMNG_MDD1001\VARANDRIVEBASE\HUB_BASE0", 

1$UINT, TO_UDINT(1776428101), "VARANMANAGER_11\HUB_BASE_ROOT0", 

1$UINT, TO_UDINT(3105254819), "HWCONTROL1\HWCLOGGING", 

_NO_ATTR, TO_UDINT(2190789875), "HWCONTROL1", 


1$UINT, TO_UDINT(1673205898), "HWCONTROL1\HWRTPOSTSCAN", 

1$UINT, TO_UDINT(2184566686), "_DRIVEMNG_MDD1001\FWDATESTRING\MERKEREX0", 
1$UINT, TO_UDINT(1895585888), "_DRIVEMNG_MDD1001\FWNUMSTRING\MERKEREX0", 
1$UINT, TO_UDINT(3219616318), "_DRIVEMNG_MDD1001\VARANDRIVEBASE\_BASE\SERIALNOSTR\MERKEREX0", 
1$UINT, TO_UDINT(1965165319), "_DRIVEX1\MERKEREX2", 

1$UINT, TO_UDINT(2625907238), "_DRIVEX1\RAMEX2", 

1$UINT, TO_UDINT(459173371), "_DRIVEMNG_MDD1001\VARANDRIVEBASE\_BASE\SERNOBACKUP", 

1$UINT, TO_UDINT(1778590035), "HWCONTROL1\SAFETYMANAGER", 


1$UINT, TO_UDINT(1007630054), "SDIASPLC1\SDIASHUBBASE1", 

1$UINT, TO_UDINT(4015996540), "SDIASPLC1\SDIASMANAGER1", 

_NO_ATTR, TO_UDINT(1378000520), "SDIASPLC1", 

1$UINT, TO_UDINT(3683859222), "_DRIVEMNG_MDD1001\FWDATESTRING", 
1$UINT, TO_UDINT(3693862049), "_DRIVEMNG_MDD1001\FWNUMSTRING", 
1$UINT, TO_UDINT(1443427331), "_DRIVEMNG_MDD1001\VARANDRIVEBASE\_BASE\SERIALNOSTR", 




_NO_ATTR, TO_UDINT(2395414379), "VARANMANAGER_11", 



//Internal connections
0$UDINT,
21$UDINT,
TO_UDINT(0), "SDDAxSet1", TO_UDINT(1),
TO_UDINT(0), "MerkerEx2", TO_UDINT(15),
TO_UDINT(0), "RAMex2", TO_UDINT(16),
TO_UDINT(2), "FWDateString", TO_UDINT(22),
TO_UDINT(2), "FWNumSTring", TO_UDINT(23),
TO_UDINT(2), "VaranDriveBase", TO_UDINT(3),
TO_UDINT(3), "SerialNoStr", TO_UDINT(24),
TO_UDINT(3), "SerNoBackup", TO_UDINT(17),
TO_UDINT(3), "Hub_Base0", TO_UDINT(7),
TO_UDINT(10), "SafetyManager", TO_UDINT(18),
TO_UDINT(10), "HWRtPostScan", TO_UDINT(11),
TO_UDINT(10), "HwcLogging", TO_UDINT(9),
TO_UDINT(18), "UdpSendData", TO_UDINT(6),
TO_UDINT(18), "UdpReceiveData", TO_UDINT(5),
TO_UDINT(21), "SdiasManager1", TO_UDINT(20),
TO_UDINT(21), "SdiasHubBase1", TO_UDINT(19),
TO_UDINT(22), "MerkerEx0", TO_UDINT(12),
TO_UDINT(23), "MerkerEx0", TO_UDINT(13),
TO_UDINT(24), "MerkerEx0", TO_UDINT(14),
TO_UDINT(25), "ASCII_BIN1", TO_UDINT(4),
TO_UDINT(25), "Hub_Base_Root0", TO_UDINT(8),
0$UDINT,
20$UDINT,
TO_UDINT(0), "DriveMng", TO_UDINT(2), "CmdState",
TO_UDINT(0), "DriveAxisSet", TO_UDINT(1), "Server0",
TO_UDINT(1), "coMerkerEx", TO_UDINT(15), "m_udLength",
TO_UDINT(1), "coRamEx", TO_UDINT(16), "m_udLength",
TO_UDINT(2), "toVaran", TO_UDINT(3), "State",
TO_UDINT(2), "cOnline", TO_UDINT(3), "Online",
TO_UDINT(2), "FwNumStr", TO_UDINT(23), "Data",
TO_UDINT(2), "FwDatetr", TO_UDINT(22), "Data",
TO_UDINT(2), "VaranIn", TO_UDINT(8), "Control",
TO_UDINT(7), "VaranIn", TO_UDINT(3), "State",
TO_UDINT(8), "VaranConnect", TO_UDINT(25), "Control",
TO_UDINT(11), "toHwControlBase", TO_UDINT(10), "Control",
TO_UDINT(18), "To_HwControl", TO_UDINT(10), "Control",
TO_UDINT(19), "ToNextSDIAS", TO_UDINT(20), "ClassState",
TO_UDINT(20), "ToBusInterface", TO_UDINT(21), "CallCommand",
TO_UDINT(21), "ToHwControl", TO_UDINT(10), "Control",
TO_UDINT(22), "DataBuffer", TO_UDINT(12), "m_udLength",
TO_UDINT(23), "DataBuffer", TO_UDINT(13), "m_udLength",
TO_UDINT(24), "DataBuffer", TO_UDINT(14), "m_udLength",
TO_UDINT(25), "To_HwControl", TO_UDINT(10), "Control",

//Initialization values
0$UDINT,
41$UDINT,
TO_UDINT(0), "Place", TO_UDINT(0),//|Varan._DriveX1.Place;
TO_UDINT(0), "AxisNo", TO_UDINT(1),//|Varan._DriveX1.AxisNo;
TO_UDINT(0), "AxisExtend", TO_UDINT(1),//|Varan._DriveX1.AxisExtend;
TO_UDINT(0), "ParaSaveType", TO_UDINT(1),//|Varan._DriveX1.ParaSaveType;
TO_UDINT(0), "OverwriteMotorPara", TO_UDINT(0),//|Varan._DriveX1.OverwriteMotorPara;
TO_UDINT(1), "ParaSaveType", TO_UDINT(1),//|Varan._DriveX1\SDDAxSet1.ParaSaveType;
TO_UDINT(1), "OverwriteMotorPara", TO_UDINT(0),//|Varan._DriveX1\SDDAxSet1.OverwriteMotorPara;
TO_UDINT(2), "Required", TO_UDINT(0),//|Varan._DriveMng_MDD1001.Required;
TO_UDINT(2), "Transparent", TO_UDINT(0),//|Varan._DriveMng_MDD1001.Transparent;
TO_UDINT(2), "FetchDigitalInputs", TO_UDINT(0),//|Varan._DriveMng_MDD1001.FetchDigitalInputs;
TO_UDINT(3), "Required", TO_UDINT(0),//|Varan._DriveMng_MDD1001\VaranDriveBase.Required;
TO_UDINT(3), "Transparent", TO_UDINT(0),//|Varan._DriveMng_MDD1001\VaranDriveBase.Transparent;
TO_UDINT(3), "TimeBase", TO_UDINT(0),//|Varan._DriveMng_MDD1001\VaranDriveBase.TimeBase;
TO_UDINT(3), "TimeBaseOffset", TO_UDINT(0),//|Varan._DriveMng_MDD1001\VaranDriveBase.TimeBaseOffset;
TO_UDINT(3), "FetchDigitalInputs", TO_UDINT(0),//|Varan._DriveMng_MDD1001\VaranDriveBase.FetchDigitalInputs;
TO_UDINT(7), "Splitter_Place", TO_UDINT(0),//|Varan.VaranDriveBase\_DriveMng_MDD1001\Hub_Base0.Splitter_Place;
TO_UDINT(8), "Splitter_Place", TO_UDINT(0),//|Varan.VaranManager_11\Hub_Base_Root0.Splitter_Place;
TO_UDINT(10), "UdpSafetyPort", TO_UDINT(10823),//|Varan.HwControl1.UdpSafetyPort;
TO_UDINT(10), "InterfaceNo", TO_UDINT(1),//|Varan.HwControl1.InterfaceNo;
TO_UDINT(10), "RtTaskSync", TO_UDINT(0),//|Varan.HwControl1.RtTaskSync;
TO_UDINT(12), "ThreadSafe", TO_UDINT(0),//|Varan.FWDateString\_DriveMng_MDD1001\MerkerEx0.ThreadSafe;
TO_UDINT(13), "ThreadSafe", TO_UDINT(0),//|Varan.FWNumSTring\_DriveMng_MDD1001\MerkerEx0.ThreadSafe;
TO_UDINT(14), "ThreadSafe", TO_UDINT(0),//|Varan.SerialNoStr\_base\VaranDriveBase\_DriveMng_MDD1001\MerkerEx0.ThreadSafe;
TO_UDINT(15), "ThreadSafe", TO_UDINT(0),//|Varan._DriveX1\MerkerEx2.ThreadSafe;
TO_UDINT(16), "ThreadSafe", TO_UDINT(0),//|Varan._DriveX1\RAMex2.ThreadSafe;
TO_UDINT(17), "Setup", TO_UDINT(2#1101),//|Varan._base\VaranDriveBase\_DriveMng_MDD1001\SerNoBackup.Setup;
TO_UDINT(18), "UdpSafetyPort", TO_UDINT(10823),//|Varan.HwControl1\SafetyManager.UdpSafetyPort;
TO_UDINT(18), "InterfaceNo", TO_UDINT(1),//|Varan.HwControl1\SafetyManager.InterfaceNo;
TO_UDINT(19), "SplitterPlace", TO_UDINT(0),//|Varan.SdiasPLC1\SdiasHubBase1.SplitterPlace;
TO_UDINT(20), "DeviceID", TO_UDINT(0),//|Varan.SdiasPLC1\SdiasManager1.DeviceID;
TO_UDINT(21), "CycleTime", TO_UDINT(2000),//|Varan.SdiasPLC1.CycleTime;
TO_UDINT(21), "IsoStartPoint", TO_UDINT(50),//|Varan.SdiasPLC1.IsoStartPoint;
TO_UDINT(22), "SingleRealloc", TO_UDINT(1),//|Varan._DriveMng_MDD1001\FWDateString.SingleRealloc;
TO_UDINT(23), "SingleRealloc", TO_UDINT(1),//|Varan._DriveMng_MDD1001\FWNumSTring.SingleRealloc;
TO_UDINT(24), "SingleRealloc", TO_UDINT(1),//|Varan._base\VaranDriveBase\_DriveMng_MDD1001\SerialNoStr.SingleRealloc;
TO_UDINT(25), "VaranManagerTime", TO_UDINT(2000000),//|Varan.VaranManager_11.VaranManagerTime;
TO_UDINT(25), "VaranManagerNr", TO_UDINT(0),//|Varan.VaranManager_11.VaranManagerNr;
TO_UDINT(25), "IsoStartPoint", TO_UDINT(50),//|Varan.VaranManager_11.IsoStartPoint;
TO_UDINT(25), "PayloadFrame", TO_UDINT(0),//|Varan.VaranManager_11.PayloadFrame;
TO_UDINT(25), "CoreSelect", TO_UDINT(0),//|Varan.VaranManager_11.CoreSelect;
TO_UDINT(25), "InterframeGap", TO_UDINT(0),//|Varan.VaranManager_11.InterframeGap;

//Symbolic initialization values
0$UDINT,
0$UDINT,

//Initialization of string values
0$UDINT,
0$UDINT,

//Configuration of tasks (RealTime, Cyclic, Background)
0$UDINT,
1$UDINT,
TO_UDINT(11), (2)$UDINT, 4194304$DINT, 	//HWCONTROL1\HWRTPOSTSCAN

0$UDINT,
1$UDINT,
TO_UDINT(2), (10)$UDINT, 4194303$DINT, 	//_DRIVEMNG_MDD1001

0$UDINT,
0$UDINT,

//External connections
0$UDINT,
0$UDINT,

//Magic internal connections
0$UDINT,
15$UDINT,
TO_UDINT(1), "ParaSaveType", TO_UDINT(0), "ParaSaveType",
TO_UDINT(1), "OverwriteMotorPara", TO_UDINT(0), "OverwriteMotorPara",
TO_UDINT(1), "ParaTab", TO_UDINT(0), "ParaTab",
TO_UDINT(1), "FileHandle", TO_UDINT(0), "FileHandle",
TO_UDINT(1), "TableIndex", TO_UDINT(0), "TableIndex",
TO_UDINT(3), "VaranIn", TO_UDINT(2), "VaranIn",
TO_UDINT(3), "Required", TO_UDINT(2), "Required",
TO_UDINT(3), "UserAction", TO_UDINT(2), "UserAction",
TO_UDINT(3), "SerNoValidation", TO_UDINT(2), "SerNoValidation",
TO_UDINT(3), "Transparent", TO_UDINT(2), "Transparent",
TO_UDINT(3), "VaranTimeMultiplier", TO_UDINT(2), "VaranTimeMultiplier",
TO_UDINT(3), "FetchDigitalInputs", TO_UDINT(2), "FetchDigitalInputs",
TO_UDINT(18), "UdpSafetyPort", TO_UDINT(10), "UdpSafetyPort",
TO_UDINT(18), "InterfaceNo", TO_UDINT(10), "InterfaceNo",
TO_UDINT(18), "SafetyDomainTimeout", TO_UDINT(10), "SafetyDomainTimeout",

//Configuration of timeslots of tasks (RealTime, Cyclic)
#ifdef __LSLLDR_TIMESLOTS__
0$UDINT,
0$UDINT,

0$UDINT,
0$UDINT,

#endif //__LSLLDR_TIMESLOTS__

//MultiMaster connections
#ifdef __LSLLDR_MULTIMASTER__
0$UDINT,
0$UDINT,
#endif //__LSLLDR_MULTIMASTER__

//Configuration for task ID (RealTime, CyclicTime)
#ifdef __LSLLDR_TASKID__
"\\\\TASKS2  "
0$UDINT,
1$UDINT,
(0)$UDINT, 	//HWCONTROL1\HWRTPOSTSCAN

0$UDINT,
1$UDINT,
(0)$UDINT, 	//_DRIVEMNG_MDD1001

0$UDINT,
0$UDINT,

#endif //__LSLLDR_TASKID__

END_FUNCTION